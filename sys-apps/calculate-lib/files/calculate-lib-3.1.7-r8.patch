diff --git calculate/lib/cl_template.py calculate/lib/cl_template.py
index efda545..14912c6 100644
--- calculate/lib/cl_template.py
+++ calculate/lib/cl_template.py
@@ -327,6 +327,8 @@ class _terms(_error, _shareTermsFunction):
                     else:
                         try:
                             valVars = self.objVar.Get(vals[0])
+                            varTable = self.objVar.Get('cl_used_action')
+                            varTable.append((vals[0],vals[1]))
                             if not valVars:
                                 valVars = ""
                         except DataVarsError, e:
@@ -505,7 +507,8 @@ class fileHeader(_terms):
 
     """
     # Допустимые параметры заголовка
-    allowParam = ["format", "format_conf", "comment", "append", "force",
+    allowParam = ["format","dotall","multiline",
+                  "comment", "append", "force",
                   "link", "mirror", "symbolic", "chmod", "chown", "name",
                   "path", "autoupdate","protected", "run","exec","merge",
                   "module","env"]
@@ -526,7 +529,8 @@ class fileHeader(_terms):
     # условные операторы
     terms = ('>', '<', '==', '!=', '>=', '<=')
     # параметры без значения
-    listParNotVal = ("symbolic", "force", "mirror", "autoupdate", "protected")
+    listParNotVal = ("multiline", "dotall", "symbolic", "force", "mirror",
+                     "autoupdate", "protected")
     # Результат вычисления условия в заголовке
     headerTerm = True
 
@@ -4510,8 +4514,8 @@ gettext -d cl_template "$*"
         cfgs = getCfgFiles(self.objVar.Get('cl_config_protect'),
                            prefix=chrootPath)
         autoUpdateDict = {}
-        for pkg in list(set(list(self.changedFiles.getPkgs())+
-                            self.objVar.Get('cl_merge_pkg'))):
+        for pkg in list(set(filter(None,list(self.changedFiles.getPkgs())+
+                            self.objVar.Get('cl_merge_pkg')))):
             category = isPkgInstalled(pkg,prefix=chrootPath)
             if category:
                 pkgContents = PkgContents("{CATEGORY}/{PF}".format(
@@ -5643,6 +5647,14 @@ gettext -d cl_template "$*"
         elif objHeadOld and objHeadOld.execStr:
             execStr = objHeadOld.execStr
 
+        if objHeadNew.fileType != 'patch':
+            wrongOpt = [x for x in ("multiline","dotall")
+                        if objHeadNew.params.has_key(x)]
+            if wrongOpt:
+                self.setError(\
+                    _("Option %s should be used for format=patch only")\
+                      %wrongOpt[0])
+                return False
         if objHeadNew.fileType:
             formatTemplate = objHeadNew.fileType
             typeAppendTemplate = objHeadNew.typeAppend
@@ -5654,6 +5666,11 @@ gettext -d cl_template "$*"
                     return False
                 # создаем объект формата шаблона
                 objTempl = self.getFormatObj(formatTemplate, self.textTemplate)
+                if formatTemplate == 'patch':
+                    if objHeadNew.params.has_key("multiline"):
+                        objTempl.setMultiline()
+                    if  objHeadNew.params.has_key("dotall"):
+                        objTempl.setDotall()
                 if not objTempl:
                     self.setError(\
                         _("Incorrect header parameter format=%s "
@@ -6186,7 +6203,7 @@ class iniParser(_error, templateFormat):
                     raise e
             time.sleep(1)
         else:
-            raise TemplatesError(_("Timeout lock %s")%fn)
+            raise TemplatesError(_("Lock timeout of %s")%fn)
 
     def openIniFile(self):
         if not self.text is None:
diff --git calculate/lib/datavars.py calculate/lib/datavars.py
index c0ef821..9371d16 100644
--- calculate/lib/datavars.py
+++ calculate/lib/datavars.py
@@ -377,7 +377,8 @@ class Variable:
         """Check value for type"""
         if "int" in self.type:
             if value and not value.isdigit():
-                raise VariableError(_("Value of variable '{varname}' must be integer"
+                raise VariableError(
+                    _("Value of variable '{varname}' must be integer"
                             ).format(varname=self.label or self.name))
         if "list" in self.type:
             if not type(value) in (list,tuple):
@@ -385,10 +386,10 @@ class Variable:
                     _("Value for variable '{varname}' may be '{vartype}' only").format(
                     varname=self.label or self.name,
                     vartype="list"))
-            error = _("Values for variable '{varname}' may be {vartype} only")
+            error = _("Values for variable '{varname}' may be '{vartype}' only")
         else:
             value = repeat(value,1)
-            error = _("Value for variable '{varname}' may be {vartype} only")
+            error = _("Value for variable '{varname}' may be '{vartype}' only")
         if "string" in self.type:
             value, valuecopy = tee(value,2)
             for v in (x for x in valuecopy if not type(x) in (str,unicode)):
@@ -398,6 +399,8 @@ class Variable:
             return
         if "choice" in self.type:
             choiceVal = self.choice()
+            tipChoice = map(lambda x:'"%s"(%s)'%(x[1],x[0]) \
+                            if type(x) in (list,tuple) else str(x), choiceVal)
             if choiceVal and type(choiceVal[0]) in (tuple,list):
                 choiceVal = [x[0] for x in choiceVal]
         if not "list-list" in self.type:
@@ -410,7 +413,7 @@ class Variable:
                         name = self.label or self.name
                         if not choiceVal:
                             self.raiseNothingValue()
-                        self.raiseWrongChoice(name,choiceVal,val,error)
+                        self.raiseWrongChoice(name,tipChoice,val,error)
 
     def raiseWrongChoice(self,name,choiceVal,value,error):
         raise VariableError(error.format(
@@ -1543,6 +1546,36 @@ class DataVars(SimpleDataVars):
                             self.Check(var,self.Get(var))
                     else:
                         val = self.fixWsdlTableValue(varObj,val)
+                        if varObj.type in ("choice","choice-list"):
+                            choicedata = self.ChoiceAndComments(var)
+                            if any(choicedata):
+                                if choicedata[1] is None:
+                                    choicedata = [choicedata[0],
+                                                  choicedata[0]]
+                                choicedata = zip(*choicedata)
+                                if varObj.type == "choice":
+                                    vals = [val]
+                                else:
+                                    vals = val
+                                res = []
+                                for val in vals:
+                                    if not val in map(lambda x:x[0],choicedata):
+                                        result = filter(lambda x:(
+                                                    _toUNICODE(val).lower() in _toUNICODE(x[0]).lower() or \
+                                                    _toUNICODE(val).lower() in _toUNICODE(x[1]).lower()),
+                                                 choicedata)
+                                        if len(result) > 1:
+                                            raise VariableError(_("Ambiguous choice:%s")%
+                                                ",".join(map(
+                                                lambda x:'"%s"(%s)'%(x[1],x[0]) if x[0] != x[1] else x[0],
+                                                             result)))
+                                        elif result:
+                                            val = result[0][0]
+                                    res.append(val)
+                                if varObj.type == "choice":
+                                    val = res[0]
+                                else:
+                                    val = res
                         self.Set(var,val)
                         # raise error for atempt set uncompatible variable
                         if uncomperr:
diff --git calculate/lib/format/patch.py calculate/lib/format/patch.py
index 4251c49..9c50bee 100644
--- calculate/lib/format/patch.py
+++ calculate/lib/format/patch.py
@@ -36,6 +36,7 @@ class patch(_error):
         self.doc = self.textToXML()
         if self.doc:
             self.rootNode = self.doc.documentElement
+        self.reFlags = 0
 
     def textToXML(self):
         """Создание из текста XML документа
@@ -51,6 +52,12 @@ class patch(_error):
             return False
         return self.doc
 
+    def setMultiline(self):
+        self.reFlags |= re.M
+
+    def setDotall(self):
+        self.reFlags |= re.S
+
     def processingFile(self, textConfigFile, rootPath=None):
         """Обработка конфигурационного файла"""
         if not self.doc:
@@ -89,7 +96,7 @@ class patch(_error):
                                %reText)
                         return False
                     try:
-                        regex = re.compile(reText)
+                        regex = re.compile(reText,self.reFlags)
                     except:
                         self.setError(\
                             _("Incorrect text of template '<reg>%s</reg>'")\
diff --git calculate/lib/utils/files.py calculate/lib/utils/files.py
index 55d8ba5..e9d19ad 100644
--- calculate/lib/utils/files.py
+++ calculate/lib/utils/files.py
@@ -110,7 +110,7 @@ class process:
         self.cwd = kwarg.get("cwd",None)
         self.command = getProgPath(command)
         if not self.command:
-            raise FilesError(_("Program %s is not found")%
+            raise FilesError(_("Command not found '%s'")%
                              command)
         self.command = [self.command] + list(params)
         self.stdin = stdin
@@ -954,7 +954,7 @@ def sambaPasswordCheck(username,password,server,resource):
     """
     smbclient = getProgPath('/usr/sbin/smbclient')
     if not smbclient:
-        raise FilesError(_("Command smbclient is not found"))
+        raise FilesError(_("Command not found '%s'")%"smbclint")
     p = process(smbclient,"-U",username,"//%s/%s"%(server,resource),
                 envdict={'PASSWD':password})
     return p.success()
diff --git calculate/lib/variables/X11.py calculate/lib/variables/X11.py
index 72de72b..ad33e27 100644
--- calculate/lib/variables/X11.py
+++ calculate/lib/variables/X11.py
@@ -18,7 +18,7 @@ import os
 import re
 from os import path
 from calculate.lib.datavars import Variable,VariableError,ReadonlyVariable
-from calculate.lib.utils.files import process, readLinesFile
+from calculate.lib.utils.files import process, readLinesFile,FilesError
 from calculate.lib.utils.common import (getAvailableVideo, getValueFromCmdLine,
                 getVideoFromXorgLog, getVideoFromXorgConf, getVideoFromCmdLine,
                 getCompositeFromXorgconf,getTupleVersion,
@@ -36,7 +36,7 @@ class VariableOsX11Resolution(Variable):
             processXDpy = process('xdpyinfo')
             if processXDpy.failed():
                 return ""
-        except OSError:
+        except (FilesError,OSError) as e:
             return ""
         lines = processXDpy.readlines()
         reRes = re.compile("dimensions:\s+(\d+)x(\d+)\s+pixels")
diff --git calculate/lib/variables/__init__.py calculate/lib/variables/__init__.py
index 1c1d90a..b703d5c 100644
--- calculate/lib/variables/__init__.py
+++ calculate/lib/variables/__init__.py
@@ -25,6 +25,7 @@ import linux
 import net
 import user
 import system
+import action
 from calculate.lib.cl_lang import setLocalTranslate
 setLocalTranslate('cl_lib3',sys.modules[__name__])
 
diff --git calculate/lib/variables/action.py calculate/lib/variables/action.py
new file mode 100644
index 0000000..802aca9
--- /dev/null
+++ calculate/lib/variables/action.py
@@ -0,0 +1,59 @@
+#-*- coding: utf-8 -*-
+
+# Copyright 2013 Calculate Ltd. http://www.calculate-linux.org
+#
+#  Licensed under the Apache License, Version 2.0 (the "License");
+#  you may not use this file except in compliance with the License.
+#  You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+#  Unless required by applicable law or agreed to in writing, software
+#  distributed under the License is distributed on an "AS IS" BASIS,
+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+#  See the License for the specific language governing permissions and
+#  limitations under the License.
+
+import os
+import sys
+from os import path
+from calculate.lib.datavars import (Variable,VariableError,ReadonlyVariable,
+                                    ActionVariable)
+
+from calculate.lib.cl_lang import setLocalTranslate
+from calculate.lib.cl_template import Template
+setLocalTranslate('cl_lib3',sys.modules[__name__])
+
+class VariableAcCustomName(Variable):
+    """
+    Пользовательское действие для выполнения шаблонов
+    """
+    opt = ["ac_custom_name"]
+    metavalue = "ACTION"
+    type = "choice"
+    value = ""
+    untrusted = True
+
+    def init(self):
+        self.label = _("Custom action")
+        self.help = _("custom action")
+
+    def choice(self):
+        oldAction = self.Get('cl_action')
+        oldName = self.Get('ac_custom_name')
+        clTempl = Template(self.parent, cltObj = False)
+        try:
+            clTempl.applyTemplates()
+        except:
+            pass
+        finally:
+            self.parent.Set('cl_action',oldAction,force=True)
+            self.parent.Set('ac_custom_name',oldName,force=True)
+            clTempl.closeFiles()
+        return list(set(map(lambda x:x[1],
+               filter(lambda x:x[0] == 'ac_custom_name',
+                      self.Get('cl_used_action')))))
+
+    def check(self,value):
+        if value == '':
+            raise VariableError(_("Need to specify action name"))
diff --git calculate/lib/variables/env.py calculate/lib/variables/env.py
index 094afcd..6d376e5 100644
--- calculate/lib/variables/env.py
+++ calculate/lib/variables/env.py
@@ -204,12 +204,26 @@ class VariableClAutoupdateSet(Variable):
         else:
             return "off"
 
+class VariableClHumanEditSet(Variable):
+    """
+    Параметр для отметки "ручной правки"
+    """
+    type = "bool"
+    opt = ["--human-edit"]
+    value = "off"
+
+    def init(self):
+        self.help = _("mark as human modification")
+        self.label = _("Mark as human modification")
+
 class VariableClProtectUseSet(ReadonlyVariable):
     """
     Использовать portage интеграцию с конфигурационными файлами
     """
     type = "bool"
-    value = "on"
+
+    def get(self):
+        return "on" if self.Get('cl_human_edit_set') == 'off' else "off"
 
 class VariableClDispatchConf(Variable):
     """
diff --git calculate/lib/variables/system.py calculate/lib/variables/system.py
index 08593ef..70bcf87 100644
--- calculate/lib/variables/system.py
+++ calculate/lib/variables/system.py
@@ -145,3 +145,12 @@ class VariableOsUefiSet(ReadonlyVariable):
             return "on"
         else:
             return "off"
+
+class VariableClUsedAction(ReadonlyVariable):
+    """
+    Переменная содержит все найденные при обработке шаблонов
+    событийные переменные (ac_)
+    """
+    type = "table"
+    def get(self):
+        return []
