diff --git pym/cl_fill.py pym/cl_fill.py
index 9faee1b..cccb95c 100644
--- pym/cl_fill.py
+++ pym/cl_fill.py
@@ -19,10 +19,11 @@ import os
 import types
 import pwd, grp
 import cl_overriding
+import socket
 
 from cl_vars_share import varsShare, clLocale
 from os.path import exists as pathexists
-from os import path
+from os import path,readlink
 from cl_utils import isMount, genpassword, \
                      getAvailableVideo, process, \
                      listDirectory,isPkgInstalled,lspci, readLinesFile, \
@@ -79,6 +80,10 @@ class fillVars(varsShare):
 
     def get_os_net_domain(self):
         """Get net domain name"""
+        if path.exists('/proc/self/fd/1') and \
+            readlink('/proc/self/fd/1') == '/dev/console' and \
+            self.Get('os_root_dev') == '/dev/nfs':
+            return "local"
         textLines = self._runos("hostname -d 2>&1")
         if textLines is False:
             cl_overriding.printERROR(_("Error executing 'hostname -d'"))
@@ -125,6 +130,10 @@ class fillVars(varsShare):
 
     def get_os_net_hostname(self):
         """Get hostname of computer"""
+        if path.exists('/proc/self/fd/1') and \
+            readlink('/proc/self/fd/1') == '/dev/console' and \
+            self.Get('os_root_dev') == '/dev/nfs':
+            return socket.gethostname()
         textLines = self._runos("hostname -s 2>&1")
         hostname = ""
         if textLines:
diff --git pym/cl_utils.py pym/cl_utils.py
index 1fb3743..4a021cc 100644
--- pym/cl_utils.py
+++ pym/cl_utils.py
@@ -29,6 +29,7 @@ import re
 import sys
 import getpass
 from types import StringType
+import tarfile
 
 try:
     from magic import open as type_file, MAGIC_NONE as MAGIC_NONE
@@ -1333,6 +1334,12 @@ def refreshUdev():
     """Run command which refresh information about device in udev"""
     udevadm = getProgPath('/sbin/udevadm')
     if udevadm:
+        blkidFile = '/etc/blkid.tab'
+        if path.exists(blkidFile):
+            try:
+                os.unlink(blkidFile)
+            except OSError:
+                pass
         process(udevadm,"trigger","--subsystem-match","block").success()
 
 def getPasswdUsers(minId=1000,maxId=65000):
@@ -1395,3 +1402,40 @@ def makeDirectory(pathname):
         return True
     except Exception, e:
         return False
+
+def tarLinks(rootpath,archpath,skip=[]):
+    """Add symbolic links to archive file"""
+    links = []
+    if skip:
+        reSkip = re.compile("|".join(map(lambda x:x.replace("*",".*"),
+            skip))).search
+    else:
+        reSkip = lambda x:False
+    lenprefix = len(path.normpath(rootpath))+1
+    if path.exists(archpath):
+        os.unlink(archpath)
+    # create arch
+    tar = tarfile.open(archpath,"w:bz2")
+    # find links
+    for root, dirs, files in os.walk(rootpath):
+        for link in  filter(os.path.islink,
+                     map(lambda x:path.join(root,x),
+                     dirs+files)):
+            # try add link
+            try:
+                if not reSkip(link):
+                    ti = tar.gettarinfo(link)
+                    ti.name = link[lenprefix:]
+                    tar.addfile(ti)
+                    links.append(link)
+            except OSError:
+                pass
+        # discard mounted paths
+        removeDirs = map(lambda x:x[0],
+                     filter(lambda x:path.islink(x[1]) or path.ismount(x[1]),
+                     map(lambda x:(x,path.join(root,x)),
+                     dirs)))
+        map(lambda x:dirs.remove(x),
+        removeDirs)
+    tar.close()
+    return links
