diff --git calculate/lib/cl_template.py calculate/lib/cl_template.py
index 2ca8405..6c11c24 100644
--- calculate/lib/cl_template.py
+++ calculate/lib/cl_template.py
@@ -39,7 +39,7 @@ from operator import lt, le, eq, ne, ge, gt
 from utils.common import _error, _warning
 from utils.text import  _toUNICODE, convertStrListDict
 from utils.portage import  isPkgInstalled,reVerSplitToPV
-from utils.content import PkgContents,checkContents,getCfgFiles
+from utils.content import PkgContents,checkContents,getCfgFiles,fillContents
 from utils.files import (getModeFile, listDirectory,removeDir, typeFile,
                         scanDirectory,
                         pathJoin,readFile,readLinesFile,process,STDOUT)
@@ -3798,6 +3798,7 @@ class Template(_file,_terms,_warning,xmlShare,templateFormat,_shareTemplate):
     templDirNameFile = ".calculate_directory"
     titleEnd = "For modify this file, create %(conf_path)s.clt template."
     protectPaths = []
+    allContents = {}
     if "CONFIG_PROTECT" in os.environ:
         protectPaths = ["/etc"] + filter(lambda x: x.strip(),
                                       os.environ["CONFIG_PROTECT"].split(" "))
@@ -3808,6 +3809,7 @@ class Template(_file,_terms,_warning,xmlShare,templateFormat,_shareTemplate):
                  printSUCCESS=lambda x:x,printWARNING=lambda x:x,
                  printERROR=lambda x:x,askConfirm=lambda x:x,
                  userProfile=False,dispatchConf=None):
+        self.protectPaths = objVar.Get('cl_config_protect')
         self.userProfile = userProfile
         self.dispatchConf = dispatchConf
         self.changedFiles = ChangedFiles()
@@ -4126,8 +4128,9 @@ gettext -d cl_template "$*"
                     flagFoundPath = True
                     break
             if flagFoundPath:
+                origConfigPath = PkgContents.reCfg.sub("/",configPath)
                 commentList = commentList +\
-                              [self.titleEnd%{'conf_path':configPath}]
+                              [self.titleEnd%{'conf_path':origConfigPath}]
         if comment:
             commentFirst = comment
             commentInsert = comment
@@ -4196,8 +4199,8 @@ gettext -d cl_template "$*"
 
     def fixNameFileConfig(self,origfilename):
         """Support ._cfg0000 files for postinst"""
-        if self.objVar.Get('cl_ebuild_phase') != 'postinst':
-            return origfilename
+        #if self.objVar.Get('cl_ebuild_phase') != 'postinst':
+        #    return origfilename
         directory,filename = os.path.split(origfilename)
         i = 0
         for i in range(0,9999):
@@ -4210,7 +4213,7 @@ gettext -d cl_template "$*"
                         return origfilename
                     origstat = os.stat(origfilename)[stat.ST_CTIME]
                     newstat = os.stat(filename)[stat.ST_CTIME]
-                    if newstat > origstat:
+                    if newstat >= origstat:
                         self.configMode = T_CFG
                         return filename
                 return origfilename
@@ -4416,23 +4419,26 @@ gettext -d cl_template "$*"
             if self.cltFilter:
                 # Шаблоны + .clt которые будут  применены
                 self.cltObj.filterApplyTemplates = {}
-                for pkg in self.objVar.Get('cl_merge_pkg'):
-                    category = isPkgInstalled(pkg)
-                    if category:
-                        pkgContents = PkgContents("{CATEGORY}/{PF}".format(
-                                    **category[0]))
-                        for filename in pkgContents.content.keys():
-                            if not filename in self.cltObj.filterApplyTemplates:
-                               self.cltObj.filterApplyTemplates[filename] = []
-                            self.cltObj.filterApplyTemplates[filename].append(pkg)
-                        for filename,pkgs in self.changedFiles.data.items():
-                            if not filename in self.cltObj.filterApplyTemplates:
-                               self.cltObj.filterApplyTemplates[filename] = []
-                            pkgs = filter(lambda x:not x in \
-                                          self.cltObj.filterApplyTemplates[filename],
-                                   map(lambda x:x[0],pkgs))
-                            self.cltObj.filterApplyTemplates[filename].extend(pkgs)
-
+                if self.objVar.Get('cl_merge_set') == "on":
+                    for pkg in self.objVar.Get('cl_merge_pkg'):
+                        if not pkg:
+                            continue
+                        category = isPkgInstalled(pkg)
+                        if category:
+                            pkgContents = PkgContents("{CATEGORY}/{PF}".format(
+                                        **category[0]))
+                            for filename in pkgContents.content.keys():
+                                if not filename in self.cltObj.filterApplyTemplates:
+                                   self.cltObj.filterApplyTemplates[filename] = []
+                                self.cltObj.filterApplyTemplates[filename].append(pkg)
+                for filename,pkgs in self.changedFiles.data.items():
+                    filename = PkgContents.reCfg.sub("/",filename)
+                    if not filename in self.cltObj.filterApplyTemplates:
+                       self.cltObj.filterApplyTemplates[filename] = []
+                    pkgs = filter(lambda x:not x in \
+                                  self.cltObj.filterApplyTemplates[filename],
+                           map(lambda x:x[0],pkgs))
+                    self.cltObj.filterApplyTemplates[filename].extend(pkgs)
             self.cltObj.applyTemplates()
             self.stop = self.stop or self.cltObj.stop
         if not self.stop and ((self.objVar.Get('cl_merge_pkg') or \
@@ -4503,7 +4509,6 @@ gettext -d cl_template "$*"
                            hashlib.md5(readFile(
                             cfgs[filename][0][1])).hexdigest():
                             files.add(filename)
-                            print "Added ",filename
 
                 for filename in list(files&set(cfgs.keys())):
                     # get ctime from orig filename
@@ -4988,7 +4993,16 @@ gettext -d cl_template "$*"
         # not current package file
         pkg = self.functObj.currentBelong
         if not pkg:
-            return pathFile
+            if not self.allContents:
+                fillContents(self.allContents,
+                    self.objVar.Get('cl_config_protect'),
+                    prefix=self.objVar.Get('cl_chroot_path'))
+            origName = pathFile if chrootPath == '/' \
+                                else pathFile[len(chrootPath):]
+            if origName in self.allContents:
+                pkg = self.allContents[origName]
+            else:
+                return pathFile
         pkg = isPkgInstalled(pkg,sortByVersion=True,prefix=chrootPath)
         if not pkg:
             return pathFile
@@ -5900,8 +5914,10 @@ class scanDirectoryClt:
                     statInfo = stInfo[stat.ST_MODE]
                     if fileOrDir.endswith(self.extFileTemplate) and\
                         stat.S_ISREG(statInfo):
-                        if not self.filterApplyTemplates or\
-                        absPath[:-self.lenExtFileTemplate] in\
+                        if not self.filterApplyTemplates and \
+                            self.objVar.Get('cl_merge_set') == 'off' or \
+                            self.filterApplyTemplates and \
+                            absPath[:-self.lenExtFileTemplate] in\
                             self.filterApplyTemplates.keys() or self.hasBelong(absPath):
                             prevDefault = self.objVar.defaultModule
                             if not self.processingFile(absPath, prefix):
@@ -5953,7 +5969,7 @@ class templateClt(scanDirectoryClt, Template):
             return False
         if prefix and prefix[-1] == "/":
             prefix = prefix[:-1]
-        if prefix:
+        if prefix and path.startswith(prefix):
             nameFileConfig = path.partition(prefix)[2]
         else:
             nameFileConfig = path
@@ -5975,6 +5991,18 @@ class templateClt(scanDirectoryClt, Template):
                 if origFileName in self.filterApplyTemplates:
                     for pkg in self.filterApplyTemplates[origFileName]:
                         self._addFile(filesApl,pkg=pkg)
+                else:
+                    if not self.allContents:
+                        fillContents(self.allContents,
+                            self.objVar.Get('cl_config_protect'),
+                            prefix=self.objVar.Get('cl_chroot_path'))
+                    for fn in filesApl:
+                        fn_orig = PkgContents.reCfg.sub('/',fn)
+                        if self.objVar.Get('cl_chroot_path') != '/':
+                            fn_orig = \
+                                fn_orig[len(self.objVar.Get('cl_chroot_path')):]
+                        if fn_orig in self.allContents:
+                            self._addFile([fn],pkg=self.allContents[fn_orig])
             # Настоящее имя конфигурационного файла
             nameFileConfig = filesApl[0]
             # Пишем время модификации *.env файлов
diff --git calculate/lib/utils/content.py calculate/lib/utils/content.py
index c8d316a..2bec6e0 100644
--- calculate/lib/utils/content.py
+++ calculate/lib/utils/content.py
@@ -16,9 +16,11 @@
 
 from calculate.lib.utils.files import (readLinesFile,readFile,pathJoin,
                                        process)
+from calculate.lib.utils.portage import reVerSplit
 from itertools import *
 from os import path
 import os
+import glob
 import re
 import hashlib
 
@@ -113,9 +115,9 @@ class PkgContents:
         """
         Add object to content
         """
-        filename = self._fixNameByPrefix(filename)
-        newfilename = pathJoin(self.prefix,filename)
         if filename != '/':
+            filename = self._fixNameByPrefix(filename)
+            newfilename = pathJoin(self.prefix,filename)
             self.addDir(path.dirname(filename))
             if path.islink(newfilename):
                 self.addLink(filename)
@@ -168,3 +170,21 @@ def getCfgFiles(protected_dirs=['/etc'],prefix='/'):
             mapCfg[origFilename] = []
         mapCfg[origFilename].append((int(filetime.split('.')[0]),filename))
     return mapCfg
+
+
+def fillContents(allContent,protected,prefix='/'):
+    """
+    Fill dict file - package
+    """
+    dbPath = pathJoin(prefix,'var/db/pkg')
+    for contentFile in glob.glob(dbPath+"/*/*/CONTENTS"):
+        for objFile in filter(lambda x:x.startswith('obj '),
+            readLinesFile(contentFile)):
+            res = PkgContents.reObj.search(objFile.strip())
+            if res:
+                fn = res.groupdict()['filename']
+                if filter(lambda x:fn.startswith(x),protected):
+                    pkg = reVerSplit.search(os.path.dirname(contentFile))
+                    if pkg:
+                        pkg = "%s/%s"%(pkg.groups()[:2])
+                        allContent[fn] = pkg
diff --git calculate/lib/utils/files.py calculate/lib/utils/files.py
index 24d4eab..938b44a 100644
--- calculate/lib/utils/files.py
+++ calculate/lib/utils/files.py
@@ -794,3 +794,18 @@ def tarLinks(rootpath,archpath,skip=[]):
         removeDirs)
     tar.close()
     return links
+
+def getch():
+    """
+    Get char from keyboard
+    """
+    import sys, tty, termios
+
+    fd = sys.stdin.fileno()
+    old_settings = termios.tcgetattr(fd)
+    try:
+        tty.setraw(sys.stdin.fileno())
+        ch = sys.stdin.read(1)
+    finally:
+        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
+    return ch
diff --git calculate/lib/utils/portage.py calculate/lib/utils/portage.py
index 215aea7..403aaf0 100644
--- calculate/lib/utils/portage.py
+++ calculate/lib/utils/portage.py
@@ -26,7 +26,7 @@ from common import getTupleVersion
 from calculate.lib.cl_lang import setLocalTranslate
 setLocalTranslate('cl_lib3',sys.modules[__name__])
 
-reVerSplit = re.compile(r"^(?:/var/db/pkg/)?(?:(\w+-\w+)/)?(.*?)-(([^-]+?)"
+reVerSplit = re.compile(r"^(?:.*/var/db/pkg/)?(?:(\w+-\w+)/)?(.*?)-(([^-]+?)"
                          "(?:-(r\d+))?)(?:.(tbz2))?$",re.S)
 def reVerSplitToPV(x):
     """Convert match from reVerSplit to PV hash"""
diff --git calculate/lib/variables/env.py calculate/lib/variables/env.py
index dd106ff..41cd4fe 100644
--- calculate/lib/variables/env.py
+++ calculate/lib/variables/env.py
@@ -128,6 +128,13 @@ class VariableClPassFile(Variable):
     Template file performed at now
     """
 
+class VariableClMergeSet(ReadonlyVariable):
+    """
+    Force by package template appling
+    """
+    type = "bool"
+    value = "off"
+
 class VariableClMergePkg(ReadonlyVariable):
     """
     This variable work with template function belong(package_name)
