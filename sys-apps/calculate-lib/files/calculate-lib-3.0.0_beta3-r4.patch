diff --git calculate/lib/cl_api.py calculate/lib/cl_api.py
index f395989..fce83dc 100644
--- calculate/lib/cl_api.py
+++ calculate/lib/cl_api.py
@@ -58,7 +58,7 @@ class _services(color_print, libVars):
                                 'serviceAPI')
         except (ImportError, AttributeError), e:
             self.printERROR(str(e).strip())
-            self.printERROR(_("Can not import module %s")% apiFile)
+            self.printERROR(_("Failed to import module %s")% apiFile)
             cl_overriding.exit(1)
         return className
 
@@ -77,7 +77,7 @@ class _services(color_print, libVars):
                 apiObject = className()
             except Exception, e:
                 self.printERROR(str(e).strip())
-                self.printERROR(_("Can not create API object"))
+                self.printERROR(_("Failed to create an API object"))
                 self.printERROR(_("Module %s")% apiFile)
                 cl_overriding.exit(1)
             self.apiObjs[pkgName] = apiObject
@@ -98,7 +98,7 @@ class _services(color_print, libVars):
             try:
                 apiObjects.append(className())
             except:
-                self.printERROR(_("Can not create API object"))
+                self.printERROR(_("Failed to create an API object"))
                 self.printERROR(_("Module %s")% apiFile)
                 cl_overriding.exit(1)
         return apiObjects
@@ -110,8 +110,8 @@ class _services(color_print, libVars):
             return ""
         if not hasattr(pkgObj, methodName) or\
             not callable(getattr(pkgObj, methodName)):
-            self.printERROR(_("Can not found method %(method)s in \
-API object service %(service)s") %{'method':methodName,
+            self.printERROR(_("Method %(method)s not found in object API of"
+                              " service %(service)s") %{'method':methodName,
                                    'service':pkgObj.getServiceName()})
             cl_overriding.exit(1)
         if argv:
@@ -198,7 +198,7 @@ class _pkgAPI(object):
                 try:
                     value = object.__getattribute__(self, attr)()
                 except:
-                    raise APIError(_("Can not found method %s")%attr)
+                    raise APIError(_("Method %s not found")%attr)
         return value
 
 class _allPkg(object):
diff --git calculate/lib/cl_opt.py calculate/lib/cl_opt.py
index 5fbc70d..73e8c5d 100644
--- calculate/lib/cl_opt.py
+++ calculate/lib/cl_opt.py
@@ -275,23 +275,23 @@ class opt(optparse.OptionParser):
         [{'longOption':"set",
          'optVal':"VAR=VALUE",
          'action':'append',
-         'help':_("set value for variable")
+         'help':_("set the variable value")
         }]
     variable_view = \
         [{'shortOption':"v",
          'longOption':"show-variables",
          'action':'count',
-         'help':_("print variables, if the two options is verbose "
-                  "(added print hidden variables)")
+         'help':_("print variables, in verbose mode if the two options "
+                  "are applied (includes printing hidden variables)")
         },
         {'longOption':"filter",
          'optVal':"FILTER",
-         'help':_("filtered variables by regular expression, \
-is used in conjunction with the options '-v --show-variables'")
+         'help':_("filter variables (as regexp, use *), to be used in"
+                  " conjunction with options '-v --show-variables'")
         },
         {'longOption':"xml",
-         'help':_("output variables in the format of XML, \
-is used in conjunction with the option '-v --show-variables'")
+         'help':_("output variables in XML format, to be used in"
+                  " conjunction with options '-v --show-variables'")
         }]
     variable_control = variable_set + variable_view
 
@@ -370,7 +370,8 @@ is used in conjunction with the option '-v --show-variables'")
         should either exit or raise an exception.
         """
         self.print_usage(sys.stderr)
-        self.exit(2, "%s: %s: %s\n%s\n" % (self.get_prog_name(), _("error"), msg,
+        self.exit(2, "%s: %s: %s\n%s\n" % (self.get_prog_name(),
+                                           _("error"), msg,
                 _("Try `%s' for more information")%
                 ("%s --help"%self.get_prog_name())))
 
diff --git calculate/lib/cl_template.py calculate/lib/cl_template.py
index 7af65d0..c7d72e5 100644
--- calculate/lib/cl_template.py
+++ calculate/lib/cl_template.py
@@ -328,14 +328,15 @@ class _terms(_error, _shareTermsFunction):
                             if self._notVersion(vals[1]):
                                 self.setError("'%s'"%rpl(term)+" "+\
                                               _("incorrect"))
-                                self.setError(_("Value is not version"))
+                                self.setError(
+                                    _("This value is not a version"))
                                 return False
                             # Проверка значения функции на версию
                             if self._notVersion(valVars):
                                 self.setError("'%s'"%rpl(term)+" "+\
                                               _("incorrect"))
                                 self.setError(\
-                                             _("Value function is not version"))
+                                    _("The function value is not a version"))
                                 return False
                             verFile, verVar = self._convertVers(vals[1],valVars)
                             res = dictRuleFunc[sepF](verVar,verFile)
@@ -570,7 +571,7 @@ class fileHeader(_terms):
                                         foundTerm = True
                                         errorMsg = _("Incorrect template") +\
                                                      ": "+ templateName +"\n"+\
-                                               _("header template not valid")+\
+                                               _("template header not valid")+\
                                                  ": "+ i
                                         if function:
                                             rezTerm = self._equalTerm(i,
@@ -600,7 +601,7 @@ class fileHeader(_terms):
                     self.typeAppend = typeAppend
                 else:
                     self.headerTerm = False
-                    self.setError(_("incorrect header parameters - '%s'")\
+                    self.setError(_("incorrect header parameter: '%s'")\
                                     %"append=%s"%self.params["append"])
         if 'exec' in self.params:
             self.execStr = "#!%s"%self.params['exec']
@@ -609,7 +610,7 @@ class fileHeader(_terms):
             incorrectParams = set(self.params.keys()) - set(self.allowParam)
         if incorrectParams:
             self.headerTerm = False
-            self.setError(_("incorrect header parameters - '%s'")\
+            self.setError(_("incorrect header parameter: '%s'")\
                           %" ".join(list(incorrectParams)))
 
     def _getType(self):
@@ -704,7 +705,7 @@ class dirHeader(_terms):
                     self.body = ""
                 if self.body.strip():
                     self.headerTerm = False
-                    self.setError(_("incorrect text in template: '%s'")\
+                    self.setError(_("incorrect text in the template: '%s'")\
                                     %self.body)
                     flagErrorBody = True
                 if not flagErrorBody:
@@ -717,7 +718,7 @@ class dirHeader(_terms):
                                     foundTerm = True
                                     errorMsg = _("Incorrect template") +\
                                         ": "+ templateName +"\n"+\
-                                        _("header template not valid")+ ": "+ i
+                                        _("template header not valid")+ ": "+ i
                                     if function:
                                         rezTerm = self._equalTerm(i, errorMsg,
                                                                   function)
@@ -741,14 +742,14 @@ class dirHeader(_terms):
                         self.typeAppend = typeAppend
                     else:
                         self.headerTerm = False
-                        self.setError(_("incorrect header parameters - '%s'")\
+                        self.setError(_("incorrect header parameter: '%s'")\
                                       %"append=%s"%self.params["append"])
         if not flagErrorBody:
             if not incorrectParams:
                 incorrectParams = set(self.params.keys()) - set(self.allowParam)
             if incorrectParams:
                 self.headerTerm = False
-                self.setError(_("incorrect header parameters - '%s'")\
+                self.setError(_("incorrect header parameter: '%s'")\
                               %" ".join(list(incorrectParams)))
 
     def _getAppend(self):
@@ -2106,7 +2107,8 @@ class _file(_error):
             try:
                 self.F_CONF.write(self.textConfig)
             except:
-                self.setError(_("not open file:" ) + self.nameFileConfig)
+                self.setError(_("unable to open the file:")
+                            + self.nameFileConfig)
                 return False
             self.F_CONF.flush()
             return True
@@ -2117,7 +2119,8 @@ class _file(_error):
         try:
             F_TEMPL = open(nameFileTemplate, "r")
         except:
-            self.setError(_("not open file:" ) + nameFileTemplate)
+            self.setError(_("unable to open the file:")
+                            + nameFileConfig)
             return False
         return F_TEMPL
 
@@ -2143,7 +2146,8 @@ class _file(_error):
             try:
                 F_CONF = open(nameFileConfig, "w+")
             except:
-                self.setError(_("not open file:" ) + nameFileConfig)
+                self.setError(_("unable to open the file:")
+                            + nameFileConfig)
                 return False
         return F_CONF
 
@@ -2401,13 +2405,13 @@ class _shareTemplate:
             gid = pwdObj.pw_gid
             homeDir = pwdObj.pw_dir
         except:
-            raise TemplatesError(_("Can not found user %s")%str(userName))
+            raise TemplatesError(_("User %s not found")%str(userName))
         if groupsInfo:
             import grp
             try:
                 groupName = grp.getgrgid(gid).gr_name
             except:
-                raise TemplatesError(_("Can not found group id %s")%str(gid))
+                raise TemplatesError(_("Group ID %s not found")%str(gid))
             groupsNames = map(lambda x: x.gr_name,\
                 filter(lambda x: userName in x.gr_mem,  grp.getgrall()))
             groupsNames = [groupName] + groupsNames
@@ -2553,21 +2557,24 @@ class templateFunction(_error, _shareTemplate, _shareTermsFunction):
                             num = int(localVars[strNum])
                         except:
                             self.raiseErrTemplate(
-                                _("error var %s not int")%str(strNum))
+                                _("error: variable %s is not integer")%
+                                    str(strNum))
                     elif self.objVar.exists(strNum):
                         try:
                             num = int(self.objVar.Get(strNum))
                         except:
                             self.raiseErrTemplate(
-                                _("error var %s not int")%str(strNum))
+                                _("error: variable %s is not integer")%
+                                    str(strNum))
                     else:
                         self.raiseErrTemplate(
-                                _("error local var %s not defined")%str(strNum))
+                                _("error: local variable %s not defined")%
+                                    str(strNum))
                     if minus:
                         num = -num
                 strNumers.append(num)
             return sum(strNumers)
-        self.raiseErrTemplate(_("error template term %s, incorrect data")\
+        self.raiseErrTemplate(_("error: template term %s, incorrect data")\
                                  %str(term))
 
     def multAndDiv(self, term, localVars):
@@ -2630,7 +2637,7 @@ class templateFunction(_error, _shareTemplate, _shareTermsFunction):
                 flagNotRootFS = False
             else:
                 self.raiseErrTemplate(
-                    _("Second argument function is not 'root'"))
+                    _("The second argument of the function is not 'root'"))
         if fileName[0] == "~":
             # Получаем директорию пользователя
             fileName = os.path.join(self.homeDir,
@@ -2669,12 +2676,12 @@ class templateFunction(_error, _shareTemplate, _shareTermsFunction):
                 flagNotRootFS = False
             else:
                 self.raiseErrTemplate(
-                    _("Third argument function is not 'root'"))
+                    _("The third argument of the function is not 'root'"))
         if lenTerms >= 2:
             if not terms[0] in ["ver","num","char","key","empty"]:
                 self.raiseErrTemplate(
-                    _("first argument function is not 'ver' or 'num' or 'char'"
-                      " or 'empty'"))
+                    _("the first argument of the function is neither 'ver'"
+                      " or 'num' or 'char' or 'empty'"))
         if lenTerms == 1:
             fileName = terms[0].strip()
         else:
@@ -2797,12 +2804,13 @@ class templateFunction(_error, _shareTemplate, _shareTermsFunction):
                       'uuid':string.ascii_lowercase[:6] + string.digits}
         if not terms[0] in fArgvNames:
             self.raiseErrTemplate(
-                _("first argument function must be 'num','pas' or 'uuid'"))
+                _("the first argument of the function must "
+                  "be 'num', 'pas' or 'uuid'"))
         try:
             lenStr = int(terms[1])
         except:
             self.raiseErrTemplate(
-                _("two argument function is not number"))
+                _("the second argument of the function is not a number"))
         choiceStr = fArgvNames[terms[0]]
         replace = ''.join([random.choice(choiceStr) for i in xrange(lenStr)])
         textTemplateTmp = textTemplateTmp[:resS.start()] + replace +\
@@ -2825,14 +2833,15 @@ class templateFunction(_error, _shareTemplate, _shareTermsFunction):
             self.raiseErrTemplate()
         fArgvNames = ['upper','lower','capitalize']
         if not terms[0] in fArgvNames:
-            self.raiseErrTemplate(_("first argument function is not 'upper' \
-or 'lower' or 'capitalize'"))
+            self.raiseErrTemplate(_("the first argument of the function"
+                                    " is neither 'upper' or 'lower' or"
+                                    " 'capitalize'"))
         try:
             strValue = str(self.objVar.Get(terms[1]))
         except:
             raise TemplatesError(
                 _("error in template %s")%self.nameTemplate + "\n" +
-                _("error var %s not found")%str(terms[1]))
+                _("error: variable %s not found")%str(terms[1]))
         replace = ""
         strValue = _toUNICODE(strValue)
         if terms[0] == 'upper':
@@ -2870,12 +2879,12 @@ or 'lower' or 'capitalize'"))
             if len(terms) == 1:
                 self.stackGlobalVars.append(str(value))
             else:
-                self.raiseErrTemplate(_("error var %s exists")\
+                self.raiseErrTemplate(_("error: variable %s exists")\
                                          %str(nameLocVar))
         else:
             # Если переменная не существует
             if len(terms) == 1:
-                self.raiseErrTemplate(_("error var %s not exists")\
+                self.raiseErrTemplate(_("error: variable %s does not exist")\
                                          %str(nameLocVar))
             elif len(terms) == 2:
                 value = terms[1].strip()
@@ -2902,7 +2911,7 @@ or 'lower' or 'capitalize'"))
                 localVars[nameLocVar] = self.stackGlobalVars.pop()
             else:
                 self.raiseErrTemplate(
-                    _("error, gloval variables stack is empty"))
+                    _("error: global variables stack empty"))
         else:
             self.raiseErrTemplate()
         replace = ""
@@ -3005,8 +3014,9 @@ or 'lower' or 'capitalize'"))
             self.currDictIni[nameLocVar] = valueLocVar
         elif len(terms) == 3:
             if not terms[2] in ['url','purl','unicode']:
-                self.raiseErrTemplate(_("third argument function is not "
-                                            "'url' or 'purl' or 'unicode'"))
+                self.raiseErrTemplate(
+                    _("the third argument of the function is neither "
+                      "'url' or 'purl' or 'unicode'"))
             if terms[1]:
                 self.raiseErrTemplate()
             if self.timeIni != curTime:
@@ -3222,11 +3232,11 @@ or 'lower' or 'capitalize'"))
                 pass
         if not flagFoundVar:
             # Если переменная не существует
-            self.raiseErrTemplate(_("error var %s not exists")\
+            self.raiseErrTemplate(_("error: variable %s does not exist")\
                                          %str(nameLocVar))
         if not type(value) in (list,tuple):
             # Значение переменной не список или кортеж
-            self.raiseErrTemplate(_("value of %s is not a list or tuple")\
+            self.raiseErrTemplate(_("value of %s is not a list or a tuple")\
                                          %str(nameLocVar))
         try:
             if len(value) > intIndex:
@@ -3234,7 +3244,7 @@ or 'lower' or 'capitalize'"))
             else:
                 replace = ""
         except:
-            self.raiseErrTemplate(_("%s wrong")%strIndex)
+            self.raiseErrTemplate(_("wrong %s")%strIndex)
         textTemplateTmp = textTemplateTmp[:resS.start()] + replace +\
                 textTemplateTmp[resS.end():]
         return textTemplateTmp
@@ -3242,7 +3252,8 @@ or 'lower' or 'capitalize'"))
     def funcDisk(self, funArgv, resS, localVars, textTemplateTmp):
         """Функция шаблона disk().
         Первый аргумент ищется в значении переменной os_disk_install
-        (значение os_install_disk_mount - список точек монтирования при установке)
+        (значение os_install_disk_mount - 
+        список точек монтирования при установке)
         второй аргумент используется для поиска в переменной
         os_disk_второй_аргумент (значение os_disk_второй_аргумент - список)
         В os_install_disk_mount ищется первый аргумент, находим его индекс
@@ -3256,13 +3267,14 @@ or 'lower' or 'capitalize'"))
         mountPoint = terms[0]
         lastElementVar = terms[1]
         if not mountPoint or mountPoint[:1] !="/":
-            self.raiseErrTemplate(_("%s wrong")%lastElementVar)
+            self.raiseErrTemplate(_("wrong %s")%lastElementVar)
         nameVar = "os_install_disk_mount"
         try:
             valueVar =  self.objVar.Get(nameVar)
         except:
             # Если переменная не существует
-            self.raiseErrTemplate(_("error var %s not exists")%nameVar)
+            self.raiseErrTemplate(
+                _("error: variable %s does not exist")%nameVar)
         nameElementVar = "os_install_disk_%s"%lastElementVar
         try:
             valueElementVar =  self.objVar.Get(nameElementVar)
@@ -3272,20 +3284,20 @@ or 'lower' or 'capitalize'"))
             try:
                 valueElementVar =  self.objVar.Get(nameElementVar)
             except:
-                self.raiseErrTemplate(_("%s wrong")%lastElementVar+"\n"+
-                                      _("error var %s not exists")\
+                self.raiseErrTemplate(_("wrong %s")%lastElementVar+"\n"+
+                                      _("error: variable %s does not exist")\
                                              %nameElementVar)
         if not type(valueVar) in (list,tuple):
             # Значение переменной не список или кортеж
-            self.raiseErrTemplate(_("value of %s is not a list or tuple")\
+            self.raiseErrTemplate(_("value of %s is not a list or a tuple")\
                                          %nameVar)
         if not type(valueElementVar) in (list,tuple):
             # Значение переменной не список или кортеж
-            self.raiseErrTemplate(_("value of %s is not a list or tuple")\
+            self.raiseErrTemplate(_("value of %s is not a list or a tuple")\
                                          %nameElementVar)
         if len(valueVar) != len(valueElementVar):
             self.raiseErrTemplate(
-                _("size %(name)s is not equal to the size of %(nameElement)s")\
+                _("%(name)s does not match %(nameElement)s in size")\
                   %{'name':nameVar, 'nameElement':nameElementVar})
         index = None
         for num, mPoint in enumerate(valueVar):
@@ -3298,8 +3310,9 @@ or 'lower' or 'capitalize'"))
                     index = num
                     break
         if index is None:
-            self.raiseErrTemplate(_("in the value of the variable \
-os_disk_install not found mount point '\' and '\%s'")%mountPoint)
+            self.raiseErrTemplate(_("mount point '/' or '/%s' not found "
+                 " in the value of variable os_disk_install")
+                 %mountPoint)
         replace = valueElementVar[index]
         textTemplateTmp = textTemplateTmp[:resS.start()] + replace +\
                 textTemplateTmp[resS.end():]
@@ -3347,7 +3360,7 @@ os_disk_install not found mount point '\' and '\%s'")%mountPoint)
             message = ""
         raise TemplatesError(
             _("error in template %s")%self.nameTemplate + "\n" + \
-            _("error template term '%s'")%str(self.functText) + \
+            _("error, template term '%s'")%str(self.functText) + \
             message)
 
     def applyFuncTemplate(self, textTemplate, nameTemplate):
@@ -3377,7 +3390,7 @@ os_disk_install not found mount point '\' and '\%s'")%mountPoint)
                     flagIniFunc = True
             else:
                 self.raiseErrTemplate(
-                    _("can not found template function '%s'")\
+                    _("function of templates '%s' not found")\
                     %str(self.functText))
         if flagIniFunc:
             # Очистка файла в случае его ошибочного чтения
@@ -3557,7 +3570,7 @@ re.M|re.S)
             try:
                 res = string.atoi(strOct, 8)
             except ValueError:
-                self.setError(_("Not valid oct value: ") + str(strOct))
+                self.setError(_("Invalid oct value: ") + str(strOct))
                 return False
             return res
         else:
@@ -3596,7 +3609,7 @@ re.M|re.S)
             try:
                 dUid,dGid = getModeFile(prevDir,"owner")
             except OSError:
-                self.setError(_("Not access dir: " ) + prevDir)
+                self.setError(_("No access to the directory: ") + prevDir)
                 return False
             if not mode is False:
                 dMode = mode
@@ -3614,7 +3627,8 @@ re.M|re.S)
                         os.mkdir(nameDir)
                     os.chown(nameDir, dUid, dGid)
                 except:
-                    self.setError(_("Can not create dir: " ) + nameDir)
+                    self.setError(_("Failed to create the directory: ")
+                       + nameDir)
                     return False
             try:
                 if dMode:
@@ -3625,7 +3639,8 @@ re.M|re.S)
                 os.chown(dirName, dUid, dGid)
                 createDirs.append(dirName)
             except:
-                self.setError(_("Can not create dir: " ) + dirName)
+                self.setError(_("Failed to create the directory: ")
+                   + dirName)
                 return False  
             return createDirs
 
@@ -3666,7 +3681,7 @@ re.M|re.S)
                 parent = ""
             term = resS.group("rTerm") + parent +\
                 resS.group("lTerm")
-            if self._equalTerm(term, _("content template not valid: ")+\
+            if self._equalTerm(term, _("invalid template content: ")+\
                                                 nameTemplate, function):
                 textTemplateTmp = textTemplateTmp.replace(mark, body+end)
             else:
@@ -3683,7 +3698,7 @@ re.M|re.S)
             if len(spFile)>1:
                 flagTrue = False
                 for term in spFile[1:]:
-                    if self._equalTerm(term, _("name template not valid: ")+\
+                    if self._equalTerm(term, _("invalid template name: ")+\
                                                 fileTemplate):
                         flagTrue = True
                         break
@@ -3694,7 +3709,7 @@ re.M|re.S)
             else:
                 return True
         else:
-            self.setError(_("name template not valid: ")+ str(fileTemplate))
+            self.setError(_("invalid template name: ")+ str(fileTemplate))
             return False
 
     def getTitle(self, comment, commentList, configPath=""):
@@ -3839,24 +3854,25 @@ re.M|re.S)
             setWARNING = lambda x: self.setWarning(x) and\
                                     self.printWarning and\
                                     printObj.printWARNING(x)
-            setWARNING(_("No conditions of checking a value of the \
-variable 'cl_name'"))
+            setWARNING(_("No conditions of checking the value of variable"
+                         " 'cl_name'"))
             skipDirTemplates = []
             for skipDir in skipDirs:
                 skipTempl = os.path.join(skipDir,self.templDirNameFile)
                 if os.path.isfile(skipTempl):
                     skipDirTemplates.append(skipTempl)
             if skipTemplates or skipDirTemplates:
-                setWARNING(_("Skip templates:"))
+                setWARNING(_("Skipped templates:"))
             for skipTemplate in skipTemplates + skipDirTemplates:
                 setWARNING(" "*6 + skipTemplate)
             if skipDirs:
-                setWARNING(_("Skip directories:"))
+                setWARNING(_("Skipped directories:"))
             for skipDir in skipDirs:
                 setWARNING(" "*6 + skipDir)
             setWARNING("")
-            setWARNING(_("Headers directory and template files first level "\
-                         "should include of the 'cl_name' variable."))
+            setWARNING(_("Headers of directory templates and headers of files"
+                         " on the first level should include the 'cl_name'"
+                         " variable."))
             setWARNING(_("Example:"))
             setWARNING("# Calculate cl_name==calculate-install")
         return skipDirs + skipTemplates
@@ -3883,7 +3899,7 @@ variable 'cl_name'"))
             return dictTemplates
 
         if not self.objVar.defined("cl_template_path"):
-            self.setError(_("not defined Var: ") + "cl_template_path")
+            self.setError(_("undefined variable: ") + "cl_template_path")
             return False
         dirsTemplates = self.objVar.Get("cl_template_path")
         # Созданные директории
@@ -4114,7 +4130,10 @@ variable 'cl_name'"))
             """Изменение владельца конфигурационной директории"""
             try:
                 os.chown(nameDirConfig, uid, gid)
-            except:
+            except Exception as e:
+                if hasattr(e,'errno') and e.errno == 13 and \
+                    "var/calculate/remote" in nameDirConfig:
+                    return True
                 import pwd, grp
                 try:
                     userName = pwd.getpwuid(uid).pw_name
@@ -4165,7 +4184,7 @@ variable 'cl_name'"))
             textTemplate = FD.read()
             FD.close()
         except:
-            self.setError(_("Error open template") + ": " +\
+            self.setError(_("Failed to open the template") + ": " +\
                                templateDirFile)
             return ("", False, [])
 
@@ -4196,7 +4215,7 @@ variable 'cl_name'"))
                 path = os.path.join(self.homeDir,
                                     path.partition("/")[2],"")[:-1]
             elif not path or path and path[0] != "/":
-                self.setError(_("False value 'path' in template") + ": " +\
+                self.setError(_("Wrong value 'path' in the template") + ": " +\
                                 templateDirFile)
                 return ("", False, [])
             else:
@@ -4206,7 +4225,7 @@ variable 'cl_name'"))
         if  "name" in  objHead.params:
             nameDir = objHead.params['name']
             if "/" in nameDir or nameDir == ".." or nameDir == ".":
-                self.setError(_("False value 'name' in template") + ": " +\
+                self.setError(_("Wrong value 'name' in the template") + ": " +\
                             templateDirFile)
                 return ("", False, [])
             # Новый путь к директории
@@ -4225,7 +4244,7 @@ variable 'cl_name'"))
                 try:
                     removeDir(applyDir)
                 except:
-                     self.setError(_("Can not delete dir: " ) +\
+                     self.setError(_("Failed to delete the directory: ") +\
                                    applyDir)
             return ("", False, [])
 
@@ -4239,13 +4258,15 @@ variable 'cl_name'"))
                         try:
                             removeDir(removePath)
                         except:
-                            self.setError(_("Can not delete dir: " ) +\
+                            self.setError(
+                                _("Failed to delete the directory: ") +\
                                           removePath)
                     else:
                         try:
                             os.unlink(removePath)
                         except:
-                            self.setError(_("Can not delete: " ) + removePath)
+                            self.setError(
+                                _("Failed to delete: ") + removePath)
             return ("", False, [])
 
         # Созданные директории
@@ -4263,7 +4284,7 @@ variable 'cl_name'"))
                 else:
                     os.chmod(applyDir, mode)
             else:
-                self.setError(_("False value 'chmod' in template") + ": " +\
+                self.setError(_("Wrong value 'chmod' in the template") + ": " +\
                                templateDirFile)
                 return ("", False, [])
         # chown - изменяем владельца и группу
@@ -4277,8 +4298,9 @@ variable 'cl_name'"))
                     try:
                         uid = pwd.getpwnam(strUid).pw_uid
                     except:
-                        self.setError(_("Not user in this system: ") + strUid)
-                        self.setError(_("False value 'chown' in template")+\
+                        self.setError(_("No such user on the system: ")
+                                + strUid)
+                        self.setError(_("Wrong value 'chown' in the template")+\
                         ": " + templateDirFile)
                         return ("", False, [])
                     gid = self.getGidFromGroup(strGid)
@@ -4286,8 +4308,10 @@ variable 'cl_name'"))
                         import grp
                         gid = grp.getgrnam(strGid).gr_gid
                     except:
-                        self.setError(_("Not group in this system: ")+strGid)
-                        self.setError(_("False value 'chown' in template") +\
+                        self.setError(_("Group not found on the system: ")
+                                        +strGid)
+                        self.setError(
+                            _("Wrong value 'chown' in the template") +\
                                       ": "+ templateDirFile)
                         return ("", False, [])
 
@@ -4302,12 +4326,12 @@ variable 'cl_name'"))
                                             templateDirFile):
                             return ("", False, [])
                 else:
-                    self.setError(_("False value 'chown' in template") + ": " +\
-                               templateDirFile)
+                    self.setError(_("Wrong value 'chown' in the template")
+                                + ": " + templateDirFile)
                     return ("", False, [])
             else:
-                self.setError(_("False value 'chown' in template") + ": " +\
-                               templateDirFile)
+                self.setError(_("Wrong value 'chown' in the template") +
+                        ": " + templateDirFile)
                 return ("", False, [])
         else:
             # Устанавливаем владельцем директории, пользователя по умолчанию
@@ -4378,7 +4402,10 @@ variable 'cl_name'"))
                     FD  = open(nameFileConfig, "w")
                     FD.close()
                 os.chown(nameFileConfig, uid, gid)
-            except:
+            except Exception as e:
+                if hasattr(e,'errno') and e.errno == 13 and \
+                    "var/calculate/remote" in nameFileConfig:
+                    return True
                 import pwd, grp
                 try:
                     userName = pwd.getpwuid(uid).pw_name
@@ -4405,7 +4432,10 @@ variable 'cl_name'"))
                     FD  = open(nameFileConfig, "w")
                     FD.close()
                 os.chmod(nameFileConfig, mode)
-            except:
+            except Exception as e:
+                if hasattr(e,'errno') and e.errno == 13 and \
+                    "var/calculate/remote" in nameFileConfig:
+                    return True
                 self.setError(_("Failed to apply template file %s")\
                                 %nameFileTemplate)
                 self.setError(\
@@ -4423,7 +4453,7 @@ variable 'cl_name'"))
             self.nameFileTemplate = os.path.abspath(nameFileTemplate)
             self.F_TEMPL = self.openTemplFile(self.nameFileTemplate)
             if not self.F_TEMPL:
-                self.setError(_("Error open template") + ": " +\
+                self.setError(_("Failed to open the template") + ": " +\
                                    templateDirFile)
                 return False
             self.textTemplate = self.F_TEMPL.read()
@@ -4443,7 +4473,7 @@ variable 'cl_name'"))
             mergePkgs = objHeadNew.params['merge'].split(',')
             reRight = re.compile(r'^(\w+-\w+/)?[\w-]+$')
             for wrongPkg in (x for x in mergePkgs if not reRight.match(x)):
-                self.setError(_("Wrong value '%s' for 'merge' in template")%
+                self.setError(_("Wrong value '%s' for 'merge' in the template")%
                               wrongPkg + ": " + nameFileTemplate)
                 return ([], False)
             for pkg in mergePkgs:
@@ -4460,7 +4490,7 @@ variable 'cl_name'"))
                 # Получаем путь с заменой ~ на директорию пользователя
                 path = os.path.join(self.homeDir,path.partition("/")[2],"")[:-1]
             elif not path or path and path[0] != "/":
-                self.setError(_("False value 'path' in template") + ": " +\
+                self.setError(_("Wrong value 'path' in the template") + ": " +\
                                   nameFileTemplate)
                 return ([], False)
             else:
@@ -4471,7 +4501,7 @@ variable 'cl_name'"))
         if objHeadNew.params.has_key("name"):
             nameFile = objHeadNew.params['name']
             if "/" in nameFile or nameFile == ".." or nameFile == ".":
-                self.setError(_("False value 'name' in template") + ": " +\
+                self.setError(_("Wrong value 'name' in the template") + ": " +\
                               nameFileTemplate)
                 return ([], False)
             # Новый путь к оригинальному файлу
@@ -4489,12 +4519,13 @@ variable 'cl_name'"))
         if "exec" in  objHeadNew.params:
             execPath = objHeadNew.params['exec']
             if not os.access(execPath,os.X_OK):
-                self.setError(_("False value 'exec' in template") + ": " +\
+                self.setError(_("Wrong value 'exec' in the template") + ": " +\
                                   nameFileTemplate)
-                self.setError(_("Can not execute %s") %execPath)
+                self.setError(_("Failed to execute %s") %execPath)
                 return ([], False)
             if typeAppendTemplate == "join":
-                self.setError(_("False value 'append=join' in template") + ": " +\
+                self.setError(_("Wrong value 'append=join' in the template") +
+                             ": " +\
                                   nameFileTemplate)
                 return ([], False)
         
@@ -4503,9 +4534,9 @@ variable 'cl_name'"))
             try:
                 open(pathOldFile, "w").truncate(0)
             except:
-                self.setError(_("Error in template") + ": " +\
+                self.setError(_("Template error") + ": " +\
                                   nameFileTemplate)
-                self.setError(_("Can not clear file") + ": " +\
+                self.setError(_("Failed to clear the file") + ": " +\
                                pathOldFile)
             return (applyFiles, False)
         # Удаляем оригинальный файл
@@ -4515,9 +4546,9 @@ variable 'cl_name'"))
                 try:
                     os.unlink(pathOldFile)
                 except:
-                    self.setError(_("Error in template") + ": " +\
+                    self.setError(_("Template error") + ": " +\
                                   nameFileTemplate)
-                    self.setError(_("Can not delete link") + ": " +\
+                    self.setError(_("Failed to delete the link") + ": " +\
                                pathOldFile)
                     return ([], False)
             if os.path.isfile(pathOldFile):
@@ -4525,9 +4556,9 @@ variable 'cl_name'"))
                 try:
                     os.remove(pathOldFile)
                 except:
-                    self.setError(_("Error in template") + ": " +\
+                    self.setError(_("Template error") + ": " +\
                                   nameFileTemplate)
-                    self.setError(_("Can not delete file") + ": " +\
+                    self.setError(_("Failed to delete the file") + ": " +\
                                pathOldFile)
                     return ([], False)
             return (applyFiles, False)
@@ -4546,9 +4577,9 @@ variable 'cl_name'"))
                 try:
                     os.unlink(pathOldFile)
                 except:
-                    self.setError(_("Error in template") + ": " +\
+                    self.setError(_("Template error") + ": " +\
                                   nameFileTemplate)
-                    self.setError(_("Can not delete link") + ": " +\
+                    self.setError(_("Failed to delete the link") + ": " +\
                                pathOldFile)
                     return ([], False)
             if os.path.isfile(pathOldFile):
@@ -4556,9 +4587,9 @@ variable 'cl_name'"))
                 try:
                     os.remove(pathOldFile)
                 except:
-                    self.setError(_("Error in template") + ": " +\
+                    self.setError(_("Template error") + ": " +\
                                   nameFileTemplate)
-                    self.setError(_("Can not delete file") + ": " +\
+                    self.setError(_("Failed to delete the file") + ": " +\
                                     pathOldFile)
                     return ([], False)
 
@@ -4574,9 +4605,9 @@ variable 'cl_name'"))
                         try:
                             os.remove(pathOldFile)
                         except:
-                            self.setError(_("Error in template") + ": " +\
+                            self.setError(_("Template error") + ": " +\
                                           nameFileTemplate)
-                            self.setError(_("Can not delete file") + ": " +\
+                            self.setError(_("Failed to delete the file") + ": " +\
                                           pathOldFile)
                     return ([], False)
             elif not os.path.exists(pathOldFile):
@@ -4594,18 +4625,18 @@ variable 'cl_name'"))
                     F_CONF.close()
                     fMode, fUid, fGid = getModeFile(templateFile)
                 except:
-                    self.setError(_("Error in template") + ": " +\
+                    self.setError(_("Template error") + ": " +\
                                   nameFileTemplate)
-                    self.setError(_("Can not open file") + ": " +\
+                    self.setError(_("Failed to open the file") + ": " +\
                                           templateFile)
                     return ([], False)
             if os.path.exists(pathOldFile):
                 try:
                     os.remove(pathOldFile)
                 except:
-                    self.setError(_("Error in template") + ": " +\
+                    self.setError(_("Template error") + ": " +\
                                     nameFileTemplate)
-                    self.setError(_("Can not delete file") + ": " +\
+                    self.setError(_("Failed to delete the file") + ": " +\
                                     pathOldFile)
                     return ([], False)
             if foundTemplateFile:
@@ -4614,9 +4645,9 @@ variable 'cl_name'"))
                     FD.write(buff)
                     FD.close()
                 except:
-                    self.setError(_("Error in template") + ": " +\
+                    self.setError(_("Template error") + ": " +\
                                   nameFileTemplate)
-                    self.setError(_("Can not create file") + " '%s'"\
+                    self.setError(_("Failed to create the file") + " '%s'"\
                                   %pathOldFile)
                     return ([], False)
                 oMode = getModeFile(pathOldFile, mode="mode")
@@ -4633,7 +4664,7 @@ variable 'cl_name'"))
             flagSymlink = True
             if not pathOldFile:
                 raise TemplatesError(
-                    _("Missed source link file name in template '%s'")
+                    _("Missed source link filename in template '%s'")
                         %str(nameFileTemplate))
             if not "/" == pathOldFile[0]:
                 pathLink = os.path.split(os.path.abspath(prevOldFile))[0]
@@ -4641,9 +4672,10 @@ variable 'cl_name'"))
                 try:
                     os.chdir(pathLink)
                 except:
-                    self.setError(_("Error in template") + ": " +\
+                    self.setError(_("Template error") + ": " +\
                                     nameFileTemplate)
-                    self.setError(_("Can not change the current directory to")+\
+                    self.setError(
+                        _("Failed to change the current directory to")+\
                                     " " + pathLink)
                     return ([], False)
 
@@ -4655,7 +4687,7 @@ variable 'cl_name'"))
                     preReturn(pathProg)
                     return ([], False)
             else:
-                self.setError(_("False value 'chmod' in template") + ": " +\
+                self.setError(_("Wrong value 'chmod' in the template") + ": " +\
                                nameFileTemplate)
                 preReturn(pathProg)
                 return ([], False)
@@ -4674,9 +4706,10 @@ variable 'cl_name'"))
                             if uid is None:
                                 uid = pwd.getpwnam(strUid).pw_uid
                         except:
-                            self.setError(_("Not user in this system: ") +
+                            self.setError(_("No such user on the system: ") +
                                           strUid)
-                            self.setError(_("False value 'chown' in template") +
+                            self.setError(
+                                _("Wrong value 'chown' in the template") +
                                           ": "+ nameFileTemplate)
                             preReturn(pathProg)
                             return ([], False)
@@ -4689,9 +4722,10 @@ variable 'cl_name'"))
                                 import grp
                                 gid = grp.getgrnam(strGid).gr_gid
                         except:
-                            self.setError(_("Not group in this system: ") +
+                            self.setError(_("Group not found on the system: ") +
                                           strGid)
-                            self.setError(_("False value 'chown' in template") +
+                            self.setError(
+                                _("Wrong value 'chown' in the template") +
                                           ": "+ nameFileTemplate)
                             preReturn(pathProg)
                             return ([], False)
@@ -4700,13 +4734,13 @@ variable 'cl_name'"))
                         preReturn(pathProg)
                         return ([], False)
                 else:
-                    self.setError(_("False value 'chown' in template") + ": " +\
-                               nameFileTemplate)
+                    self.setError(_("Wrong value 'chown' in the template") +
+                                  ": " + nameFileTemplate)
                     preReturn(pathProg)
                     return ([], False)
             else:
-                self.setError(_("False value 'chown' in template") + ": " +\
-                               nameFileTemplate)
+                self.setError(_("Wrong value 'chown' in the template") 
+                    + ": " + nameFileTemplate)
                 preReturn(pathProg)
                 return ([], False)
         if not flagSymlink:
@@ -4734,9 +4768,9 @@ variable 'cl_name'"))
                         # иначе удаляем файл
                         os.remove(prevOldFile)
                 except:
-                    self.setError(_("Error in template") + ": " +\
+                    self.setError(_("Template error") + ": " +\
                                     nameFileTemplate)
-                    self.setError(_("Can not delete file") + ": " +\
+                    self.setError(_("Failed to delete the file") + ": " +\
                                     prevOldFile)
                     preReturn(pathProg)
                     return ([], False)
@@ -4747,9 +4781,9 @@ variable 'cl_name'"))
             try:
                 os.symlink(pathOldFile, prevOldFile)
             except:
-                self.setError(_("Error in template") + ": " +\
+                self.setError(_("Template error") + ": " +\
                                     nameFileTemplate)
-                self.setError(_("Can not create symbolic link") + " :" +\
+                self.setError(_("Failed to create a symbolic link") + " :" +\
                                     "%s -> %s"%(prevOldFile, pathOldFile))
                 preReturn(pathProg)
                 return ([], False)
@@ -4896,14 +4930,15 @@ variable 'cl_name'"))
             if formatTemplate == "patch":
                 if typeAppendTemplate != "patch":
                     self.setError(\
-                        _("False option append=%(type)s in template %(file)s")\
+                        _("Wrong option append=%(type)s in template %(file)s")\
                           %{"type":typeAppendTemplate,"file":nameFileTemplate})
                     return False
                 # создаем объект формата шаблона
                 objTempl = self.getFormatObj(formatTemplate, self.textTemplate)
                 if not objTempl:
                     self.setError(\
-                        _("Incorrect header parmeter format=%s in template")\
+                        _("Incorrect header parameter format=%s "
+                          "in the template")\
                           %formatTemplate + " " + nameFileTemplate)
                     return False
                 if objHeadOld and objHeadOld.body:
@@ -4911,7 +4946,7 @@ variable 'cl_name'"))
                 # обработка конфигурационного файла
                 self.textTemplate = objTempl.processingFile(self.textConfig)
                 if objTempl.getError():
-                    self.setError(_("False template") + ": " +\
+                    self.setError(_("Wrong template") + ": " +\
                                     nameFileTemplate)
                     return False
                 if execStr:
@@ -4922,9 +4957,9 @@ variable 'cl_name'"))
                 if  'exec' in objHeadNew.params:
                     if not self.executeTemplate(self.nameFileConfig,
                                                 objHeadNew.params['exec']):
-                        self.setError(_("False template") + ": " +\
+                        self.setError(_("Wrong template") + ": " +\
                                       nameFileTemplate)
-                        self.setError(_("Can not execute") + ": " +\
+                        self.setError(_("Failed to execute") + ": " +\
                                       self.nameFileConfig)
                         return False
                     return False
@@ -4944,12 +4979,13 @@ variable 'cl_name'"))
                                                 self.textTemplate)
                 if not objTemplNew:
                     self.setError(\
-                        _("Incorrect header parmeter format=%s in template")\
+                        _("Incorrect header parameter format=%s "
+                          "in the template")\
                           %formatTemplate + " " + nameFileTemplate)
                     return False
                 if "xml_" in formatTemplate:
                     if objTemplNew.getError():
-                        self.setError(_("False template") + ": " +\
+                        self.setError(_("Wrong template") + ": " +\
                                       nameFileTemplate)
                         return False
                     # Имя файла внутри xml xfce конфигурационных файлов
@@ -4994,9 +5030,9 @@ variable 'cl_name'"))
                 if  'exec' in objHeadNew.params:
                     if not self.executeTemplate(self.nameFileConfig,
                                                 objHeadNew.params['exec']):
-                        self.setError(_("False template") + ": " +\
+                        self.setError(_("Wrong template") + ": " +\
                                       nameFileTemplate)
-                        self.setError(_("Can not execute") + ": " +\
+                        self.setError(_("Failed to execute") + ": " +\
                                       self.nameFileConfig)
                         return False
                     return False
@@ -5005,7 +5041,7 @@ variable 'cl_name'"))
             elif typeAppendTemplate == "before":
                 if "xml_" in formatTemplate:
                     self.setError(\
-                        _("False option append=before in template %s")\
+                        _("Wrong option append=before in template %s")\
                         %nameFileTemplate)
                     return False
                 if objHeadOld and objHeadOld.body:
@@ -5023,9 +5059,9 @@ variable 'cl_name'"))
                 if  'exec' in objHeadNew.params:
                     if not self.executeTemplate(self.nameFileConfig,
                                                 objHeadNew.params['exec']):
-                        self.setError(_("False template") + ": " +\
+                        self.setError(_("Wrong template") + ": " +\
                                       nameFileTemplate)
-                        self.setError(_("Can not execute") + ": " +\
+                        self.setError(_("Failed to execute") + ": " +\
                                       self.nameFileConfig)
                         return False
                     return False
@@ -5034,7 +5070,7 @@ variable 'cl_name'"))
             elif typeAppendTemplate == "after":
                 if "xml_" in formatTemplate:
                     self.setError(\
-                        _("False option append=after in template %s")\
+                        _("Wrong option append=after in template %s")\
                         %nameFileTemplate)
                     return False
                 if objHeadOld and objHeadOld.body:
@@ -5051,9 +5087,9 @@ variable 'cl_name'"))
                 if  'exec' in objHeadNew.params:
                     if not self.executeTemplate(self.nameFileConfig,
                                                 objHeadNew.params['exec']):
-                        self.setError(_("False template") + ": " +\
+                        self.setError(_("Wrong template") + ": " +\
                                       nameFileTemplate)
-                        self.setError(_("Can not execute") + ": " +\
+                        self.setError(_("Failed to execute") + ": " +\
                                       self.nameFileConfig)
                         return False
                     return False
@@ -5065,7 +5101,8 @@ variable 'cl_name'"))
                     self.textTemplate = objTxtCoder.encode(self.textTemplate)
                 if formatTemplate =="raw":
                     self.setError(\
-                        _("Incorrect header parmeter append=%s in template")\
+                        _("Incorrect header parameter append=%s "
+                          "in the template")\
                           %typeAppendTemplate + " " + nameFileTemplate)
                     return False
                 # создаем объект формата шаблона
@@ -5073,12 +5110,13 @@ variable 'cl_name'"))
                                                 self.textTemplate)
                 if not objTemplNew:
                     self.setError(\
-                        _("Incorrect header parmeter format=%s in template")\
+                        _("Incorrect header parameter format=%s in "
+                          "the template")\
                           %formatTemplate + " " + nameFileTemplate)
                     return False
                 if "xml_" in formatTemplate:
                     if objTemplNew.getError():
-                        self.setError(_("False template") + ": " +\
+                        self.setError(_("Wrong template") + ": " +\
                                         nameFileTemplate)
                         return False
                     nameRootNode=nameFileConfig.rpartition("/")[2].split(".")[0]
@@ -5113,7 +5151,7 @@ variable 'cl_name'"))
                     return False
                 if "xml_" in formatTemplate:
                     if objTemplOld.getError():
-                        self.setError(_("False template") + ": " +\
+                        self.setError(_("Wrong template") + ": " +\
                                         nameFileConfig)
                         return False
                     nameRootNode=nameFileConfig.rpartition("/")[2].split(".")[0]
@@ -5122,7 +5160,7 @@ variable 'cl_name'"))
                 objTemplOld.join(objTemplNew)
                 if "xml_" in formatTemplate:
                     if objTemplOld.getError():
-                        self.setError(_("False template") + ": " +\
+                        self.setError(_("Wrong template") + ": " +\
                                         nameFileTemplate)
                         return False
                     data = objTemplOld.getConfig().encode("UTF-8").split("\n")
@@ -5143,19 +5181,19 @@ variable 'cl_name'"))
                 if  'exec' in objHeadNew.params:
                     if not self.executeTemplate(self.nameFileConfig,
                                                 objHeadNew.params['exec']):
-                        self.setError(_("False template") + ": " +\
+                        self.setError(_("Wrong template") + ": " +\
                                       nameFileTemplate)
-                        self.setError(_("Can not execute") + ": " +\
+                        self.setError(_("Failed to execute") + ": " +\
                                       self.nameFileConfig)
                         return False
                     return False
                 return filesApply
             else:
-                self.setError(_("False (type append) template") + ": " +\
+                self.setError(_("Wrong (type append) template") + ": " +\
                                typeAppendTemplate)
                 return False
         else:
-            self.setError(_("Type template not found: ") + nameFileTemplate)
+            self.setError(_("Template type not found: ") + nameFileTemplate)
             return False
         return filesApply
 
@@ -5291,7 +5329,7 @@ class templateClt(scanDirectoryClt, Template):
         if not self.flagApplyTemplates:
             return ([],[])
         if not self.objVar.defined("cl_template_clt_path"):
-            self.setError(_("not defined Var: ") + "cl_template_clt_path")
+            self.setError(_("undefined variable: ") + "cl_template_clt_path")
             return False
         dirsTemplates = self.objVar.Get("cl_template_clt_path")
         dirsTemplates.sort()
@@ -5364,7 +5402,8 @@ class iniParser(_error, templateFormat):
 
     def writeIniFile(self, txtConfig):
         if self.readOnly:
-            self.setError(_("Unable to write into file") + ": " + self.iniFile)
+            self.setError(_("Failed to write to the file")
+                    + ": " + self.iniFile)
             return False
         if not os.path.exists(self.iniFile):
             try:
@@ -5373,10 +5412,12 @@ class iniParser(_error, templateFormat):
                 fcntl.flock(self.FD.fileno(), fcntl.LOCK_EX)
                 os.chmod(self.iniFile, self.mode)
             except:
-                self.setError(_("Unable to create file") + ": " + self.iniFile)
+                self.setError(_("Failed to create the file") +
+                            ": " + self.iniFile)
                 return False
         if not self.FD:
-            self.setError(_("Unable to write into file") + ": " + self.iniFile)
+            self.setError(_("Failed to write to the file")
+                    + ": " + self.iniFile)
             return False
         self.FD.truncate(0)
         self.FD.seek(0)
@@ -5401,8 +5442,8 @@ class iniParser(_error, templateFormat):
             classObj = self.getClassObj("plasma")
         else:
             if nameFomat == "plasma":
-                self.setError(_("In the file %s (format - 'plasma'), "\
-                                "write the variable in the format 'samba'")\
+                self.setError(_("Trying to write a variable of 'samba' "
+                                "format to file %s (format - 'plasma')")\
                                 %self.iniFile)
                 return False
             # формат samba
@@ -5453,7 +5494,7 @@ class iniParser(_error, templateFormat):
                 try:
                     objIni = self.getClassObj("plasma")(textIni)
                 except:
-                    self.setError(_("Incorrect format file") + ": " + \
+                    self.setError(_("Incorrect file format") + ": " + \
                                     self.iniFile)
                     self.checkIni = False
                     return self.checkIni
@@ -5506,8 +5547,8 @@ class iniParser(_error, templateFormat):
             formatPlasma = True
         else:
             if nameFomat == "plasma":
-                self.setError(_("In the file %s (format - 'plasma'), "\
-                                "get the variable in the format 'samba'")\
+                self.setError(_("Trying to fetch a variable of 'samba' "
+                                "format from file %s (format - 'plasma')")\
                                 %self.iniFile)
                 return False
             # формат samba
@@ -5573,8 +5614,8 @@ class iniParser(_error, templateFormat):
             formatPlasma = True
         else:
             if nameFomat == "plasma":
-                self.setError(_("In the file %s (format - 'plasma'), "\
-                                "get all variables in the format 'samba'")\
+                self.setError(_("Trying to fetch a variable of 'samba' "
+                                "format from file %s (format - 'plasma')")\
                                 %self.iniFile)
                 return False
             # формат samba
diff --git calculate/lib/datavars.py calculate/lib/datavars.py
index a1d55ce..4300699 100644
--- calculate/lib/datavars.py
+++ calculate/lib/datavars.py
@@ -695,7 +695,7 @@ class DataVars:
             varModule = importlib.import_module(data)
         except (ImportError,AttributeError),e:
             raise DataVarsError("\n".join([
-                _("Error in import module %s")%data,
+                _("Failed to import module %s")%data,
                 _("error")  + ": " +str(e)]))
         # get all Variable classes from module
         # variable of class VariableClAction will be named cl_action
@@ -844,7 +844,8 @@ class DataVars:
                             if raiseOnError:
                                 raise
                             else:
-                                sys.stdout.write(_("Error on read ini file: "))
+                                sys.stdout.write(
+                                    _("Error reading the ini file: "))
                                 sys.stdout.write(str(e)+"\n")
                                 sys.stdout.flush()
         return res
@@ -1028,7 +1029,7 @@ class DataVars:
             return True
         else:
             raise DataVarsError(_("Unable to find alias '%s' of the path"
-                  "for storage of template variables")%location)
+                  " for storage of template variables")%location)
         return False
 
     def Delete(self, varname, location='default', header=False):
@@ -1061,7 +1062,7 @@ class DataVars:
             return True
         else:
             raise DataVarsError(_("Unable to find alias '%s' of the path"
-                  "for storage of template variables")%location)
+                  " for storage of template variables")%location)
         return False
 
     def Select(self,selField,where="os_disk_dev",eq=None,ne=None,
diff --git calculate/lib/encrypt.py calculate/lib/encrypt.py
index 3f2a8cb..bc4313e 100644
--- calculate/lib/encrypt.py
+++ calculate/lib/encrypt.py
@@ -30,7 +30,7 @@ except ImportError:
 from cl_print import color_print
 # для создания сертификата
 import pwd
-from server.utils import execProg
+#from server.utils import execProg
 import cl_overriding
 from utils.common import genpassword
 from utils.files import removeDir
@@ -61,7 +61,7 @@ class encrypt(color_print):
         """
         if not password:
             self.printERROR(_("ERROR") + " getHashPasswd: " +
-                            _("password empty"))
+                            _("empty password"))
             return False
 
         hashPwd = ""
@@ -111,11 +111,11 @@ class encrypt(color_print):
         else:
             if SecHashAlg in ("lm","nt"):
                 self.printERROR(_("ERROR") + " getHashPasswd: " +
-                            (_("Can not support '%s' crypto algorithm")
+                            (_("Failed to support '%s' crypto algorithm")
                             %SecHashAlg) + " " +  _("without py-smbpasswd"))
             else:
                 self.printERROR(_("ERROR") + " getHashPasswd: " +
-                            _("Can not support '%s' crypto algorithm")
+                            _("Failed to support '%s' crypto algorithm")
                             %SecHashAlg)
             return False
         return hashPwd
@@ -255,7 +255,7 @@ nsCertType         = %(nsCertType)s
     def createCnfFile(self, textCnf):
         '''Generate openssl.cnf file'''
         if not os.path.exists(self.sslFile):
-            self.printERROR(_("Can not found %s")%self.sslFile)
+            self.printERROR(_("%s not found")%self.sslFile)
             return False
         strData = time.strftime("%Y%m%d%H%M%S",time.localtime(time.time()))
         cnfFileName = "%s.%s.cnf" %(strData,genpassword())
@@ -307,7 +307,7 @@ nsCertType         = %(nsCertType)s
         try:
             pwdObj = pwd.getpwnam(userName)
         except:
-            self.printERROR(_("Not found user %s")%userName)
+            self.printERROR(_("User %s not found")%userName)
             return False
         uid = pwdObj.pw_uid
         gid = pwdObj.pw_gid
@@ -353,7 +353,7 @@ nsCertType         = %(nsCertType)s
                                        'certKeyFile':CAKeyFile,
                                        'sslBits':sslBits}
         if execProg(execStr) is False:
-            self.printERROR(_("Can not execute '%s'")%execStr)
+            self.printERROR(_("Failed to execute '%s'")%execStr)
             return False
         if os.path.exists(CAKeyFile):
             os.chown(CAKeyFile, uid,gid)
@@ -365,7 +365,7 @@ nsCertType         = %(nsCertType)s
                                         'certKeyFile':CAKeyFile,
                                         'certFile':CACertFile}
         if execProg(execStr) is False:
-            self.printERROR(_("Can not execute '%s'")%execStr)
+            self.printERROR(_("Failed to execute '%s'")%execStr)
             return False
         if os.path.exists(CACertFile):
             os.chown(CACertFile, uid,gid)
@@ -409,7 +409,7 @@ nsCertType         = %(nsCertType)s
         try:
             pwdObj = pwd.getpwnam(userName)
         except:
-            self.printERROR(_("Not found user %s")%userName)
+            self.printERROR(_("User %s not found")%userName)
             return False
         uid = pwdObj.pw_uid
         gid = pwdObj.pw_gid
@@ -448,7 +448,7 @@ nsCertType         = %(nsCertType)s
                                        'certKeyFile':keyFile,
                                        'sslBits':sslBits}
         if execProg(execStr) is False:
-            self.printERROR(_("Can not execute '%s'")%execStr)
+            self.printERROR(_("Failed to execute '%s'")%execStr)
             return False
         if os.path.exists(keyFile):
             os.chown(keyFile, uid,gid)
@@ -460,7 +460,7 @@ nsCertType         = %(nsCertType)s
                                        'certKeyFile':keyFile,
                                        'certCsrFile':csrFile}
         if execProg(execStr) is False:
-            self.printERROR(_("Can not execute '%s'")%execStr)
+            self.printERROR(_("Failed to execute '%s'")%execStr)
             return False
         if os.path.exists(csrFile):
             os.chown(csrFile, uid,gid)
@@ -475,7 +475,7 @@ nsCertType         = %(nsCertType)s
                                             'certFile':certFile,
                                             'certCsrFile':csrFile}
         if execProg(execStr) is False:
-            self.printERROR(_("Can not execute '%s'")%execStr)
+            self.printERROR(_("Failed to execute '%s'")%execStr)
             return False
         if os.path.exists(certFile):
             os.chown(certFile, uid,gid)
@@ -485,73 +485,73 @@ nsCertType         = %(nsCertType)s
         # check certificate
         return self.checkCertificate(certFile)
 
-    def createCertificate(self, 
-                          sslCountry=sslCountry,
-                          sslState=sslCountry,
-                          sslLocality=sslLocality,
-                          sslOrganization=sslOrganization,
-                          sslUnit=sslUnit,
-                          sslCommonName=sslCommonName,
-                          sslEmail=sslEmail,
-                          nsCertType=nsCertType,
-                          sslDays=sslDays,
-                          sslBits=sslBits,
-                          userName=userName,
-                          certFile=certFile,
-                          fileMode=fileMode,
-                          keyFile=keyFile):
-        """Создает сертификат"""
-        certAndKeyFiles = [certFile, keyFile]
-        foundCertFiles = filter(lambda x: os.path.exists(x), certAndKeyFiles)
-        if len(foundCertFiles)==2:
-            return True
-        # Удаляем файл сертификата
-        map(lambda x: os.remove(x), foundCertFiles)
-        # получаем id и gid пользователя
-        try:
-            pwdObj = pwd.getpwnam(userName)
-        except:
-            self.printERROR(_("Not found user %s")%userName)
-            return False
-        uid = pwdObj.pw_uid
-        gid = pwdObj.pw_gid
-        textCnf=self.templCnfData%{'sslBits':sslBits,
-                                   'sslCountry':sslCountry,
-                                   'sslState':sslState,
-                                   'sslLocality':sslLocality,
-                                   'sslOrganization':sslOrganization,
-                                   'sslUnit':sslUnit,
-                                   'sslCommonName':sslCommonName,
-                                   'sslEmail':sslEmail,
-                                   'nsCertType':nsCertType}
-        cnfFile = self.createCnfFile(textCnf)
-        if cnfFile is False:
-            return False
-        # Cоздание директорий
-        for fileName in certAndKeyFiles:
-            dirName = os.path.split(fileName)[0]
-            if not os.path.exists(dirName):
-                self._createDir(dirName, uid=uid, gid=gid)
-        # Создание сертификата
-        textLine = execProg("%s req -new -x509 -nodes -config '%s'"
-                            "-days %s -out '%s'-keyout '%s'"
-                            %(self.sslFile, cnfFile, sslDays, certFile,
-                              keyFile))
-        if textLine is False:
-            self.printERROR(_("Can not create certificate %s")%certFile)
-            return False
-        # Удаление конфигурационного файла
-        if os.path.exists(cnfFile):
-            os.remove(cnfFile)
-        # Меняем права
-        if os.path.exists(certFile):
-            os.chown(certFile, uid,gid)
-            os.chmod(certFile, fileMode)
-        if os.path.exists(keyFile):
-            os.chown(keyFile, uid,gid)
-            os.chmod(keyFile, fileMode)
-        
-        return self.checkCertificate(certFile)
+#    def createCertificate(self, 
+#                          sslCountry=sslCountry,
+#                          sslState=sslCountry,
+#                          sslLocality=sslLocality,
+#                          sslOrganization=sslOrganization,
+#                          sslUnit=sslUnit,
+#                          sslCommonName=sslCommonName,
+#                          sslEmail=sslEmail,
+#                          nsCertType=nsCertType,
+#                          sslDays=sslDays,
+#                          sslBits=sslBits,
+#                          userName=userName,
+#                          certFile=certFile,
+#                          fileMode=fileMode,
+#                          keyFile=keyFile):
+#        """Создает сертификат"""
+#        certAndKeyFiles = [certFile, keyFile]
+#        foundCertFiles = filter(lambda x: os.path.exists(x), certAndKeyFiles)
+#        if len(foundCertFiles)==2:
+#            return True
+#        # Удаляем файл сертификата
+#        map(lambda x: os.remove(x), foundCertFiles)
+#        # получаем id и gid пользователя
+#        try:
+#            pwdObj = pwd.getpwnam(userName)
+#        except:
+#            self.printERROR(_("Not found user %s")%userName)
+#            return False
+#        uid = pwdObj.pw_uid
+#        gid = pwdObj.pw_gid
+#        textCnf=self.templCnfData%{'sslBits':sslBits,
+#                                   'sslCountry':sslCountry,
+#                                   'sslState':sslState,
+#                                   'sslLocality':sslLocality,
+#                                   'sslOrganization':sslOrganization,
+#                                   'sslUnit':sslUnit,
+#                                   'sslCommonName':sslCommonName,
+#                                   'sslEmail':sslEmail,
+#                                   'nsCertType':nsCertType}
+#        cnfFile = self.createCnfFile(textCnf)
+#        if cnfFile is False:
+#            return False
+#        # Cоздание директорий
+#        for fileName in certAndKeyFiles:
+#            dirName = os.path.split(fileName)[0]
+#            if not os.path.exists(dirName):
+#                self._createDir(dirName, uid=uid, gid=gid)
+#        # Создание сертификата
+#        textLine = execProg("%s req -new -x509 -nodes -config '%s'"
+#                            "-days %s -out '%s'-keyout '%s'"
+#                            %(self.sslFile, cnfFile, sslDays, certFile,
+#                              keyFile))
+#        if textLine is False:
+#            self.printERROR(_("Can not create certificate %s")%certFile)
+#            return False
+#        # Удаление конфигурационного файла
+#        if os.path.exists(cnfFile):
+#            os.remove(cnfFile)
+#        # Меняем права
+#        if os.path.exists(certFile):
+#            os.chown(certFile, uid,gid)
+#            os.chmod(certFile, fileMode)
+#        if os.path.exists(keyFile):
+#            os.chown(keyFile, uid,gid)
+#            os.chmod(keyFile, fileMode)
+#        
+#        return self.checkCertificate(certFile)
 
     def _createDir(self, dirName, uid=0, gid=0, mode=0700):
         """Создание пользовательской директории"""
@@ -572,7 +572,7 @@ nsCertType         = %(nsCertType)s
         """
         dirName = os.path.split(fileName)[0]
         if not os.path.exists(dirName):
-            self.printERROR(_("Path %s not exists") %dirName)
+            self.printERROR(_("Path %s does not exist") %dirName)
             return False
         fd = os.open(fileName, os.O_CREAT)
         os.close(fd)
diff --git calculate/lib/format/patch.py calculate/lib/format/patch.py
index d1a86c6..3d63b1e 100644
--- calculate/lib/format/patch.py
+++ calculate/lib/format/patch.py
@@ -54,7 +54,7 @@ class patch(_error):
     def processingFile(self, textConfigFile):
         """Обработка конфигурационного файла"""
         if not self.doc:
-            self.setError(_("Can not convert text template in XML"))
+            self.setError(_("Cannot convert the text template in XML"))
             return False
         retTextConfigFile = textConfigFile
         tags = ["reg", "text"]
@@ -63,7 +63,7 @@ class patch(_error):
         for node in  self.rootNode.childNodes:
             if node.nodeType==node.ELEMENT_NODE:
                 if not node.tagName == tags[tagsIndex]:
-                    self.setError(_("Incorrect text template"))
+                    self.setError(_("Incorrect template text"))
                     return False
                 if tagsIndex == 1:
                     tagsIndex = 0
@@ -76,23 +76,23 @@ class patch(_error):
                         if reText is None:
                             textNode = node.toxml().encode("UTF8")
                             self.setError(\
-                            _("Incorrect text template")+ ": \n" +\
+                            _("Incorrect template text")+ ": \n" +\
                               "%s" %textNode)
                             return False
                     else:
                         self.setError(\
-                            _("Incorrect text template '<reg></reg>'"))
+                            _("Incorrect text of template '<reg></reg>'"))
                         return False
                     if not reText.strip():
                         self.setError(\
-                            _("Incorrect text template '<reg>%s</reg>'")\
+                            _("Incorrect text of template '<reg>%s</reg>'")\
                                %reText)
                         return False
                     try:
                         regex = re.compile(reText)
                     except:
                         self.setError(\
-                            _("Incorrect text template '<reg>%s</reg>'")\
+                            _("Incorrect text of template '<reg>%s</reg>'")\
                               %reText)
                         return False
                 elif node.tagName == "text" and regex:
@@ -101,7 +101,7 @@ class patch(_error):
                         if text is None:
                             textNode = node.toxml().encode("UTF8")
                             self.setError(\
-                            _("Incorrect text template")+ ": \n" +\
+                            _("Incorrect template text")+ ": \n" +\
                               "%s" %textNode)
                             return False
                     else:
diff --git calculate/lib/format/xml_gconf.py calculate/lib/format/xml_gconf.py
index 3f2f0eb..c0b9218 100644
--- calculate/lib/format/xml_gconf.py
+++ calculate/lib/format/xml_gconf.py
@@ -70,7 +70,7 @@ class xml_gconf(xml_xfce):
         try:
             self.doc = xml.dom.minidom.parseString(self.text)
         except:
-            self.setError(_("Template text is not XML"))
+            self.setError(_("The template content is not XML"))
             return False
         self.rootNode = self.doc.documentElement
         self.bodyNode = self.rootNode
@@ -119,7 +119,8 @@ class xml_gconf(xml_xfce):
 (found '<gconf><%(tag)s>..</%(tag)s></gconf>'")%{'tag':tagName})
                     return False
                 if not n.hasAttribute("name"):
-                    self.setError(_('Not found arrtibute "name" in tag entry'))
+                    self.setError(
+                        _("Arrtibute \"name\" not found in the tag entry"))
                     return False
                 flagType = n.hasAttribute("type")
                 flagValue = False
@@ -127,7 +128,8 @@ class xml_gconf(xml_xfce):
                 if flagSchema:
                     nSchema = n.getAttribute("schema")
                 if not flagType and not flagSchema:
-                    self.setError(_('Not found arrtibute "type" in tag entry'))
+                    self.setError(
+                        _("Arrtibute \"type\" not found in the tag entry"))
                     return False
                 nName = n.getAttribute("name")
                 attrName = u"attribute::name='%s'"%nName
@@ -137,7 +139,7 @@ class xml_gconf(xml_xfce):
                     # Проверка правильности аттрибута type
                     if not nType in self.supportEntryTypes:
                         self.setError(\
-                        _('Incorrect arrtibute "type" - <entry type="%s"/>')\
+                        _('Incorrect attribute "type" - <entry type="%s"/>')\
                           %nType)
                         return False
                     if flagValue:
@@ -145,10 +147,11 @@ class xml_gconf(xml_xfce):
             if n.hasAttribute("action"):
                 nAction = n.getAttribute("action")
                 if not nAction in ("join","replace","drop"):
-                    textError = _('''In the text, XML template, look \
-for a reserved attribute 'action' with the incorrect value.\n\
-Valid values attribute 'action': \
-(action="join", action="replace", action="drop")''')
+                    textError = _("In the text of the XML template, "
+                      "reserved attribute 'action' comes with an "
+                      "incorrect value.\n"
+                      "Valid values of the 'action' attribute are: "
+                      '(action="join", action="replace", action="drop")')
                     self.setError(textError)
                     return False
             if xmlOldNode.parentNode:
@@ -179,13 +182,15 @@ Valid values attribute 'action': \
                     flagJoin = False
                     flagDrop = True
                     if flagRootNode:
-                        textError = _('Incorrect action="drop" in root node')
+                        textError = \
+                            _('Incorrect action="drop" in the root node')
                         self.setError(textError)
                         return False
                 if oldNodes:
                     if len(oldNodes)>1:
-                        textError = _("The uncertainty in this template are \
-the same nodes at one level")
+                        textError = \
+                            _("Ambiguity in this template: the same "
+                              "nodes are on a same level")
                         self.setError(textError)
                         return False
                     nextOldNode = oldNodes[0]
@@ -265,7 +270,7 @@ the same nodes at one level")
             try:
                 self.joinDoc(xml_gconfObj.doc)
             except:
-                self.setError(_("Can not join template"))
+                self.setError(_("Failed to join the template"))
                 return False
         return True
 
diff --git calculate/lib/format/xml_gconf_tree.py calculate/lib/format/xml_gconf_tree.py
index da9b75a..4fc3e57 100644
--- calculate/lib/format/xml_gconf_tree.py
+++ calculate/lib/format/xml_gconf_tree.py
@@ -54,7 +54,7 @@ class xml_gconf_tree(xml_gconf):
                     return False
                 if not n.hasAttribute("name"):
                     self.setError(\
-                        _('Not found arrtibute "name" in %(tag)s')\
+                        _('Not found attribute "name" in %(tag)s')\
                         %{'tag':tagNameStr})
                     return False
                 nName = n.getAttribute("name")
@@ -62,10 +62,11 @@ class xml_gconf_tree(xml_gconf):
             if n.hasAttribute("action"):
                 nAction = n.getAttribute("action")
                 if not nAction in ("join","replace","drop"):
-                    textError = _('''In the text, XML template, look \
-for a reserved attribute 'action' with the incorrect value.\n\
-Valid values attribute 'action': \
-(action="join", action="replace", action="drop")''')
+                    textError = _("In the text of the XML template, "
+                      "reserved attribute 'action' comes with an "
+                      "incorrect value.\n"
+                      "Valid values of the 'action' attribute are: "
+                      '(action="join", action="replace", action="drop")')
                     self.setError(textError)
                     return False
             if xmlOldNode.parentNode:
@@ -91,13 +92,14 @@ Valid values attribute 'action': \
                     flagDrop = True
                     flagJoin = False
                     if flagRootNode:
-                        textError = _('Incorrect action="drop" in root node')
+                        textError = \
+                            _('Incorrect action="drop" in the root node')
                         self.setError(textError)
                         return False
                 if oldNodes:
                     if len(oldNodes)>1:
-                        textError = _("The uncertainty in this template are \
-the same nodes at one level")
+                        textError = _("Ambiguity in this template: the "
+                                      "same nodes are on a same level")
                         self.setError(textError)
                         return False
                     nextOldNode = oldNodes[0]
@@ -183,6 +185,6 @@ the same nodes at one level")
             try:
                 self.joinDoc(xml_gconfObj.doc)
             except:
-                self.setError(_("Can not join template"))
+                self.setError(_("Failed to join the template"))
                 return False
         return True
diff --git calculate/lib/format/xml_xfce.py calculate/lib/format/xml_xfce.py
index c01ccc5..219890c 100644
--- calculate/lib/format/xml_xfce.py
+++ calculate/lib/format/xml_xfce.py
@@ -69,7 +69,7 @@ class xml_xfce(_error):
         try:
             self.doc = xml.dom.minidom.parseString(self.text)
         except:
-            self.setError(_("Template text is not XML"))
+            self.setError(_("The template content is not XML"))
             return False
         self.rootNode = self.doc.documentElement
         self.bodyNode = self.rootNode
@@ -81,7 +81,7 @@ class xml_xfce(_error):
             try:
                 self.joinDoc(xml_xfceObj.doc)
             except:
-                self.setError(_("Can not join template"))
+                self.setError(_("Failed to join the template"))
             return False
         return True
 
@@ -96,10 +96,11 @@ class xml_xfce(_error):
             if xmlNode.hasAttribute("action"):
                 nAction = xmlNode.getAttribute("action")
                 if not nAction in ("join","replace","drop"):
-                    textError = _('''In the text, XML template, look \
-for a reserved attribute 'action' with the incorrect value.\n\
-Valid values attribute 'action': \
-(action="join", action="replace", action="drop")''')
+                    textError = _("In the text of the XML template, "
+                      "reserved attribute 'action' comes with an "
+                      "incorrect value.\n"
+                      "Valid values of the 'action' attribute are: "
+                      '(action="join", action="replace", action="drop")')
                     self.setError(textError)
                     return False
                 xmlNode.removeAttribute("action")
@@ -148,10 +149,11 @@ Valid values attribute 'action': \
             if n.hasAttribute("action"):
                 nAction = n.getAttribute("action")
                 if not nAction in ("join","replace","drop"):
-                    textError = _('''In the text, XML template, look \
-for a reserved attribute 'action' with the incorrect value.\n\
-Valid values attribute 'action': \
-(action="join", action="replace", action="drop")''')
+                    textError = _("In the text of the XML template, "
+                      "reserved attribute 'action' comes with an "
+                      "incorrect value.\n"
+                      "Valid values of the 'action' attribute are: "
+                      '(action="join", action="replace", action="drop")')
                     self.setError(textError)
                     return False
             if xmlOldNode.parentNode:
@@ -182,13 +184,14 @@ Valid values attribute 'action': \
                     flagJoin = False
                     flagDrop = True
                     if flagRootNode:
-                        textError = _('Incorrect action="drop" in root node')
+                        textError = \
+                            _('Incorrect action="drop" in the root node')
                         self.setError(textError)
                         return False
                 if oldNodes:
                     if len(oldNodes)>1:
-                        textError = _("The uncertainty in this template are \
-the same nodes at one level")
+                        textError = _("Ambiguity in this template: "
+                                 "the same nodes are on a same level")
                         self.setError(textError)
                         return False
                     nextOldNode = oldNodes[0]
diff --git calculate/lib/format/xml_xfcepanel.py calculate/lib/format/xml_xfcepanel.py
index abc8e0a..849981e 100644
--- calculate/lib/format/xml_xfcepanel.py
+++ calculate/lib/format/xml_xfcepanel.py
@@ -40,7 +40,7 @@ class xml_xfcepanel(xml_xfce):
         try:
             self.doc = xml.dom.minidom.parseString(self.text)
         except:
-            self.setError(_("Template text is not XML"))
+            self.setError(_("The template content is not XML"))
             return False
         self.rootNode = self.doc.documentElement
         self.bodyNode = self.rootNode
@@ -77,10 +77,11 @@ class xml_xfcepanel(xml_xfce):
             if n.hasAttribute("action"):
                 nAction = n.getAttribute("action")
                 if not nAction in ("join","replace","drop"):
-                    textError = _('''In the text, XML template, look \
-for a reserved attribute 'action' with the incorrect value.\n\
-Valid values attribute 'action': \
-(action="join", action="replace", action="drop")''')
+                    textError = _("In the text of the XML template, "
+                      "reserved attribute 'action' comes with an "
+                      "incorrect value.\n"
+                      "Valid values of the 'action' attribute are: "
+                      '(action="join", action="replace", action="drop")')
                     self.setError(textError)
                     return False
             if xmlOldNode.parentNode:
@@ -105,7 +106,8 @@ Valid values attribute 'action': \
                     flagJoin = False
                     flagDrop = True
                     if flagRootNode:
-                        textError = _('Incorrect action="drop" in root node')
+                        textError = \
+                            _('Incorrect action="drop" in the root node')
                         self.setError(textError)
                         return False
                 if path == "panel":
@@ -116,8 +118,8 @@ Valid values attribute 'action': \
                         self.panelNumbers[levelNumber] = 0
                 if oldNodes:
                     if len(oldNodes)>1 and path != "panel":
-                        textError = _("The uncertainty in this template are \
-the same nodes at one level")
+                        textError = _("Ambiguity in this template: the "
+                                      "same nodes are on a same level")
                         self.setError(textError)
                         return False
                     if path == "panel":
@@ -190,7 +192,7 @@ the same nodes at one level")
             try:
                 self.joinDoc(xml_xfceObj.doc)
             except:
-                self.setError(_("Can not join template"))
+                self.setError(_("Failed to join the template"))
             return False
         return True
  
diff --git calculate/lib/server/ldap.py calculate/lib/server/ldap.py
deleted file mode 100644
index 34e1201..0000000
--- calculate/lib/server/ldap.py
+++ /dev/null
@@ -1,435 +0,0 @@
-#-*- coding: utf-8 -*-
-
-# Copyright 2008-2012 Calculate Ltd. http://www.calculate-linux.org
-#
-#  Licensed under the Apache License, Version 2.0 (the "License");
-#  you may not use this file except in compliance with the License.
-#  You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-#  Unless required by applicable law or agreed to in writing, software
-#  distributed under the License is distributed on an "AS IS" BASIS,
-#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-#  See the License for the specific language governing permissions and
-#  limitations under the License.
-
-import os
-from mod import mod_ldap
-import sys
-sys.modules['mod_ldap'] = mod_ldap
-
-from mod_ldap import LDAPError, MOD_REPLACE, MOD_ADD, SCOPE_SUBTREE,\
-                     SCOPE_ONELEVEL
-from ldif import LDIFParser, LDIFWriter
-import  cStringIO, StringIO
-from calculate.lib.cl_utils import _error
-from calculate.lib.cl_print import color_print
-from calculate.lib.cl_template import template, iniParser
-from calculate.lib.cl_ldap import ldapFun
-from share import shareVars
-from utils import genSleep, stringIsJpeg
-# Перевод модуля
-from calculate.lib.cl_lang import setLocalTranslate
-setLocalTranslate("cl_lib3",sys.modules[__name__])
-
-def adminConnectLdap(fun):
-    """Cоединение с LDAP администратором сервиса (декоратор)
-
-    соединение с LDAP и проверка установки необходимых переменных
-    """
-    def ret (self, *arg, **argv):
-        flagError = False
-        if not self.clVars:
-            self.createClVars()
-        if not self.ldapObj:
-            if not self.getLdapObjInFile():
-                flagError = True
-        if not self.baseDN:
-            if self.clVars.defined("ld_base_dn"):
-                self.baseDN = self.clVars.Get("ld_base_dn")
-            if not self.baseDN:
-                self.printERROR (_('Not found LDAP base DN'))
-        if flagError:
-            return False
-        else:
-            return fun(self, *arg , **argv)
-    return ret
-
-
-class addLdif(LDIFParser):
-    """Класс необходимый для добавления записей в LDAP"""
-    def __init__(self, strInput,ldapCon):
-        FD = cStringIO.StringIO(strInput)
-        LDIFParser.__init__(self, FD)
-        self.ldapCon = ldapCon
-
-    def handle(self, dn, entry):
-        self.ldapCon.add_s(dn, entry.items())
-
-
-class ldapFunction(ldapFun):
-    '''Объект для работы с LDAP сервером'''
-    def __init__(self, dnUser, password):
-        ldapFun.__init__(self, dnUser, password)
-
-    def ldapAdd(self, strLdif):
-        """Добавляем строку содержащую ldif в LDAP
-
-        Если данные существуют - ошибка
-        """
-        if self.conLdap:
-            try:
-                # Записываем параметры из ldif файла в LDAP сервер
-                parser = addLdif(strLdif,self.conLdap)
-                parser.parse()
-            except LDAPError, e:
-                self.setError(e[0]['desc'])
-                return False
-            except:
-                self.setError("Error in ldif file")
-                return False
-            return True
-        else:
-            self.setError(_("No connect to LDAP server"))
-            return False
-
-
-class iniLdapParser(iniParser):
-    """Класс для работы c ini-файлом ldap"""
-    def __init__(self):
-        # название ini файла
-        self.nameIniFile = "/etc/calculate/calculate.ldap"
-        iniParser.__init__(self, self.nameIniFile)
-        # права создаваемого ini-файла
-        self.setMode(0600)
-        pathIniFile = os.path.split(self.nameIniFile)[0]
-        if not os.path.exists(pathIniFile):
-            os.makedirs(pathIniFile)
-
-class shareldap(_error, color_print, shareVars):
-    """Общие методы для работы с LDAP для серверных программ"""
-
-    # DN сервисов относительно базового
-    ServicesDN = "ou=Services"
-    # Переменная объект Vars
-    clVars = False
-    # Переменная объект ldapFunction
-    ldapObj = False
-    # Переменная соединение с LDAP сервером
-    conLdap = False
-    # Базовый DN LDAP сервера
-    baseDN = False
-
-    def addDN(self, *arg):
-        """Складывает текстовые элементы DN"""
-        DNs = []
-        for dn in arg:
-            if dn:
-                DNs.append(dn)
-        return ','.join(DNs)
-
-    @adminConnectLdap
-    def searchLdapDN(self, name, relDN, attr, retAttr=None):
-        """Находит DN в LDAP"""
-        DN = self.addDN(relDN,self.baseDN)
-        #searchScope = SCOPE_SUBTREE
-        searchScope = SCOPE_ONELEVEL
-        searchFilter = "%s=%s" %(attr,name)
-        retrieveAttributes = retAttr
-        resSearch = self.ldapObj.ldapSearch(DN, searchScope,
-                           searchFilter, retrieveAttributes)
-        return resSearch
-
-    @adminConnectLdap
-    def addEntry(self, DN, entry, errorMessage):
-        """Добавление узла в LDAP"""
-        try:
-            self.conLdap.add_s(DN, entry)
-        except LDAPError, e:
-            self.printERROR(_("LDAP Error") + ": " + e[0]['desc'].strip())
-            self.printERROR(errorMessage)
-            return False
-        return True
-
-    def getLdapObjInFile(self, part="admin"):
-        """Получаем объект ldapFunction из ini файла
-
-        В выходном объекте есть соединение с LDAP сервером: self.conLdap
-        """
-        # Если  раннее была ошибка то выходим
-        if self.getError():
-            self.printERROR (_("ERROR") + ": " +\
-                self.getError().strip())
-            return False
-        ldapParser = iniLdapParser()
-        adminDn = ldapParser.getVar(part,"DN")
-        adminPw = ldapParser.getVar(part,"PASS")
-        if not (adminDn or adminPw):
-            if part == "admin":
-                service = "LDAP"
-            else:
-                service = part
-            self.printERROR(\
-            _("Admin password for the service %s could not be found")%service)
-            return False
-        ldapObj = ldapFunction(adminDn, adminPw)
-        # Генератор задержек
-        wait = genSleep()
-        while ldapObj.getError():
-            try:
-                # Задержка
-                wait.next()
-            except StopIteration:
-                break
-            # Очистка ошибки
-            _error.error = []
-            ldapObj = ldapFunction(adminDn, adminPw)
-        if ldapObj.getError():
-            # Удаляем одинаковые ошибки
-            listError = []
-            for e in ldapObj.error:
-                if not e in listError:
-                    listError.append(e)
-            _error.error = listError
-            self.printERROR (_("LDAP connect error") + ": " +\
-                ldapObj.getError().strip())
-            return False
-        # Устанавливаем у объекта соединение и объект LDAP функций
-        self.ldapObj = ldapObj
-        self.conLdap = ldapObj.conLdap
-        return True
-
-    def connectToLDAP(self, adminDn, adminPw):
-        """Подключаемся к LDAP - для внешних программ запускающихся не от root
-        """
-        ldapObj = ldapFunction(adminDn, adminPw)
-        # Генератор задержек
-        wait = genSleep()
-        while ldapObj.getError():
-            try:
-                # Задержка
-                wait.next()
-            except StopIteration:
-                break
-            # Очистка ошибки
-            _error.error = []
-            ldapObj = ldapFunction(adminDn, adminPw)
-        if ldapObj.getError():
-            # Удаляем одинаковые ошибки
-            listError = []
-            for e in ldapObj.error:
-                if not e in listError:
-                    listError.append(e)
-            _error.error = listError
-            self.printERROR (_("LDAP connect error") + ": " +\
-                ldapObj.getError().strip())
-            return False
-        # Устанавливаем у объекта соединение и объект LDAP функций
-        self.ldapObj = ldapObj
-        self.conLdap = ldapObj.conLdap
-        return True
-
-    @adminConnectLdap
-    def modAttrsDN(self, relDN, modAttrs):
-        """Модифицирует аттрибуты DN"""
-        DN = self.addDN(relDN,self.baseDN)
-        if modAttrs:
-            try:
-                self.conLdap.modify_s(DN, modAttrs)
-            except LDAPError, e:
-                self.printERROR(e[0]['desc'])
-                return False
-        return True
-
-    @adminConnectLdap
-    def modifyElemDN(self, relDN, newFirstDn):
-        """Изменяет основной элемент DN (uid, cn и др.)"""
-        DN = self.addDN(relDN,self.baseDN)
-        try:
-            self.conLdap.modrdn_s(DN, newFirstDn)
-        except LDAPError, e:
-            self.printERROR(e[0]['desc'])
-            return False
-        return True
-
-    def getMaxAttrDN(self, relDN, name, attr, numMin, numMax, attrSearch):
-        """Находит максимальный добавленный аттрибут в LDAP DN"""
-        resSearch = self.searchLdapDN(name, relDN, attr, [attrSearch])
-        lst = []
-        lst.append(0)
-        if resSearch:
-            for scope in resSearch:
-                if scope[0][1].has_key(attrSearch):
-                    uid = int(scope[0][1][attrSearch][0])
-                    if uid<=numMax and uid>=numMin:
-                        lst.append(uid)
-            return max(lst)
-        return False
-
-    def createLdif(self, ldifFile):
-        """Cоздает ldif из ldif - шаблона"""
-        if not os.access(ldifFile, os.F_OK):
-            self.setError(_("File not found") + ":\n  " + ldifFile)
-            return False
-        FD = open (ldifFile)
-        ldifTemplate = FD.read()
-        FD.close()
-        clTempl = template(self.clVars)
-        # Применяем условия к шаблону
-        ldifTemplate = clTempl.applyTermsTemplate(ldifTemplate, ldifFile)
-        # Заменяем переменные в шаблоне
-        ldifTemplate = clTempl.applyVarsTemplate(ldifTemplate, ldifFile)
-        return ldifTemplate
-
-    @adminConnectLdap
-    def delDN(self, relDN):
-        """Удаляет одиночный DN"""
-        DN = self.addDN(relDN,self.baseDN)
-        try:
-            self.conLdap.delete_s(DN)
-        except LDAPError, e:
-            self.printERROR(e[0]['desc'])
-            return False
-        return True
-
-    @adminConnectLdap
-    def deleteDN(self, relDelDN):
-        """Удаляет DN и все внутренние элементы"""
-        delDN = self.addDN(relDelDN, self.baseDN)
-        delListDN=[]
-        try:
-            dnList = self.conLdap.search_s(delDN,
-                                            SCOPE_SUBTREE,
-                                            '(objectclass=*)',
-                                            [''])
-        except LDAPError, e:
-            self.printERROR("deleteDN: "+e[0]['desc'])
-            return False
-        for dn, f in dnList:
-            delListDN.append(dn)
-        delListDN.sort(lambda x, y: cmp(len(y), len(x)))
-        for dn in delListDN:
-            try:
-                self.conLdap.delete_s(dn)
-            except LDAPError, e:
-                self.printERROR("deleteDN: "+e[0]['desc'])
-                return False
-        return True
-
-    @adminConnectLdap
-    def fullElementDNtoText(self, relDN="", ldapFilter='(objectclass=*)'):
-        """Выводит все внутренние элементы DN виде текста"""
-        DN = self.addDN(relDN, self.baseDN)
-        listDN=[]
-        try:
-            dnList = self.conLdap.search_s(DN,
-                                            SCOPE_SUBTREE,
-                                            ldapFilter,None)
-        except LDAPError, e:
-            self.printERROR("fullElementDN: "+e[0]['desc'])
-            return False
-        FDOUT = StringIO.StringIO("")
-        writer = LDIFWriter(FDOUT)
-        for dn, f in dnList:
-            writer.unparse(dn, f)
-        FDOUT.seek(0)
-        return FDOUT.read()
-
-    @adminConnectLdap
-    def fullElementSambaDNtoText(self, relDN=""):
-        """Выводит все внутренние элементы ветки Samba в виде текста"""
-        return self.fullElementDNtoText(relDN,'(|(|(|(|(ou:dn:=Samba)\
-(ou:dn:=Unix))(ou:dn:=LDAP))(!(ou:dn:=Services)))(ou=Services))')
-
-    @adminConnectLdap
-    def fullElementUnixDNtoText(self, relDN=""):
-        """Выводит все внутренние элементы ветки Unix в виде текста"""
-        return self.fullElementDNtoText(relDN,'(|(|(|(ou:dn:=Unix)\
-(ou:dn:=LDAP))(!(ou:dn:=Services)))(ou=Services))')
-
-    @adminConnectLdap
-    def fullElementMailDNtoText(self, relDN=""):
-        """Выводит все внутренние элементы ветки Mail в виде текста"""
-        baseDN = self.clVars.Get("ld_base_dn")
-        baseDNName, baseLogin = baseDN.split(",")[0].split("=")
-        proxyDN = self.clVars.Get("ld_bind_dn")
-        proxyDNName, proxyLogin = proxyDN.split(",")[0].split("=")
-        #return self.fullElementDNtoText(relDN,'(&(|(|(&(ou:dn:=Replication)\
-#(ou:dn:=Mail))(!(ou:dn:=Services)))(ou=Services))(!(&(%s:dn:=%s)\
-#(%s:dn:=%s))))'%(proxyDNName, proxyLogin, baseDNName, baseLogin))
-        return self.fullElementDNtoText(relDN,'(&(&(|(|(|(ou:dn:=LDAP)\
-(ou=Mail))(!(ou:dn:=Services)))(ou=Services))(!(&(%s:dn:=%s)(%s:dn:=%s))))\
-(!(ou:dn:=Worked)))'%(proxyDNName, proxyLogin, baseDNName, baseLogin))
-
-    @adminConnectLdap
-    def fullElementMailSambaDNtoText(self, relDN=""):
-        """Выводит все внутренние элементы ветки Samba и Mail в виде текста"""
-        return self.fullElementDNtoText(relDN,'(&(|(|(|(|(|(ou:dn:=Samba)\
-(ou:dn:=Unix))(ou:dn:=LDAP))(ou:dn:=Mail))(!(ou:dn:=Services)))(ou=Services))\
-(!(|(&(&(ou:dn:=Users)(ou:dn:=Mail))(uid=*))(&(&(ou:dn:=Groups)(ou:dn:=Mail))\
-(cn=*)))))')
-
-    @adminConnectLdap
-    def fullElementMailUnixDNtoText(self, relDN=""):
-        """Выводит все внутренние элементы ветки Unix и Mail в виде текста"""
-        return self.fullElementDNtoText(relDN,'(&(|(|(|(|(ou:dn:=Unix)\
-(ou:dn:=LDAP))(ou:dn:=Mail))(!(ou:dn:=Services)))(ou=Services))\
-(!(|(&(&(ou:dn:=Users)(ou:dn:=Mail))(uid=*))(&(&(ou:dn:=Groups)(ou:dn:=Mail))\
-(cn=*)))))')
-
-    def setJpegPhotoUser(self, userName, photoPath, attr="uid"):
-        """Добавляем jpeg фотографию пользователя в LDAP"""
-        import subprocess
-        try:
-            FD = open(photoPath)
-            photoData = FD.read()
-            FD.close()
-        except:
-            self.printERROR(_("Not open file") + ": " + str(photoPath))
-            return False
-        searchUser = self.searchLdapDN(userName, self.relUsersDN, attr)
-        if not searchUser:
-            self.printERROR(_("User") + " " + str(userName) + " "+\
-            _("not found"))
-            return False
-        modAttrs = []
-        if not stringIsJpeg(photoData):
-            flagError = False
-            pipe = subprocess.Popen("convert '%s' jpg:-" %photoPath,
-                            stdin=subprocess.PIPE,
-                            stdout=subprocess.PIPE, 
-                            stderr=subprocess.PIPE, close_fds=True,
-                            shell=True)
-            fOut, fIn, fErr = (pipe.stdout, pipe.stdin, pipe.stderr)
-            fIn.close()
-            # Код возврата
-            retcode = pipe.wait()
-            if retcode != 0:
-                self.printERROR(_("Can not convert file '%s' in jpeg format")\
-                                %photoPath)
-                flagError = True
-            fErr.close()
-            if not flagError:
-                photoData = fOut.read()
-                if not stringIsJpeg(photoData):
-                    self.printERROR(\
-                    _("Can not convert file '%s' in jpeg format") %photoPath)
-                    flagError = True
-            fOut.close()
-            if flagError:
-                return False
-        if searchUser[0][0][1].has_key('jpegPhoto'):
-            modAttrs.append((MOD_REPLACE, 'jpegPhoto', photoData))
-        else:
-            modAttrs.append((MOD_ADD, 'jpegPhoto', photoData))
-        userDN = self.addDN("%s=%s"%(attr,userName),self.relUsersDN)
-        if not self.modAttrsDN(userDN, modAttrs):
-            return False
-        return True
-
-    def searchService(self):
-        """Поиск DN сервиса"""
-        name, value = self.relServDN.split('=')
-        resSearch = self.searchLdapDN(value, self.ServicesDN, name)
-        return resSearch
diff --git calculate/lib/server/share.py calculate/lib/server/share.py
deleted file mode 100644
index 4ea9616..0000000
--- calculate/lib/server/share.py
+++ /dev/null
@@ -1,137 +0,0 @@
-#-*- coding: utf-8 -*-
-
-# Copyright 2008-2012 Calculate Ltd. http://www.calculate-linux.org
-#
-#  Licensed under the Apache License, Version 2.0 (the "License");
-#  you may not use this file except in compliance with the License.
-#  You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-#  Unless required by applicable law or agreed to in writing, software
-#  distributed under the License is distributed on an "AS IS" BASIS,
-#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-#  See the License for the specific language governing permissions and
-#  limitations under the License.
-
-import sys
-
-from calculate.lib.cl_datavars import DataVars
-from calculate.lib.cl_print import color_print
-from calculate.lib.cl_lang import setLocalTranslate
-setLocalTranslate('cl_lib3',sys.modules[__name__])
-
-class shareVars:
-    """Общие методы для классов модулей серверных программ"""
-    # Переменная объект Vars
-    clVars = False
-
-    def createClVars(self, clVars=False, returnImportVar=False):
-        """Создает объект Vars"""
-        # Словарь импортируемых переменных из ini Файлов
-        dictImportVars = {}
-        if not clVars:
-            clVars = DataVars()
-            clVars.flServer()
-            dictImportVars = clVars.flIniFile()
-            # Устанавливаем у объекта объект Vars
-            self.clVars = clVars
-        if returnImportVar:
-                return dictImportVars
-        return True
-
-    def deleteServiceVarsInFile(self, service):
-        """Удаляет переменные сервиса из ini файлов
-
-        После запуска этого метода объект self.clVars должен быть пересоздан
-        """
-        importVarsDict = self.createClVars(False,True)
-        serviceNameVars = "_%s_" %service
-        for location in importVarsDict.keys():
-            for nameVar in importVarsDict[location]:
-                # Если имя сервиса присутствует в переменной -
-                # Удаляем переменную
-                if serviceNameVars in nameVar:
-                    if not self.clVars.Delete(nameVar, location, "server"):
-                        return False
-        self.clVars = False
-        return True
-
-    def saveVarsClient(self, listVarName):
-        """Записывает переменные для клиента calcualte-client"""
-        #считаем переменные для клиента
-        dictVar = {}
-        flagError = False
-        for varName in listVarName:
-            value = self.clVars.Get(varName)
-            if not value and value != "":
-                self.printERROR(_("Variables %s is empty")%varName)
-                flagError = True
-                break
-            dictVar[varName] = value
-        if flagError:
-            return False
-        #Запишем переменные в клиентскую секцию
-        for name,value in dictVar.items():
-            value = str(value)
-            if not value.strip():
-               self.clVars.Delete(name)
-            if not self.clVars.Write(name,value,True,"remote","client"):
-                self.printERROR(_("Error writing variable %s")%name)
-                flagError = True
-                break
-        if flagError:
-            return False
-        return True
-
-    def reloadDefaultVar(self, nameVar):
-        """При получениии значения переменной снова
-
-        вызывается метод заполнения переменной"""
-        self.clVars.Set(nameVar,"",True)
-        self.clVars.__getattribute__(nameVar).countFill = 0
-        self.clVars.__getattribute__(nameVar).fillStart = True
-        return True
-
-class servicesAPI(color_print):
-    """Методы сервисов используемые другими сервисами"""
-    # Путь к модулю сервера
-    __pathServer__ = "/usr/lib/calculate/calculate-server/pym"
-    # Названия импортированных классов
-    __imports_names__ = []
-    # Импортированные классы
-    __imports_classes__ = {}
-
-    def __getServiceObj__(self, serviceName):
-        """Получаем объект сервиса"""
-        if not serviceName in __imports_names__:
-            try:
-                classImport = getattr(__import__("cl_ldap", globals(),\
-                                      locals(),[]), serviceName)
-            except (ImportError, AttributeError):
-                self.printERROR(_("Can not found service class '%s'")\
-                                %serviceName)
-                return False
-            __imports_classes__[serviceName] = classImport
-            __imports_names__.append(serviceName)
-            retObj = classImport()
-        else:
-            retObj = __imports_classes__[serviceName]()
-        return retObj
-
-    def searchUnixUser(self, userName, servUnixObj=None):
-        """Поиск пользователя в LDAP ветке Unix сервиса"""
-        if not servUnixObj:
-            servUnixObj = self.__getServiceObj__("unix")
-            if not servUnixObj:
-                exit(1)
-        return servUnixObj.searchUnixUser(userName)
-
-    def searchPasswdUser(self, userName, servUnixObj=None):
-        """Поиск пользователя в /etc/passwd"""
-        if not servUnixObj:
-            servUnixObj = self.__getServiceObj__("unix")
-            if not servUnixObj:
-                exit(1)
-        return servUnixObj.searchPasswdUser(userName)
-        
diff --git calculate/lib/server/users.py calculate/lib/server/users.py
deleted file mode 100644
index a7c7ade..0000000
--- calculate/lib/server/users.py
+++ /dev/null
@@ -1,326 +0,0 @@
-#-*- coding: utf-8 -*-
-
-# Copyright 2008-2012 Calculate Ltd. http://www.calculate-linux.org
-#
-#  Licensed under the Apache License, Version 2.0 (the "License");
-#  you may not use this file except in compliance with the License.
-#  You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-#  Unless required by applicable law or agreed to in writing, software
-#  distributed under the License is distributed on an "AS IS" BASIS,
-#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-#  See the License for the specific language governing permissions and
-#  limitations under the License.
-
-import os
-import sys
-# Ввод pwd
-import getpass
-import types
-from calculate.lib.utils.files import removeDir
-from calculate.lib.cl_print import color_print
-from share import servicesAPI
-from utils import rawInput, isCorrectStringNet, addInfoUser, addInfoGroup, dialogYesNo
-from calculate.lib.cl_lang import setLocalTranslate
-setLocalTranslate('cl_lib3',sys.modules[__name__])
-
-class users(color_print):
-    """Общие методы для серверных программ,
-
-    (работа с пользователями и группами)"""
-
-    # Объект с методами доступа к другим сервисам
-    servicesAPIObj = servicesAPI()
-
-    # Статические группы
-    staticGroups = {\
-        'client':addInfoGroup('client',
-                               '900',
-                               'Client group',
-                               '2801',
-                               '2'),
-        'Domain Admins':addInfoGroup('Domain Admins',
-                                     '512',
-                                     'Domain Administrators',
-                                     '512',
-                                     '2'),
-        'Domain Users':addInfoGroup('Domain Users',
-                                    '513',
-                                    'Domain Users',
-                                    '513',
-                                    '2'),
-        'Domain Guests':addInfoGroup('Domain Guests',
-                                     '514',
-                                     'Domain Guests Users',
-                                     '514',
-                                     '2'),
-        'Domain Computers':addInfoGroup('Domain Computers',
-                                        '515',
-                                        'Domain Computers accounts',
-                                        '515',
-                                        '2'),
-        'Administrators':addInfoGroup('Administrators',
-                                      '544',
-                                      'Domain Members can fully \
-administer the computer/sambaDomainName',
-                                      '544',
-                                      '5',
-                                      "S-1-5-32-544"),
-        'Account Operators':addInfoGroup('Account Operators',
-                                         '548',
-                                         'Domain Users to manipulate \
-users accounts',
-                                         '548',
-                                         '5',
-                                         "S-1-5-32-548"),
-        'System Operators':addInfoGroup('System Operators',
-                                        '549',
-                                        'Domain System Operators',
-                                        '549',
-                                        '5',
-                                        "S-1-5-32-549"),
-        'Print Operators':addInfoGroup('Print Operators',
-                                        '550',
-                                        'Domain Print Operators',
-                                        '550',
-                                        '5',
-                                        "S-1-5-32-550"),
-        'Backup Operators':addInfoGroup('Backup Operators',
-                                        '551',
-                                        'Domain Members can bypass \
-file security to back up files',
-                                        '551',
-                                        '5',
-                                        "S-1-5-32-551"),
-        'Replicators':addInfoGroup('Replicators',
-                                   '552',
-                                   'Domain Supports file replication \
-in a sambaDomainName',
-                                    '552',
-                                    '5',
-                                    "S-1-5-32-552"),
-                                          }
-    # Статические пользователи
-    staticUsers = {\
-        'client':addInfoUser('client',
-                             '900',
-                             '900',
-                             'Client samba user'),
-        'admin':addInfoUser('admin',
-                             '901',
-                             '544',
-                             'Admin samba user')}
-
-    def getUserUidAndGid(self, userName, groupName=""):
-        """Находит в системе uid и gid пользователя
-
-        userName - имя пользователя и имя группы пользователя
-        """
-        if not groupName:
-            groupName = userName
-        import pwd
-        try:
-            uid = pwd.getpwnam(userName)[2]
-        except:
-            self.printERROR(_("Can not found user %s in this system")%userName)
-            return ()
-        try:
-            import grp
-            gid = grp.getgrnam(groupName)[2]
-        except:
-            self.printERROR(_("Can not found group %s in this system")\
-                            %groupName)
-            return ()
-        return (uid, gid)
-
-
-    def __restoreDelUser(self,userName,service,srcDir,message,unixObj=False):
-        """Возвращаем данные удаленного пользователя"""
-        # Ищем Unix пользователя
-        searchUnixUser = self.servicesAPIObj.searchUnixUser(userName, unixObj)
-        # id пользователя
-        strUid = ""
-        if searchUnixUser:
-            strUid = searchUnixUser[0][0][1]['uidNumber'][0]
-        else:
-            resPasswd = self.servicesAPIObj.searchPasswdUser(userName, unixObj)
-            if resPasswd:
-                strUid = resPasswd.split(":")[2]
-        if strUid:
-            delBackDir =\
-                os.path.join(self.clVars.Get("sr_deleted_path"),
-                                             "%s-%s"%(userName,strUid),
-                                             service)
-        if strUid and os.path.exists(delBackDir) and os.listdir(delBackDir):
-            if message == None or type(message) == types.BooleanType:
-                dialogRes = message
-            else:
-                dialogRes = dialogYesNo(message)
-            if dialogRes and dialogRes == True:
-                try:
-                    copyDir(srcDir, delBackDir)
-                except:
-                    self.printERROR(_("Not restore user data in dir %s")\
-                                    %srcDir)
-                    return False
-                self.printSUCCESS(_("Restore user data in dir %s")\
-                          %srcDir)
-                return  "Yes", delBackDir
-            elif dialogRes == False:
-                return "No", delBackDir
-            elif dialogRes == None:
-                return "Cancel", delBackDir
-        return True
-
-    def restorePathDelUser(self,userName,destDir,relDir,message,unixObj=False):
-        """Восстанавливает директорию удаленного пользователя"""
-        removedDir = False
-        flagError = False
-        resRestore = self.__restoreDelUser(userName, relDir,
-                                         destDir, message, unixObj)
-        # Если ошибка то выходим
-        if not resRestore:
-            flagError = True
-        # Флаг создания директории профиля пользователя
-        createDir = destDir
-        term = ""
-        if resRestore == True:
-            term = message
-        if not flagError and type(resRestore) == types.TupleType:
-            # Если cansel
-            if resRestore[0] == "Cancel":
-                # Удаляем пользователя
-                flagError = True
-                term = None
-            # Если No
-            elif resRestore[0] == "No":
-                try:
-                    removeDir(resRestore[1])
-                except:
-                    flagError = True
-                if not flagError:
-                    removedDir = resRestore[1]
-                    term = False
-            elif resRestore[0] == "Yes":
-                createDir = False
-                removedDir = resRestore[1]
-                term = True
-        if flagError or term == "":
-            return False
-        else:
-            return (term, createDir, removedDir)
-
-
-    def backupDelUser(self, userName, service, srcDir, unixObj=False):
-        """Сохраняем данные удаляемого пользователя"""
-        # Ищем Unix пользователя
-        searchUnixUser = self.servicesAPIObj.searchUnixUser(userName, unixObj)
-        # id пользователя
-        strUid = ""
-        if searchUnixUser:
-            strUid = searchUnixUser[0][0][1]['uidNumber'][0]
-        if strUid:
-            delBackDir =\
-                os.path.join(self.clVars.Get("sr_deleted_path"),
-                                             "%s-%s"%(userName,strUid),
-                                             service)
-            if os.path.exists(delBackDir) and os.listdir(delBackDir):
-                self.printERROR(_("Found deleted user data dir %s")\
-                              %delBackDir)
-                self.printERROR(_("Not created deleted user data dir %s")\
-                            %delBackDir)
-                return False
-        else:
-            delBackDir =\
-                os.path.join(self.clVars.Get("sr_deleted_path"),
-                                             "%s"%(userName),
-                                             service)
-            i = 0
-            while os.path.exists(delBackDir):
-                i += 1
-                delBackDir =\
-                    os.path.join(self.clVars.Get("sr_deleted_path"),
-                                             "%s_%s"%(userName,i),
-                                             service)
-        # Cоздаем директорию хранения удаленных пользователей
-        if not os.path.exists(self.clVars.Get("sr_deleted_path")):
-            os.makedirs(self.clVars.Get("sr_deleted_path"))
-        #Делаем сохранение директории
-        try:
-            copyDir(delBackDir,srcDir)
-        except:
-            self.printERROR(_("Can not copy deleted user data in dir %s")\
-                            %delBackDir)
-            return False
-        self.printSUCCESS(_("Created deleted user data dir %s")\
-                          %delBackDir)
-        return True
-
-    def removeEmptyDir(self, rmDir):
-        """Удаление пустых директорий"""
-        if not os.path.exists(rmDir):
-            self.printERROR(_("Not found remove dir %s") %rmDir)
-            return False
-        rDir = rmDir
-        while os.listdir(rDir) == []:
-            os.rmdir(rDir)
-            rDir = os.path.split(rDir)[0]
-            if rDir == "/":
-                break
-        return True
-
-    def createUserDir(self, uid, gid, userDir, mode=0700):
-        """Создание пользовательской директории"""
-        if not os.path.exists(userDir):
-            os.makedirs(userDir)
-            if mode:
-                os.chmod(userDir,mode)
-            os.chown(userDir,uid,gid)
-            return True
-        else:
-            self.printERROR(_("Path %s exists") %userDir)
-            return False
-
-    def createUserFile(self, fileName, fileTxt, uid, gid, mode=0644):
-        """Создает пользовательский файл с содержимым
-
-        Если директория файла не существует то ошибка
-        """
-        userDir = os.path.split(fileName)[0]
-        if not os.path.exists(userDir):
-            self.printERROR(_("Path %s not exists") %userDir)
-            return False
-        fd = os.open(fileName, os.O_CREAT)
-        os.close(fd)
-        os.chmod(fileName, mode)
-        os.chown(fileName,uid,gid)
-        if fileTxt:
-            FD = open(fileName, "r+")
-            FD.write(fileTxt)
-            FD.close()
-        return True
-
-    def getUserAllowNetwork(self, strPrompt, strNetAllow):
-        """Получаем от пользователя доверительные сети
-
-        вывод - список доверительных сетей
-        """
-        def printW():
-            cl_overriding.printSUCCESS(_("Incorrect string allow networks"))
-            cl_overriding.printSUCCESS(\
-                _("Example - allow networks: 10.0.0.0/24 10.0.10.0/24"))
-            cl_overriding.printSUCCESS(_("Try again\n"))
-        strNet = rawInput(strPrompt, strNetAllow)
-        i = 0
-        while i<3 and not isCorrectStringNet(strNet):
-            printW()
-            strNet = rawInput(strPrompt, strNet)
-            i +=1
-        if i == 3 and not isCorrectStringNet(strNet):
-            printW()
-            self.printERROR(_("You used four attempts, \
-if you want to continue to run the program again"))
-            return False
-        return isCorrectStringNet(strNet)
diff --git calculate/lib/update_config/cl_update_config.py calculate/lib/update_config/cl_update_config.py
index ffec85e..ed82357 100644
--- calculate/lib/update_config/cl_update_config.py
+++ calculate/lib/update_config/cl_update_config.py
@@ -216,7 +216,7 @@ class updateUserConfigs(shareUpdateConfigs):
                                              filter(lambda y: y, x.split(" "))),
                                              resWho))))))
         else:
-            self.printERROR(_("Can not execute 'who'"))
+            self.printERROR(_("Failed to execute 'who'"))
             return False
 
         return xUsers
@@ -244,7 +244,7 @@ class updateUserConfigs(shareUpdateConfigs):
                        set(self.getConfiguredPasswdUsers()))))
         if not xUsers:
             self.logger.info(_("Package %s") %nameProgram)
-            self.logger.warn(_("Not found X sessions users"))
+            self.logger.warn(_("X sessions users not found"))
             return True
         self.logger.info(_("Package %s") %nameProgram)
         self.logger.info(_("Update desktop configuration files"))
@@ -272,7 +272,7 @@ class updateUserConfigs(shareUpdateConfigs):
                 dirsFiles = clTempl.applyTemplates()
                 if dirsFiles is False:
                     self.printERROR(\
-                        _("Error using templates for the user %s")\
+                        _("Error using templates for user %s")\
                             %userName)
                     for errMess in clTempl.getError().splitlines():
                         self.printERROR(errMess)
@@ -287,14 +287,15 @@ class updateUserConfigs(shareUpdateConfigs):
                         sorted(list(set(dirsFiles[1])))))
             if dictPakkages:
                 for calcPkg in listIndex:
-                    self.printWARNING(_("Package %s has changed files")\
+                    self.printWARNING(
+                        _("Package %s has changed the following files")\
                                       %calcPkg+":")
                     for userName, configFiles in dictPakkages[calcPkg]:
                         self.printWARNING(" "*2 + _("User %s")%userName + ":")
                         for nameConfigFile in configFiles:
                             self.printWARNING(" "*5 + nameConfigFile)
         if not dictPakkages:
-             self.logger.warn(_("Not found templates"))
+             self.logger.warn(_("Templates not found"))
         return True
 
 class updateSystemConfigs(shareUpdateConfigs):
@@ -366,7 +367,7 @@ class updateSystemConfigs(shareUpdateConfigs):
         """Копирование конфигурационных файлов"""
         configDstFiles = self.scanProtectDirs(configPath)
         if configDstFiles:
-            self.logger.warn(_("Replace files:"))
+            self.logger.warn(_("Replaced files:"))
         for dst in configDstFiles:
             src = pathJoin(configPath, dst)
             if src != dst:
@@ -434,7 +435,7 @@ class updateSystemConfigs(shareUpdateConfigs):
             dirsFiles = clTempl.applyTemplates()
             nameAndVerPkg = nameProg + "-"+clVars.Get("cl_ver")
             if dirsFiles is False:
-                self.printERROR(_("Error template in a package %s")\
+                self.printERROR(_("Template error in package %s")\
                                 %nameAndVerPkg)
                 for errMess in clTempl.getError().splitlines():
                     self.printERROR(errMess)
@@ -452,7 +453,8 @@ class updateSystemConfigs(shareUpdateConfigs):
                     sorted(list(set(dirsFiles[1])))
         if dictPakkages:
             for calcPkg in listIndex:
-                self.printWARNING(_("Package %s has changed files")%calcPkg+":")
+                self.printWARNING(
+                    _("Package %s has changed the following files")%calcPkg+":")
                 for nameF in dictPakkages[calcPkg]:
                     nameFile = nameF.partition(configPath)[2]
                     if nameFile:
@@ -462,7 +464,7 @@ class updateSystemConfigs(shareUpdateConfigs):
                         nameFile = nameF
                     self.printWARNING(" "*5 + nameFile)
         else:
-            self.logger.warn(_("Not found templates"))
+            self.logger.warn(_("Templates not found"))
         if flagUpdate:
             self.copyConfigFiles(configPath)
         if clTempl and clTempl.getWarning():
diff --git calculate/lib/update_config/cl_update_config_cmd.py calculate/lib/update_config/cl_update_config_cmd.py
index 22deb8d..b88e52e 100644
--- calculate/lib/update_config/cl_update_config_cmd.py
+++ calculate/lib/update_config/cl_update_config_cmd.py
@@ -34,7 +34,7 @@ EXAMPLES = _(r"%prog --system --pkg_category net-nds --pkg_version 2.4.19\
   --path / openldap")
 
 # Описание программы (что делает программа)
-DESCRIPTION = _("Update configuration files package installed")
+DESCRIPTION = _("Update configuration files of the installed package")
 
 # Опции командной строки
 CMD_OPTIONS=[{'longOption':"system",
@@ -82,7 +82,7 @@ class update_cmd:
             self.optobj.error(errMsg)
             return False
         if len(args)>1:
-            errMsg = _("incorrect argument") + ":" + " %s" %" ".join(args)
+            errMsg = _("wrong argument") + ":" + " %s" %" ".join(args)
             self.optobj.error(errMsg)
             return False
         if optObj.system and not optObj.path:
diff --git calculate/lib/utils/common.py calculate/lib/utils/common.py
index a06cfe9..555749c 100644
--- calculate/lib/utils/common.py
+++ calculate/lib/utils/common.py
@@ -86,7 +86,7 @@ def getUserPassword(flag="dialog", pwDialog=False):
         if flag == "dialog":
             if not pwDialog:
                 pwDialog = [_("New password"),
-                            _("Retype new password")]
+                            _("Retype the new password")]
             pwdA = getpass.getpass(pwDialog[0]+":")
             pwdB = getpass.getpass(pwDialog[1]+":")
         elif flag == "stdin":
@@ -98,7 +98,7 @@ incorrect option 'flag=%s'")%flag)
             return False
         if not pwdA or not (pwdA == pwdB):
             cl_overriding.printERROR(_("ERROR") + ": " +\
-            _("password incorrect")+ ": " + _("try again"))
+            _("wrong password")+ ": " + _("try again"))
             return False
         userPwd = pwdA
         return userPwd
diff --git setup.py setup.py
index ae7169b..f5fe3d7 100755
--- setup.py
+++ setup.py
@@ -40,9 +40,9 @@ setup(
               module_name,
               module_name + '.client',
               module_name + '.format',
+              module_name + '.server',
               module_name + '.variables',
               module_name + '.mod',
-              module_name + '.server',
               module_name + '.update_config',
               module_name + '.utils'],
     data_files = [("/etc/calculate", []),
