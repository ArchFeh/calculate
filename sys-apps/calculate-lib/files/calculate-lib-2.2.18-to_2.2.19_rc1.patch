diff --git pym/cl_template.py pym/cl_template.py
index 2a348c4..757c493 100644
--- pym/cl_template.py
+++ pym/cl_template.py
@@ -2006,9 +2006,9 @@ class blocText:
         r = captionTxtBloc.search(text)
         if r:
             headersTxt.append(r.group(0))
-            txtSpl = text.split(r.group(0))
+            txtSpl = text.partition(r.group(0))
             blocTxt =  txtSpl[0]
-            txtWr = txtSpl[1]
+            txtWr = txtSpl[2]
             rb = bodyTxtBloc.search(blocTxt)
             if not blocTxt:
                 blocsTxt.append(blocTxt)
@@ -2018,9 +2018,9 @@ class blocText:
                 r = captionTxtBloc.search(txtWr)
                 if r:
                     headersTxt.append(r.group(0))
-                    txtSpl = txtWr.split(r.group(0))
+                    txtSpl = txtWr.partition(r.group(0))
                     blocTxt =  txtSpl[0]
-                    txtWr = txtSpl[1]
+                    txtWr = txtSpl[2]
                     rb = bodyTxtBloc.search(blocTxt)
                     if rb:
                         blocsTxt.append(rb.group(0))
diff --git pym/cl_utils.py pym/cl_utils.py
index 025b051..5d4d51a 100644
--- pym/cl_utils.py
+++ pym/cl_utils.py
@@ -1001,3 +1001,33 @@ def lspci(filtername=None,shortInfo=False):
                               'vendor':sfunc(device[2]),\
                               'name':sfunc(device[3])}
     return retData
+
+def getUdevDeviceInfo(path="",name=""):
+    """Get device info by syspath of name"""
+    udevadmCmd = getProgPath('/sbin/udevadm')
+    typeQuery = "--path" if path else "--name"
+    value = path if path else name
+    return dict(
+        filter(lambda x:x[0],
+        map(lambda x:x.partition("=")[0::2],
+        process(udevadmCmd,"info","--query","property",
+               typeQuery,value).read().split("\n"))))
+
+def getPartitionSize(dev):
+    """Get partition size"""
+    SECTORSIZE=512
+    syspath = getUdevDeviceInfo(name=dev).get('DEVPATH','')
+    if syspath:
+        sizeFile = pathJoin("/sys",syspath,"size")
+        if path.exists(sizeFile):
+            size = float(open(sizeFile,'r').read().strip())*SECTORSIZE
+            suffix = ((1024**0,""),
+                      (1024**1,"KiB"),
+                      (1024**2,"MiB"),
+                      (1024**3,"GiB"),
+                      (1024**4,"TiB"),
+                      (1024**5,"PiB"))
+            suffix = filter(lambda x:size >=x[0],suffix)[-1]
+            if suffix:
+                return "%.1f %s"%(size/suffix[0],suffix[1])
+    return "0"
diff --git pym/format/samba.py pym/format/samba.py
index 47a0d94..6776289 100644
--- pym/format/samba.py
+++ pym/format/samba.py
@@ -46,9 +46,6 @@ class samba(objShare):
         # Для добавления перевода строки между областями если его нет
         xmlAreas = xpath.Evaluate("child::area", self.docObj.body)
         for xmlArea in xmlAreas:
-            if xmlArea.previousSibling and\
-            self.docObj.getTypeField(xmlArea.previousSibling) == "br":
-                continue
             firstArea = False
             xmlFields = xpath.Evaluate("child::field", xmlArea)
             if not (xmlFields and\
diff --git pym/utils/ip.py pym/utils/ip.py
index a1ec1be..2ec2852 100644
--- pym/utils/ip.py
+++ pym/utils/ip.py
@@ -48,7 +48,7 @@ IP_ADDR_NET = "(%(ipaddr)s)/((%(ipnet)s))"%{'ipaddr':IP_NET,
 reIp = re.compile("^{0}$".format(IP_ADDR))
 reNetSuffix = re.compile("^{0}$".format(IP_NET_SUFFIX))
 reNet = re.compile("^{0}$".format(IP_ADDR_NET))
-reMask = re.compile("^{}$".format(IP_MASK))
+reMask = re.compile("^{0}$".format(IP_MASK))
 
 def checkIp(ip):
     """Check ip"""
