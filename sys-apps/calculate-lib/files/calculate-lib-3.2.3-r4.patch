diff --git pym/calculate/lib/cl_template.py pym/calculate/lib/cl_template.py
index 660e970..fb62bf7 100644
--- pym/calculate/lib/cl_template.py
+++ pym/calculate/lib/cl_template.py
@@ -3222,7 +3222,8 @@ class templateFunction(_error, _warning, _shareTemplate, _shareTermsFunction):
         re_resol = re.compile("^(\d+)x(\d+)$")
         resol = re_resol.match(resol)
         if not resol:
-            self.raiseErrTemplate(_("first parameter must be resolution"))
+            self.raiseErrTemplate(
+                _("the first parameter must be the resolution"))
 
         re_resol = re.compile(".*?(\d+)x(\d+).*")
         wpath = pathJoin(self._baseDir, wpath)
diff --git pym/calculate/lib/utils/portage.py pym/calculate/lib/utils/portage.py
index 359c520..37b4848 100644
--- pym/calculate/lib/utils/portage.py
+++ pym/calculate/lib/utils/portage.py
@@ -587,7 +587,7 @@ class Git:
                     _("Branch {branch} not found in repository {rpath}").format(
                         branch=branch, rpath=rpath))
             raise GitError(
-                _("Failed to change branch to {branch} in the {rpath} "
+                _("Failed to move to branch {branch} in the {rpath} "
                   "repository").format(branch=branch,
                                                rpath=rpath), error)
         return True
diff --git pym/calculate/lib/utils/tools.py pym/calculate/lib/utils/tools.py
index a1a4791..f6a6d98 100644
--- pym/calculate/lib/utils/tools.py
+++ pym/calculate/lib/utils/tools.py
@@ -13,8 +13,6 @@
 #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #  See the License for the specific language governing permissions and
 #  limitations under the License.
-import os
-import traceback
 from functools import wraps
 
 from itertools import tee
@@ -177,27 +175,3 @@ def debug(prefix="DEBUG {name}({args},{kw})={ret}"):
             return ret
         return wrapper
     return debug_decor
-
-
-def short_traceback(e1, e2, e3):
-    """
-    Return short traceback
-    """
-    frame = e3
-    for i in apply(traceback.format_exception, (e1, e2, e3)):
-        print i,
-    while frame.tb_next:
-        frame = frame.tb_next
-    module, part = os.path.split(frame.tb_frame.f_code.co_filename)
-    if part.endswith('.py'):
-        part = part[:-3]
-    fallback_mod = part
-    modname = [part]
-    while module != '/' and not module.endswith('site-packages'):
-        module, part = os.path.split(module)
-        modname.insert(0, part)
-    if module.endswith('site-packages'):
-        modname = ".".join(modname)
-    else:
-        modname = fallback_mod
-    return "%s:%s(%s:%s)" % (e1.__name__, str(e2), modname, frame.tb_lineno)
