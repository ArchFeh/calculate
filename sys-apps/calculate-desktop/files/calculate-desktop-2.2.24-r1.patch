diff --git pym/cl_desktop.py pym/cl_desktop.py
index 321f90a..a7945a1 100644
--- pym/cl_desktop.py
+++ pym/cl_desktop.py
@@ -29,7 +29,7 @@ from cl_datavars import DataVars
 from cl_print import color_print
 from client.progressbar import ProgressBar
 from cl_utils import runOsCommand, getpathenv, appendProgramToEnvFile,\
-                     removeProgramToEnvFile
+                     removeProgramToEnvFile,process, makeDirectory
 
 lang().setLanguage(sys.modules[__name__])
 
@@ -196,7 +196,7 @@ class desktop(share):
                 self.displayTemplatesApplied(dirsFiles)
             return dirsFiles
 
-    def createHome(self, progress=False, live=False, verbose=False):
+    def createHome(self, progress=False, live=False, verbose=False,cache=False):
         """Создание профиля пользователя (пользовательской директории)"""
         # Имя пользователя
         self.verbose = verbose
@@ -236,10 +236,21 @@ class desktop(share):
         homeDir = os.path.join(rootPath, homeDir[1:])
         # Домашняя директория существует
         flagHomeExists = True
+        # if operation is create cache then discard chroot status
+        if cache:
+            self.clVars.Set('cl_chroot_status','off',True)
+        # get user home directory from cache
+        if not os.path.exists(homeDir) and not cache:
+            if self.getUserDirFromCache(userName,uid,gid,homeDir):
+                live = True
         # Создаем домашнюю директорию если ее нет
         if not os.path.exists(homeDir):
             flagHomeExists = False
             self.createUserDir(uid, gid, homeDir)
+        elif cache:
+            self.printERROR(_("Can not create cache for user %s")%userName+
+                        ", " + _("because home directory exists"))
+            return False
         # if live action then action update mutable params of profile (live)
         # else action is update user profile
         if live:
@@ -253,11 +264,76 @@ class desktop(share):
             self.printERROR(_("Can not apply user profile"))
             self.umountUserRes(homeDir)
             return False
+        if cache:
+            if not self.createCache(userName,uid,gid,homeDir):
+                self.printERROR(_("Can not create cache"))
+                return False
+            self.printSUCCESS(_("Cache for user %s home directory is created")%
+                    userName)
+            return True
         if not flagHomeExists:
             self.printSUCCESS(_("Created home dir %s")%homeDir + " ...")
         self.printSUCCESS(_("User account %s is configured")%userName + " ...")
         return True
 
+    def _cacheFileName(self,userName,uid,gid):
+        """Get cache user home directory file full path"""
+        return "/var/cache/calculate/{username}-{uid}-{gid}.tar.gz".format(
+            username=userName,
+            uid=uid,gid=gid)
+
+    def getUserDirFromCache(self,userName,uid,gid,homeDir):
+        """Get user home directory from cache"""
+        cacheFile = self._cacheFileName(userName,uid,gid)
+        if os.path.exists(cacheFile):
+            tarProcess = process("tar","xf",cacheFile,"-C",
+                            os.path.dirname(homeDir))
+            if tarProcess.failed():
+                self.printERROR(
+                    _("Can not create user home directory from cache"))
+                self._removeUserHomeDirectory(homeDir)
+                return False
+            self.printSUCCESS(_("Created home dir %s from cache")%
+                homeDir + " ...")
+            return True
+        return False
+
+    def _removeUserHomeDirectory(self,homeDir):
+        """Remove user home directory by rm with options --preserve-root
+
+        and --one-file-system for keep mount directories"""
+        rmProcess = process("rm","--one-file-system","--preserve-root",
+                            "-rf", homeDir)
+        if rmProcess.failed():
+            self.printERROR(_("Can not remove user home directory %s")%homeDir)
+            return False
+        return True
+
+    def createCache(self,userName,uid,gid,homeDir):
+        """Create cache file for user home directory"""
+        cacheFile = self._cacheFileName(userName,uid,gid)
+        cacheDir = os.path.dirname(cacheFile)
+        if os.path.exists(cacheFile):
+            try:
+                os.unlink(cacheFile)
+            except:
+                self.printERROR(_("Can not remove cache file %s")%cacheFile)
+                return False
+        elif not os.path.exists(cacheDir):
+            if not makeDirectory(cacheDir):
+                self.printERROR(_("Can not create %s directory")%cacheDir)
+                return False
+        if not os.access(cacheDir,os.W_OK):
+            self.printERROR(_("Write permission denied for %s directory")%
+                cacheDir)
+            return False
+        tarProcess = process("tar","cf",cacheFile,"-C",
+                        os.path.dirname(homeDir),os.path.basename(homeDir),
+                        "--one-file-system")
+        if tarProcess.failed():
+            self.printERROR(_("Can not create %s cache archive")%cacheFile)
+            return False
+        return self._removeUserHomeDirectory(homeDir)
 
     def getMountUserPaths(self, homeDir=False):
         """Находит пользовательские примонтированные пути"""
diff --git pym/cl_desktop_cmd.py pym/cl_desktop_cmd.py
index 0dab534..6b97724 100644
--- pym/cl_desktop_cmd.py
+++ pym/cl_desktop_cmd.py
@@ -37,6 +37,8 @@ DESCRIPTION = _("Create home directory for the new user account")
 # Опции командной строки
 CMD_OPTIONS = [{'longOption':"live",
                 'help':_("update only mutable parameters of user profile")},
+               {'longOption':"cache",
+                'help':_("create cache of user home directory")},
                {'longOption':"verbose",
                 'help':_("display the template is applied")},
                {'longOption':"set"},
@@ -146,7 +148,7 @@ class desktop_cmd(share_cmd):
     def createHome(self, optObj):
         """Создание домашней директории"""
         return self.logicObj.createHome(optObj.progress,optObj.live,
-            optObj.verbose)
+            optObj.verbose,optObj.cache)
 
     def install(self):
         """Инсталяция программы"""
