diff --git pym/core/client/cert_info.py pym/core/client/cert_info.py
index f996be1..ed0c195 100644
--- pym/core/client/cert_info.py
+++ pym/core/client/cert_info.py
@@ -75,7 +75,7 @@ def get_certifactions_for_host(host):
         server_host_name = client.service.get_server_host_name()
         del(client)
     except (urllib2.URLError, TransportError) as e:
-        log.debug(_('Failed to connect',)+': %s'% str(e))
+        log.debug(_('Failed to connect',) + _(': ') + str(e))
         return []
     except KeyboardInterrupt:
         log.debug(_("Manually interrupted"))
diff --git pym/core/client/cert_verify.py pym/core/client/cert_verify.py
index 579c340..c97958e 100644
--- pym/core/client/cert_verify.py
+++ pym/core/client/cert_verify.py
@@ -76,7 +76,7 @@ def verify(server_cert, crl_path, flag):
         if serverSerial == int(rvk.get_serial(), 16):
             print _("This certificate has been revoked!")
             print _("Serial")+': %s\n'%rvk.get_serial() + _("Revoke date") + \
-                                                    ': %s' %rvk.get_rev_date()
+                                                _(': %s')%rvk.get_rev_date()
             
             raise VerifyError('CRL Exception')
     return 0
diff --git pym/core/client/function.py pym/core/client/function.py
index 1aa0c16..f60a369 100644
--- pym/core/client/function.py
+++ pym/core/client/function.py
@@ -151,7 +151,7 @@ def create_obj(client, method_name):
     # Combine in a type
     if not pref:
         pref = sd.getprefix(str_ns)
-    for_factory = pref + ":" + str_type
+    for_factory = pref + _(":") + str_type
 
     NewType = client.factory.create(for_factory)
     return NewType
diff --git pym/core/client/pid_information.py pym/core/client/pid_information.py
index fcb1ea4..38ea3d8 100644
--- pym/core/client/pid_information.py
+++ pym/core/client/pid_information.py
@@ -78,7 +78,7 @@ def gen_pid_ls(client, pid_ls):
 
 def client_pid_info(client):
     """ get information about selected process (or about all) """
-    pid = raw_input ("PID: ")
+    pid = raw_input (_("PID") +_(": "))
     try:
         pid = int (pid)
     except:
diff --git pym/core/client/progressbar.py pym/core/client/progressbar.py
index a0a9c55..62fcd27 100644
--- pym/core/client/progressbar.py
+++ pym/core/client/progressbar.py
@@ -36,10 +36,10 @@ class ETA(object):
         return time.strftime('%H:%M:%S', time.gmtime(seconds))
     def update(self, pbar):
         if pbar.finished:
-            return _('Time').decode('utf-8') + ': %s' \
+            return _('Time').decode('utf-8') + _(': %s') \
                                     %self.format_time(pbar.seconds_elapsed)
         else:
-            return _('Time').decode('utf-8') + ': %s' \
+            return _('Time').decode('utf-8') + _(': %s') \
                                     %self.format_time(pbar.seconds_elapsed)
 
 class Percentage(object):
diff --git pym/core/result_viewer.py pym/core/result_viewer.py
index 7bf8b51..2929f2b 100644
--- pym/core/result_viewer.py
+++ pym/core/result_viewer.py
@@ -292,14 +292,14 @@ class TaskState(object):
     @echo_on
     def askQuestion(self, message):
         self.parent.printer("\n")
-        return raw_input(message + ":")
+        return raw_input(message + _(":"))
 
     def askPassword(self, message, twice):
         from calculate.lib.utils.common import getpass
         if self.parent.terminal_info.is_boot_console():
             set_active_tty(1)
 
-        text1 = "%s: " % message
+        text1 = _("%s: ") % message
         if not twice:
             return getpass.getpass(text1)
         text2 = _('Repeat: ')
diff --git pym/core/server/local_call.py pym/core/server/local_call.py
index 3a471e5..964d134 100644
--- pym/core/server/local_call.py
+++ pym/core/server/local_call.py
@@ -384,7 +384,7 @@ class Display(object):
     def print_info(self, label, value):
         GREEN = TextState.Colors.GREEN
         self.display_asterisk(GREEN)
-        self._print("%s: " % label)
+        self._print(_("%s: ") % label)
         WHITE = TextState.Colors.WHITE
         self._print.foreground(WHITE)(value)
         self._print("\n")
@@ -392,7 +392,7 @@ class Display(object):
     def print_label(self, label):
         GREEN = TextState.Colors.GREEN
         self.display_asterisk(GREEN)
-        self._print("%s: " % label)
+        self._print(_("%s: ") % label)
         self._print("\n")
 
     def display_asterisk(self, color):
diff --git pym/core/server/methods_func.py pym/core/server/methods_func.py
index 8759e10..b880fd8 100644
--- pym/core/server/methods_func.py
+++ pym/core/server/methods_func.py
@@ -541,7 +541,7 @@ def collect_object(client, param_object, view, args, wait_thread=None,
                 if wait_thread:
                     wait_thread.pause()
                 label = field.label or _("Password")
-                password=get_password("%s: "%label,
+                password=get_password(label+_(": "),
                                       _('Repeat password: '),
                                       getfromstdin=stdin_passwd,
                                       needrepeat=not "one" in field.type)
diff --git pym/core/setup_package.py pym/core/setup_package.py
index 32c3e54..7316b7a 100644
--- pym/core/setup_package.py
+++ pym/core/setup_package.py
@@ -306,7 +306,7 @@ class UpdateConfigs(UpdateLogger):
             method_names = {value[0]:value[2] for key,value in 
                             LoadedMethods.conMethods.items()}
             self.printSUCCESS(
-                _("Calculate core is executing follow tasks now"))
+                _("Calculate core is executing the following tasks"))
             mult = _print.bold("*")
             for pid in pid_list:
                 name = pid['name']
@@ -361,12 +361,13 @@ class PackageUpdater(UpdateConfigs): #,updateUserConfigs):
     def updateConfig(self):
         if not os.path.exists('/etc/calculate/calculate.env') and \
             not (dv.Get('cl_core_pkg_name') in ('calculate-utilities',
+                                                'calculate-utils',
                                                 'calculate-install') and
                  getTupleVersion(dv.Get('cl_core_pkg_version')) >=
                  getTupleVersion("3.1.0_alpha4")):
             self.printWARNING(
                 _("Configuration skipping until "
-                  "calculate-utilities are updated"))
+                  "calculate-utils are updated"))
             return True
         self.initVars(dv)
         clVars = DataVars()
