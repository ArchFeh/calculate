diff --git core/result_viewer.py core/result_viewer.py
index 18d6e88..c256da3 100644
--- core/result_viewer.py
+++ core/result_viewer.py
@@ -223,7 +223,7 @@ class TaskState(object):
                 no = _print.foreground(no_color)("No")
                 white_message = _print.foreground(Colors.WHITE)(message)
                 ask = raw_input(white_message + ' (%s/%s): ' % (yes, no))
-            except KeyboardInterrupt:
+            except (EOFError,KeyboardInterrupt):
                 ask = 'no'
                 print
             if ask.lower() in ['n', 'no']:
@@ -274,7 +274,7 @@ class TaskState(object):
             else:
                 try:
                     ask = raw_input(full_message)
-                except KeyboardInterrupt:
+                except (EOFError,KeyboardInterrupt):
                     printer("\n")
                     raise KeyboardInterrupt
             ask = ask.lower()
diff --git core/server/func.py core/server/func.py
index 1e0f968..5ed1e5b 100644
--- core/server/func.py
+++ core/server/func.py
@@ -21,6 +21,7 @@ from os import path
 import traceback
 from traceback import print_exc
 from calculate.lib.cl_log import log
+from calculate.lib.utils.colortext import convert_console_to_xml
 from api_types import ReturnProgress,ViewParams,Integer,ViewInfo
 from loaded_methods import LoadedMethods
 from calculate.lib.cl_lang import setLocalTranslate,getLazyLocalTranslate
@@ -28,6 +29,7 @@ setLocalTranslate('cl_core3',sys.modules[__name__])
 __ = getLazyLocalTranslate(_)
 
 from calculate.lib.utils.files import process,readFile,processProgress
+from calculate.lib.datavars import DataVarsError
 from calculate.lib.cl_template import TemplatesError
 from calculate.lib.utils.content import getCfgFiles
 from itertools import *
@@ -61,6 +63,7 @@ class CommonMethods:
             data = data[FIRST]
             for i,s in enumerate(list(process("diff","-Nu",
                        orig,data[CFGFNAME]))):
+                s = convert_console_to_xml(s)
                 if s.startswith('+') and i>1:
                     out.append('<font color="green">%s</font>'%s)
                 elif s.startswith('-') and i>1:
@@ -71,9 +74,9 @@ class CommonMethods:
             self.printSUCCESS(_("({one} of {_all}) -- {fname}").format(
                 one=ind+1,_all=maxInfo,fname=orig))
             answ = self.askChoice(_("Choose a configuration action:"),
-                    answers=(("zap new",_("Zap new")),
-                             ("use new",_("Use new")),
-                             ("next",_("Next"))))
+                                  answers=(("zap new", _("Zap new")),
+                                           ("use new", _("Use new")),
+                                           ("next", _("Next"))))
             if answ == "next":
                 continue
             elif answ == "use new":
@@ -1691,6 +1694,14 @@ class WsdlMeta(type):
         def wrapper(self,sid,params):
             dv = self.get_cache(sid,kwargs["method_name"],"vars")
             langChanged = False
+            if kwargs["groups"]:
+                def group(*args,**kwargs):
+                    if isinstance(kwargs.get('normal',()), (unicode, str)):
+                        raise DataVarsError(_("Wrong normal varaiable list"))
+                    if isinstance(kwargs.get('expert',()), (unicode, str)):
+                        raise DataVarsError(_("Wrong expert varaiable list"))
+                for gr in kwargs['groups']:
+                    gr(group)
             if not dv:
                 dv = getattr(self,"%s_vars"%kwargs["method_name"])()
                 if hasattr(params,"clienttype"):
diff --git core/server/gen_pid.py core/server/gen_pid.py
index d3b4d46..e0915da 100644
--- core/server/gen_pid.py
+++ core/server/gen_pid.py
@@ -19,6 +19,7 @@ from os import path
 import random
 from calculate.lib.utils.files import listDirectory
 from calculate.lib.utils.tools import ignore
+import socket
 
 from cert_cmd import find_cert_id
 
@@ -48,7 +49,7 @@ def search_worked_process(method_name, clVars,
                             status['status'] in statuses):
                     if path.exists(path.join("/proc", str(status['os_pid']))):
                         yield status['os_pid']
-            except (ValueError, KeyError, EOFError, OSError):
+            except (socket.error, ValueError, KeyError, EOFError, OSError):
                 pass
 
     return list(generator())
