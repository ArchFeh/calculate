diff --git core/client/sid_func.py core/client/sid_func.py
index 16cf68e..09ee616 100644
--- core/client/sid_func.py
+++ core/client/sid_func.py
@@ -100,4 +100,4 @@ def client_session_info(client):
         print _("Failed to get data")
         return 1
     return 0
-    
\ No newline at end of file
+    
diff --git core/server/cert_cmd.py core/server/cert_cmd.py
index 0f72d5c..f52b02e 100644
--- core/server/cert_cmd.py
+++ core/server/cert_cmd.py
@@ -1290,6 +1290,10 @@ def parse():
         '-f', '--force', action='store_true', default=False,
         dest = 'no_questions', help=_('silent during the process'))
     parser.add_argument(
+        '-P', action='store_true', default=False,
+        dest = 'stdin_passwd',
+        help=_('use passwords for the users accounts from standard input'))
+    parser.add_argument(
         '--variable', type=str, dest='variable', 
         help=_("display the value for the specified variable "
                "(section.variablename). If section skipped then use "
diff --git core/server/methods_func.py core/server/methods_func.py
index 41d4246..fa5338d 100644
--- core/server/methods_func.py
+++ core/server/methods_func.py
@@ -17,13 +17,27 @@
 
 import sys, os
 from calculate.lib.utils.common import getpass
+from calculate.lib.cl_print import color_print
 from calculate.lib.cl_lang import setLocalTranslate
 setLocalTranslate('cl_core',sys.modules[__name__])
 
+colorPrint = color_print()
+
 def _print (*args):
     print " ".join(map(lambda x:unicode(x).encode('utf-8'),args))
 
-def get_password(text1 = None, text2 = None):
+def get_password(text1 = None, text2 = None, getfromstdin=False):
+    if getfromstdin:
+        try:
+            passwd = ''
+            while not passwd:
+                passwd = sys.stdin.readline()
+                if not passwd:
+                    return None
+                passwd = passwd.rstrip('\n')
+            return passwd
+        except:
+            return None
     if not text1:
         text1 = _('Password: ')
     if not text2:
@@ -94,6 +108,14 @@ class RawAndDefaultsHelpFormatter(argparse.HelpFormatter):
         return _textwrap.wrap(text.decode('utf-8'), width)
 
 def get_method_argparser(view, args, cl_core = False):
+    """
+    Get argparser by ViewInfo get from WSDL server (or stub)
+
+    cl_core  - argparser for cl_core (local call)
+    """
+    # get list (local View) or first element of tuple (WSDL View)
+    getlist = (lambda x:x) if cl_core else (lambda x:x[0])
+    error_flag = False
     method = args.method
     if cl_core:
         progr = os.path.basename(sys.argv[0])
@@ -102,86 +124,47 @@ def get_method_argparser(view, args, cl_core = False):
 
     parser = argparse.ArgumentParser(prog=progr, add_help=False,
                                  formatter_class=RawAndDefaultsHelpFormatter)
-#    parser = argparse.ArgumentParser(prog=progr, add_help=False)
-    if type(view.groups) == list:
-        # for local call method
-        groups = view.groups
-    else:
-        groups = view.groups[0]
 
-    for Group in groups:
+    for Group in getlist(view.groups):
         if not Group.fields:
             continue
         group = parser.add_argument_group(Group.name)
-        if type(Group.fields) == list:
-            # for local call method
-            fields = Group.fields
-        else:
-            fields = Group.fields[0]
-        for field in fields:
+        for field in getlist(Group.fields):
             if field.element == 'error':
-	        print field.label
+                error_flag = True
+                colorPrint.printERROR(field.label)
             elif field.opt:
-                action = None
-                arg_type = str
+                opt = field.opt
+                data = {'dest':field.name,'help' : opt.help}
+                if field.type == "password":
+                    data['action'] = "store_true"
+                else:
+                    data['type'] = str
                 if field.element in ['check', 'check_tristate']:
-                    arg_type = bool
+                    data['type'] = bool
                 elif field.element == 'radio' and field.type == 'bool':
-                    arg_type = bool
-                elif field.element == 'table' and field.type != 'steps':
-                    action = 'append'
-
-                opt = field.opt
-                metavalue = opt.metavalue if opt.metavalue \
-                                          else field.name.upper()
-
-                if ':' in metavalue:
-                    metavalue = field.name.upper()
-
+                    data['type'] = bool
+                if field.element == 'table' and field.type != 'steps':
+                    data['action'] = 'append'
+
+                if data.get('action') != "store_true":
+                    data['metavar'] = opt.metavalue if opt.metavalue \
+                                              else field.name.upper()
+                    if ':' in data['metavar']:
+                        data['metavar'] = field.name.upper()
                 try:
-                    if arg_type == str:
-                        if opt.shortopt and opt.longopt:
-                            group.add_argument(opt.shortopt, opt.longopt,
-                                 type = arg_type, dest=field.name, metavar = \
-                                 metavalue, action = action, help = opt.help)
-                        elif opt.shortopt and not opt.longopt:
-                            group.add_argument(opt.shortopt,
-                                 type = arg_type, dest=field.name, metavar = \
-                                 metavalue, action = action, help = opt.help)
-                        elif opt.longopt and not opt.shortopt:
-                            group.add_argument(opt.longopt,
-                                 type = arg_type, dest=field.name, metavar = \
-                                 metavalue, action = action, help = opt.help)
-
-#                    elif arg_type == bool:
-#                        if opt.shortopt and opt.longopt:
-#                            group.add_argument(opt.shortopt, opt.longopt,
-#                                        action='store_true', dest=field.name,
-#                                        default=None, help = opt.help)
-#                        elif opt.shortopt and not opt.longopt:
-#                            group.add_argument(opt.shortopt,
-#                                        action='store_true', dest=field.name,
-#                                        default=None, help = opt.help)
-#                        elif opt.longopt and not opt.shortopt:
-#                            group.add_argument(opt.longopt,
-#                                        action='store_true', dest=field.name,
-#                                        default=None, help=opt.help)
-                    elif arg_type == bool:
-                        if opt.shortopt and opt.longopt:
-                            group.add_argument(opt.shortopt, opt.longopt,
-                                        type = str, dest=field.name,
-                                        help = opt.help)
-                        elif opt.shortopt and not opt.longopt:
-                            group.add_argument(opt.shortopt, type = str,
-                                               dest=field.name, help=opt.help)
-                        elif opt.longopt and not opt.shortopt:
-                            group.add_argument(opt.longopt, type = str,
-                                               dest=field.name, help=opt.help)
+                    opts = filter(None,[opt.shortopt,opt.longopt])
+                    group.add_argument(*opts,**data)
                 except argparse.ArgumentError:
                     continue
+    if error_flag:
+        raise Exception
     return parser
 
 def set_obj_item(client, param_object, field_name, value):
+    """
+    Set value for Info object. By client detect (local or WSDL call)
+    """
     if client:
         param_object.__setitem__(field_name, value)
     else:
@@ -306,12 +289,13 @@ def check_result_msg(method_result, view, input_error_dict = {}):
                 if field.name == error.field:
                     if field.opt.shortopt or field.opt.longopt:
                         params_text += _('Wrong option ')
-                        params_text += ', '.join(filter(None,
+                        params_text += ' '+', '.join(filter(None,
                             [field.opt.shortopt, field.opt.longopt])) \
                             + '. '
 
-        red = '\033[31m * \033[0m'
-        _print ('\r' + red + params_text + error.message)
+        sys.stdout.write('\r')
+        sys.stdout.flush()
+        colorPrint.printERROR(params_text + error.message)
 
     if len(password_errors) < len(method_result):
         return None
@@ -323,7 +307,8 @@ def check_result_msg(method_result, view, input_error_dict = {}):
             return None
         return password_errors
 
-def get_param_pwd(check_res, view, param_object, client = None):
+def get_param_pwd(check_res, view, param_object, client = None,
+                  stdin_passwd=False):
     if hasattr (view.groups, 'GroupField'):
         groups = view.groups.GroupField
     else:
@@ -338,18 +323,22 @@ def get_param_pwd(check_res, view, param_object, client = None):
             for field in fields:
                 if field.name == pwd_field:
                     if field.element == 'table':
-                        value = get_password()
+                        value = get_password(getfromstdin=stdin_passwd)
                         if value == None:
                             raise KeyboardInterrupt
                         set_table_pwd(client, param_object, field, value)
                     else:
-                        value = get_password()
+                        value = get_password(getfromstdin=stdin_passwd)
                         if value == None:
                             raise KeyboardInterrupt
                         setattr(param_object, pwd_field, value)
     return param_object
 
-def collect_object(client, param_object, view, args, wait_thread = None):
+def collect_object(client, param_object, view, args,wait_thread = None,
+                   stdin_passwd = False):
+    """
+    Collect Info object by args
+    """
     steps = None
     if type(view.groups) == list:
         # for local call method
@@ -413,10 +402,20 @@ def collect_object(client, param_object, view, args, wait_thread = None):
                                             val)
 
             elif field.element in ['input', 'openfile',\
-                                   'file', 'password', 'radio']:
+                                   'file', 'radio']:
                 param_object = set_obj_item(client, param_object, field.name,
                                             _getattr(args, field.name))
-
+            elif field.element in ['password'] and _getattr(args, field.name):
+                if wait_thread:
+                    wait_thread.pause()
+                password=get_password("%s: "%field.label,_('Repeat password: '),
+                                      getfromstdin=stdin_passwd)
+                if password is None:
+                    raise KeyboardInterrupt
+                param_object = set_obj_item(client, param_object, field.name,
+                                            password)
+                if wait_thread:
+                    wait_thread.resume()
             elif field.element in ['combo', 'comboEdit']:
                 value = _getattr(args, field.name)
                 if value:
@@ -448,7 +447,8 @@ def collect_object(client, param_object, view, args, wait_thread = None):
 
             elif field.element == 'table' and field.type != 'steps':
                 val = _getattr(args, field.name)
-                value = collect_table(field, val, client, wait_thread)
+                value = collect_table(field, val, client, wait_thread,
+                                      stdin_passwd)
                 param_object = set_obj_item(client, param_object, field.name,
                                             value)
 
@@ -459,7 +459,8 @@ def collect_object(client, param_object, view, args, wait_thread = None):
 
     return param_object, steps
 
-def collect_table(field, val_list, client, wait_thread = None):
+def collect_table(field, val_list, client, wait_thread = None,
+                  stdin_passwd = False):
     if not val_list:
         return None
     val_table = map(lambda x: x.split(':'), val_list)
@@ -500,7 +501,8 @@ def collect_table(field, val_list, client, wait_thread = None):
                     sys.stdout.write('\r')
                     sys.stdout.flush()
                 password=get_password(_('Password for %s: ')%val_table[i][0],\
-                               _('Repeat password for %s: ') %val_table[i][0])
+                               _('Repeat password for %s: ') %val_table[i][0],
+                               getfromstdin=stdin_passwd)
                 if password == None:
                     raise KeyboardInterrupt
         temp_row = []
diff --git core/server/replace_class.py core/server/replace_class.py
index f3569b9..970e8d0 100644
--- core/server/replace_class.py
+++ core/server/replace_class.py
@@ -220,6 +220,11 @@ def cout_progress(string = None):
     sys.stdout.flush()
 
 def local_method(metaclass, args):
+    """
+    Call method from metaclass, check method existing.
+
+    Generate help, for method, run method by 'call_method'.
+    """
     import os
     sym_link = os.path.basename(sys.argv[0])
     if sym_link != 'cl-core':
@@ -250,18 +255,29 @@ def local_method(metaclass, args):
             view = getattr(metaObject, method_view_name)(0, view_obj)
         except AttributeError:
             colorPrint.printERROR (_('Method not found: '), method_view_name)
-        method_parser = get_method_argparser(view, args, cl_core = True)
+
+        try:
+            method_parser = get_method_argparser(view, args, cl_core = True)
+        except Exception as e:
+            metaObject.clear_cache(0, method_name)
+            return  1
         method_parser.print_help()
     else:
         try:
             call_method(metaObject, args, colorPrint)
         except (KeyboardInterrupt, EOFError):
             colorPrint.printERROR(_('Interrupted by the user'))
+        except Exception:
+            pass
 #            print 'Error: ', e
     metaObject.clear_cache(0, method_name)
 
 def call_method(metaObject, args, colorPrint):
+    """
+    Function for call method through metaObject and args
+    """
     method_name = args.method
+    stdin_passwd = args.stdin_passwd
     method_view_name = method_name + '_view'
     metaObject.no_progress = args.no_progress
     view_obj = ViewInfo()
@@ -287,7 +303,8 @@ def call_method(metaObject, args, colorPrint):
                 _print (_('Unknown parameter'), i)
                 return 1
 
-    param_object, steps = collect_object(None, param_object, view, args)
+    param_object, steps = collect_object(None, param_object, view, args,
+                                         stdin_passwd=stdin_passwd)
     if view.has_brief:
         setattr(param_object, 'CheckOnly', True)
         check_res = {}
@@ -303,7 +320,8 @@ def call_method(metaObject, args, colorPrint):
                     return None
                 else:
                     param_object = get_param_pwd(check_res, view,
-                                                 param_object)
+                                                 param_object,
+                                                 stdin_passwd=stdin_passwd)
             else:
                 break
 
@@ -366,9 +384,17 @@ def create_param_object(view):
             param_object._type_info[field.name] = None
     return param_object
 
+def print_brief(view, brief_label):
+    for Group in view.groups:
+        if Group.name:
+            if not Group.fields:
+                continue
+        print_brief_group(Group.fields, Group.name)
+
 def print_brief_group(Fields, group_name):
-    if group_name:
-        _print ('\b'+group_name)
+    print_group_flag = False
+#    if group_name:
+#        _print ('\b'+group_name)
     uncompatible_count = 0
     colorPrint = color_print()
     for field in Fields:
@@ -377,6 +403,10 @@ def print_brief_group(Fields, group_name):
             continue
         if field.element in ['input', 'openfile']:
             value = field.value if field.value else ''
+            if not print_group_flag:
+                if group_name:
+                    print_group_flag = True
+                    _print ('\b'+group_name)
             colorPrint.printSUCCESS('%s: %s' %(field.label, value))
 
         elif field.element in ['combo', 'comboEdit', 'radio', 'file']:
@@ -396,6 +426,10 @@ def print_brief_group(Fields, group_name):
                 value = ', '.join(value)
             else:
                 value = field.value if field.value else ''
+            if not print_group_flag:
+                if group_name:
+                    print_group_flag = True
+                    _print ('\b'+group_name)
             colorPrint.printSUCCESS('%s: %s' %(field.label, value))
 
         elif field.element in ['multichoice', 'multichoice_add',\
@@ -422,12 +456,20 @@ def print_brief_group(Fields, group_name):
                 value = ', '.join(field.listvalue)
             elif not value:
                 value = field.value if field.value else ''
+            if not print_group_flag:
+                if group_name:
+                    print_group_flag = True
+                    _print ('\b'+group_name)
             colorPrint.printSUCCESS('%s: %s' %(field.label, value))
 
 #        elif field.element == 'label':
 #            print field.label
 
         elif field.element == 'error':
+            if not print_group_flag:
+                if group_name:
+                    print_group_flag = True
+                    _print ('\b'+group_name)
             colorPrint.printERROR(field.label)
 
         elif field.element in ['check', 'check_tristate']:
@@ -439,6 +481,10 @@ def print_brief_group(Fields, group_name):
                 value = _('auto')
             else:
                 value = field.value
+            if not print_group_flag:
+                if group_name:
+                    print_group_flag = True
+                    _print ('\b'+group_name)
             colorPrint.printSUCCESS('%s: %s' %(field.label, value))
 
         elif field.element == 'table' and field.type != 'steps':
@@ -474,6 +520,10 @@ def print_brief_group(Fields, group_name):
             data = []
             for body_row in body:
                 data.append(map(lambda x: x if x else '', body_row))
+            if not print_group_flag:
+                if group_name:
+                    print_group_flag = True
+                    _print ('\b'+group_name)
             colorPrint.printSUCCESS(field.label+': ')
             res = printTable(data, head)
             sys.stdout.flush()
@@ -481,15 +531,8 @@ def print_brief_group(Fields, group_name):
         else:
             uncompatible_count += 1
 
-    if uncompatible_count == len (Fields) and group_name:
-        colorPrint.printSUCCESS(_('Not used'))
-
-def print_brief(view, brief_label):
-    for Group in view.groups:
-        if Group.name:
-            if not Group.fields:
-                continue
-        print_brief_group(Group.fields, Group.name)
+#    if uncompatible_count == len (Fields) and group_name:
+#        colorPrint.printSUCCESS(_('Not used'))
 
 def printTable(data, header=None ):
     res = []
diff --git core/server/server_class.py core/server/server_class.py
index 9613a9a..87ea6da 100644
--- core/server/server_class.py
+++ core/server/server_class.py
@@ -497,4 +497,4 @@ class OpenSSLAdapter (pyOpenSSLAdapter):
             c.load_verify_locations(self.certificate_chain)
 
         c.use_certificate_file(self.certificate)
-        return c
\ No newline at end of file
+        return c
diff --git scripts/calculate-core scripts/calculate-core
index fd0f448..482068f 100644
--- scripts/calculate-core
+++ scripts/calculate-core
@@ -28,8 +28,8 @@ start() {
     
 	if ! /usr/sbin/cl-core --check &>/dev/null
 	then
-		ADMINUSER=`/usr/sbin/cl-core --variable install.cl_migrate_user[1]`
-		[[ -n $ADMINUSER ]] || ADMINUSER=`/usr/sbin/cl-core --variable install.cl_migrate_user[0]`
+		ADMINUSER=`/usr/sbin/cl-core --variable install.cl_migrate_user[0]`
+		[[ -n $ADMINUSER ]] || ADMINUSER=root
 		/usr/sbin/cl-core --bootstrap $ADMINUSER
 	fi
 
diff --git scripts/cl-core scripts/cl-core
index f66c1e1..a374f80 100644
--- scripts/cl-core
+++ scripts/cl-core
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/env python2
 #-*- coding: utf-8 -*-
 
 # Copyright 2012 Calculate Ltd. http://www.calculate-linux.org
