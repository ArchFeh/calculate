diff --git pym/cl_assemble.py pym/cl_assemble.py
index 7b88b52..dd48810 100644
--- pym/cl_assemble.py
+++ pym/cl_assemble.py
@@ -25,7 +25,8 @@ from os import path
 from cl_template import template,iniParser
 from cl_utils import process,pathJoin,getRunCommands,getTupleVersion,isMount,\
                      isFstabMount,childMounts,_toUNICODE,cmpVersion, \
-                     listDirectory
+                     listDirectory, readFile, removeDir, getPkgInstalled, \
+                     getTupleVersion, isPkgInstalled,reVerSplitToPV
 from subprocess import STDOUT,PIPE
 from cl_print import color_print
 from cl_datavars import DataVars
@@ -122,6 +123,12 @@ class cl_assemble(color_print):
               'hideout':True,
               'message':_("Configuring with %s templates")% "assemble"
              },
+             {'command':"_migratePortage()",
+              'foraction':('syncupdate',),
+              'step':"migrate",
+              'hideout':True,
+              'message':_("Checking portage repository")
+             },
              {'command':'eix-sync',
               'progname':'eix-sync',
               'message':_("Updating portages"),
@@ -143,18 +150,19 @@ class cl_assemble(color_print):
              {'command':'emerge --noreplace calculate-meta',
               'step':'meta'},
              # update packages with fix newuse
-             {'command':'emerge -D --newuse world',
-              'step':'newuse'},
+             #{'command':'emerge -D --newuse world',
+             # 'step':'newuse'},
              # update world
-             {'command':'emerge -uD  world',
+             {'command':'emerge -uDN  world',
               'step':'update'},
              # depclean
              {'command':'emerge --depclean',
               'step':'depclean'},
              # module rebuild
-             {'command':'module-rebuild -X rebuild',
+             {'command':'modulesRebuild()',
               'step':'module',
               'condition':'sys-kernel/.*source.*',
+              'message':_("Executing '%s'")%'module-rebuild -X rebuild',
               'progname':'module-rebuild'},
              # xorg module rebuild
              {'command':'emerge @x11-module-rebuild',
@@ -329,11 +337,12 @@ class cl_assemble(color_print):
             self.printSUCCESS(_("File system: %s")%
                     self.clVars.Get('os_assemble_root_format'))
         if self.clVars.Get('cl_assemble_sync'):
-            self.printSUCCESS(_("Portage rsync mirror: %s")%
+            self.printSUCCESS(_("Portage mirror: %s")%
                         self.clVars.Get('cl_assemble_sync'))
         self.printSUCCESS(_("Stage for assembling: %s")%
             (self.clVars.Get('cl_assemble_image') or _("none")))
-        if self.clVars.Get('cl_assemble_image_type') == "stage":
+        if self.clVars.Get('cl_assemble_image_type') == "stage" and \
+            self.clVars.Get('cl_assemble_branch') == '':
             self.printSUCCESS(_("Portage snapshot for assemble: %s")%
             (self.clVars.Get('cl_assemble_snapshot_portage') or _("none")))
         self.defaultPrint("%s\n"%_("Checking up before assemble"))
@@ -463,6 +472,7 @@ class cl_assemble(color_print):
                       'os_assemble_root_dev',
                       'cl_assemble_path',
                       'cl_assemble_sync',
+                      'cl_assemble_branch',
                       'cl_assemble_buildpkg_set',
                       'cl_assemble_pkgdir')
 
@@ -509,8 +519,77 @@ class cl_assemble(color_print):
                 DirectoryDistributive(target,parent=self.targetDistr)
             self.printByResult(True)
 
+    def _migratePortage(self):
+        if self.clVars.Get('cl_assemble_branch'):
+            if not isPkgInstalled('dev-vcs/git'):
+                self.printMessageForTest(_("Installing %s")%'dev-vcs/git')
+                self.runChroot("emerge -1 git")
+            portagePath = pathJoin(self.assemblePath,'usr/portage')
+            gitConfig = pathJoin(portagePath, '.git/config')
+            # check for repository contains .git and 
+            # this git from cl_assemble_sync url
+            reUrl = re.compile('url\s*=\s*(.*)')
+            gitUrl = reUrl.search(readFile(gitConfig))
+            # need remove portage and reget from sync address
+            self.printMessageForTest(_("Fetching portages"))
+            if not gitUrl or \
+                gitUrl.group(1).strip() != self.clVars.Get('cl_assemble_sync'):
+                if path.exists(portagePath):
+                    removeDir(portagePath)
+                getPortage = "git clone --depth 1 -n {gitrep} {portage}".format(
+                    gitrep=self.clVars.Get('cl_assemble_sync'),
+                    portage='/usr/portage')
+                self.runChroot(getPortage)
+            else:
+                getPortage = "cd {portage};git fetch".format(
+                    gitrep=self.clVars.Get('cl_assemble_sync'),
+                    portage='/usr/portage')
+                self.runChroot(getPortage)
+            updateBranch= "cd {portage};git checkout {branch}".format(
+                    portage='/usr/portage',
+                    branch=self.clVars.Get('cl_assemble_branch'))
+            self.runChroot(updateBranch)
+
+            portagePkg = getPkgInstalled('sys-apps/portage',
+                                         prefix=self.assemblePath)
+            portageMinVer = getTupleVersion('2.2.0_alpha72')
+            if portagePkg and \
+                getTupleVersion(portagePkg[0]['PVR']) < portageMinVer:
+                lastEbuild = \
+                    sorted(
+                    map(lambda x:(x['P'],
+                                  getTupleVersion(x['PVR'])),
+                    map(lambda x:reVerSplitToPV(x),
+                    filter(lambda x:x.endswith('ebuild'),
+                    listDirectory(pathJoin(self.assemblePath,
+                                           'usr/portage/sys-apps/portage'))
+                    ))),key=lambda x:x[1])
+                if len(lastEbuild) > 1:
+                    lastEbuild = lastEbuild[-2][0]
+                else:
+                    return
+                self.printMessageForTest(_("Installing %s")%"portage")
+                emergePortage = \
+                    'ebuild /usr/portage/sys-apps/portage/%s digest merge'% \
+                    lastEbuild
+                self.runChroot(emergePortage)
+                restoreManifest = \
+                    'cd /usr/portage;git checkout sys-apps'
+                self.runChroot(restoreManifest)
+        else:
+            portagePath = pathJoin(self.assemblePath,'usr/portage')
+            gitConfig = pathJoin(portagePath, '.git/config')
+            if path.exists(gitConfig):
+                removeDir(portagePath)
+        if self.clVars.Get('cl_assemble_branch') in ('master','develop'):
+            updateBranch= "cd {portage};git checkout {branch}".format(
+                    portage='/var/lib/layman/calculate',
+                    branch=self.clVars.Get('cl_assemble_branch'))
+            self.runChroot(updateBranch)
+
     def _updatePackages(self):
         """Update portage and calculate overlay"""
+        self._migratePortage()
         emergeSync = "emerge --sync"
         self.printMessageForTest(_("Updating portages"))
         self.runChroot(emergeSync)
@@ -525,6 +604,11 @@ class cl_assemble(color_print):
         else:
             self.runChroot("layman -L")
             self.runChroot("layman -a calculate")
+        if self.clVars.Get('cl_assemble_branch') in ('master','develop'):
+            updateBranch= "cd {portage};git checkout {branch}".format(
+                    portage='/var/lib/layman/calculate',
+                    branch=self.clVars.Get('cl_assemble_branch'))
+            self.runChroot(updateBranch)
 
     def _updateMan(self):
         """Remove man, install man-db"""
@@ -610,7 +694,8 @@ class cl_assemble(color_print):
             pathAppMisc = pathJoin(self.assemblePath,'/var/db/pkg/app-misc')
             metaPackage = self.clVars.Get('cl_assemble_meta').rpartition('/')[2]
 
-            if not isinstance(self.sourceDistr,IsoDistributive):
+            if not isinstance(self.sourceDistr,IsoDistributive) and \
+                self.clVars.Get('cl_assemble_branch') == '':
                 self._unpackPortage()
 
             self._prepareMount()
@@ -738,10 +823,14 @@ class cl_assemble(color_print):
 
     def setSyncMirror(self,mirror):
         """Set sync mirror"""
-        reMirror = re.compile("^(rsync:)?/?/?([^:]+)$",re.S)
+        reMirror = re.compile("^(rsync:|git:)?/?/?([^:]+)$",re.S)
         res = reMirror.search(mirror)
         if res:
-            self.clVars.Set('cl_assemble_sync',"//%s"%res.groups()[1],True)
+            if res.groups()[0] == "git:":
+                self.clVars.Set('cl_assemble_sync',"git://%s"%res.groups()[1],True)
+            else:
+                self.clVars.Set('cl_assemble_sync',"//%s"%res.groups()[1],True)
+                self.clVars.Set('cl_assemble_branch','',True)
             return True
         else:
             return False
@@ -838,7 +927,7 @@ class cl_assemble(color_print):
                              % "Calculate Linux")
         self.printConfInfo()
         
-        command = "emerge -pv %s"%(self.clVars.Get('cl_assemble_meta') or 
+        command = "emerge -puNv %s %s"%(self.clVars.Get('cl_assemble_meta'), 
                                     "world")
         self.printSUCCESS(_("Checking dependencies")+ " ...")
         if self.runChroot(command, showProcess=True,
@@ -1267,6 +1356,21 @@ class cl_assemble(color_print):
                 _("An error occurred when executing the command")+
                   ":\n    %s"%self._getCommand(cmd.command))
 
+    def modulesRebuild(self):
+        """Run revdep-rebuild and check result"""
+        if not self.assemblePath:
+            self.assemblePath = \
+                self.clVars.Get('cl_assemble_path')
+        modulesFile = path.join(self.assemblePath,
+                               "var/lib/module-rebuild/moduledb")
+        # if file exists and not empty
+        if path.exists(modulesFile) and open(modulesFile,'r').read().strip():
+            cmd = self.runChroot("module-rebuild -X rebuild", showProcess=True)
+            if cmd.failed():
+                raise AssembleError(
+                    _("An error occurred when executing the command")+
+                      ":\n    %s"%self._getCommand(cmd.command))
+
     def setProfile(self,newprofile,isconfigure):
         """Set profile for assembling system"""
         newprofile = newprofile or ""
diff --git pym/cl_assemble_cmd.py pym/cl_assemble_cmd.py
index 046a2d5..64ea758 100644
--- pym/cl_assemble_cmd.py
+++ pym/cl_assemble_cmd.py
@@ -34,7 +34,7 @@ DESCRIPTION = _("Configure for assembling Calculate Linux")
 CMD_OPTIONS = [{'shortOption':"d",
                 'longOption':"disk",
                 'optVal':"DISK",
-                'help':_("partition intended for assemble")
+                'help':_("partition or directory intended for assemble")
                },
                {'shortOption':"p",
                 'longOption':"profile",
@@ -65,10 +65,10 @@ CMD_OPTIONS = [{'shortOption':"d",
                },
                {'longOption':"sync",
                 'optVal':"RSYNC",
-                'help':_("set the preferred rsync mirror for Portage")
+                'help':_("set the preferred mirror for Portage")
                },
-               {'longOption':"no-unmount",
-                'help':_("do not unmount the partition where the system"
+               {'longOption':"unmount",
+                'help':_("unmount the partition where the system"
                          " is being assembled, when an error occurs")
                },
                {'longOption':"no-buildpkg",
@@ -126,7 +126,7 @@ class assemble_cmd(share_cmd):
                 rootDev in self.logicObj.clVars.Get('cl_assemble_dev')) and \
                 not self.logicObj.tryUseAvailable():
                 self.optobj.error(
-                    _("disk must be specified with the '-d' option"))
+                    _("partition must be specified with the '-d' option"))
         if values.d:
             self.logicObj.clVars.Set('os_assemble_root_dev',values.d,True)
         if values.sync:
diff --git pym/cl_fill_assemble.py pym/cl_fill_assemble.py
index 98dcc12..a3f254d 100644
--- pym/cl_fill_assemble.py
+++ pym/cl_fill_assemble.py
@@ -339,6 +339,15 @@ class fillVars(installFillVars):
             val = self.getValueFromConfig(makepath,"SYNC")
             if val != False:
                 return val[6:]
+        return "git://git.calculate.ru/dev/portage.git"
+
+    def get_cl_assemble_branch(self):
+        """Preferred branch of git portage mirror"""
+        fromEnv = self._getFromEnv('cl_assemble_branch')
+        if fromEnv:
+            return fromEnv
+        if self.Get('cl_assemble_sync').startswith('git:'):
+            return "master"
         return ""
 
     def get_cl_assemble_source(self):
diff --git pym/cl_make_cmd.py pym/cl_make_cmd.py
index 63aa9c3..2728edd 100644
--- pym/cl_make_cmd.py
+++ pym/cl_make_cmd.py
@@ -55,6 +55,10 @@ CMD_OPTIONS = [{'shortOption':"D",
                 'optVal':"PROFILE",
                 'help':_("system profile ('list' to display all)")
                },
+               {'longOption':"sync",
+                'optVal':"PORTAGE",
+                'help':_("set the preferred mirror for Portage")
+               },
                {'longOption':"skipfirst",
                 'help':_("skip the first package when resuming the assemble")
                },
@@ -123,6 +127,10 @@ class make_cmd(assemble_cmd):
                     _("action must be specified: make (-m), break (--break),"
                       " update (-u|-U), apply templates (-T)"
                       " or check dependencies (-D)"))
+        if values.sync:
+            if not self.logicObj.setSyncMirror(values.sync):
+                self.optobj.error(
+                    _("wrong rsync mirror '%s'")%values.sync)
         return (values, args)
 
     def setAction(self):
diff --git pym/cl_vars_assemble.py pym/cl_vars_assemble.py
index 84592ac..693c5d5 100644
--- pym/cl_vars_assemble.py
+++ pym/cl_vars_assemble.py
@@ -54,6 +54,9 @@ class Data:
     # preferred rsync mirror for portages
     cl_assemble_sync = {}
 
+    # preferred git branch for portages
+    cl_assemble_branch = {'mode':'w'}
+
     # type of source (stage of system name)
     cl_assemble_source = {}
 
diff --git scripts/cl-assemble scripts/cl-assemble
index 0f15f75..201fada 100644
--- scripts/cl-assemble
+++ scripts/cl-assemble
@@ -52,6 +52,6 @@ if __name__ == "__main__":
         sys.exit(0)
     if assemble.isScratch():
         sys.exit(1)
-    if not assemble.configureSystem(options.f,options.no_unmount):
+    if not assemble.configureSystem(options.f,not options.unmount):
         sys.exit(1)
     sys.exit(0)
