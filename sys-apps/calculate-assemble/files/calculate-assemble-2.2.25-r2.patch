diff --git pym/cl_assemble.py pym/cl_assemble.py
index 7b88b52..6ff06e4 100644
--- pym/cl_assemble.py
+++ pym/cl_assemble.py
@@ -143,18 +143,19 @@ class cl_assemble(color_print):
              {'command':'emerge --noreplace calculate-meta',
               'step':'meta'},
              # update packages with fix newuse
-             {'command':'emerge -D --newuse world',
-              'step':'newuse'},
+             #{'command':'emerge -D --newuse world',
+             # 'step':'newuse'},
              # update world
-             {'command':'emerge -uD  world',
+             {'command':'emerge -uDN  world',
               'step':'update'},
              # depclean
              {'command':'emerge --depclean',
               'step':'depclean'},
              # module rebuild
-             {'command':'module-rebuild -X rebuild',
+             {'command':'modulesRebuild()',
               'step':'module',
               'condition':'sys-kernel/.*source.*',
+              'message':_("Executing '%s'")%'module-rebuild -X rebuild',
               'progname':'module-rebuild'},
              # xorg module rebuild
              {'command':'emerge @x11-module-rebuild',
@@ -1267,6 +1268,21 @@ class cl_assemble(color_print):
                 _("An error occurred when executing the command")+
                   ":\n    %s"%self._getCommand(cmd.command))
 
+    def modulesRebuild(self):
+        """Run revdep-rebuild and check result"""
+        if not self.assemblePath:
+            self.assemblePath = \
+                self.clVars.Get('cl_assemble_path')
+        modulesFile = path.join(self.assemblePath,
+                               "var/lib/module-rebuild/moduledb")
+        # if file exists and not empty
+        if path.exists(modulesFile) and open(modulesFile,'r').read().strip():
+            cmd = self.runChroot("module-rebuild -X rebuild", showProcess=True)
+            if cmd.failed():
+                raise AssembleError(
+                    _("An error occurred when executing the command")+
+                      ":\n    %s"%self._getCommand(cmd.command))
+
     def setProfile(self,newprofile,isconfigure):
         """Set profile for assembling system"""
         newprofile = newprofile or ""
