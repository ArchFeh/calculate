diff --git pym/cl_assemble.py pym/cl_assemble.py
index 3c5158f..285177d 100644
--- pym/cl_assemble.py
+++ pym/cl_assemble.py
@@ -100,8 +100,7 @@ class cl_assemble(color_print):
     # foraction - perform only for cl_action == value
     DEFAULT_FORACTION = ('make','syncupdate','update')
     ACTION_LIST = \
-            [
-             # emerge -e system first
+            [# emerge -e system first
              {'command':'emerge -e system',
               'message':_("First execute '%s'")%'emerge -e system',
               'step':'firstsystem',
@@ -621,9 +620,9 @@ class cl_assemble(color_print):
             self.printMessageForTest(_("Installing %s")%'dev-vcs/git')
             self.runChroot("USE='-perl -curl -webdav' emerge -1 git")
 
-        emergeSync = "emerge --sync"
+        emergeSync = "eix-sync"
         self.printMessageForTest(_("Updating portages"))
-        self.runChroot(emergeSync)
+        self.runChroot(emergeSync,showProcess=True)
 
         emergeLayman = "USE='git' emerge layman"
         self.printMessageForTest(_("Installing %s")%"layman")
@@ -761,8 +760,11 @@ class cl_assemble(color_print):
                                'sys-apps/calculate-core')
                 if path.exists(path.join(self.clVars.Get('cl_assemble_path'),
                              "usr/sbin/cl-core")):
-                    self.runChroot("/usr/sbin/cl-core --append-variable "
-                               "cl_merges=calculate-install")
+                    try:
+                        self.runChroot("/usr/sbin/cl-core --append-variable "
+                                   "cl_merges=calculate-install")
+                    except:
+                        pass
                 else:
                     self.runChroot("cl-install --install")
             else:
@@ -774,7 +776,7 @@ class cl_assemble(color_print):
 
             if not isinstance(self.sourceDistr,IsoDistributive):
                 self.printMessageForTest(_("Receiving kernel sources"))
-                self.runChroot('USE="-vmlinuz" emerge '
+                self.runChroot('USE="-minimal -vmlinuz" emerge '
                                "sys-kernel/calculate-sources")
 
             if not isinstance(self.sourceDistr,IsoDistributive):
@@ -917,7 +919,7 @@ class cl_assemble(color_print):
                 chrootCommand = process(*commandLine,stderr=ERRval,
                                 stdout=IOval,envdict=envdict)
             DEBUG(self._getCommand(chrootCommand.command))
-            if raiseError and chrootCommand.failed():
+            if chrootCommand.failed() and raiseError:
                 raise AssembleError(
                     _("An error occurred when executing the command")+
                       ":\n    %s"%self._getCommand(chrootCommand.command))
@@ -1450,7 +1452,7 @@ class cl_assemble(color_print):
 
     def checkDowngrades(self):
         """Run check downgrades"""
-        cmd = self.runChroot("FORMAT='{downgrade}%{FORMAT_ALL}{}' eix -I",
+        cmd = self.runChroot("/usr/bin/eix -T",
                              raiseError=False,
                              showProcess=True)
         return True
@@ -1662,7 +1664,7 @@ class cl_assemble(color_print):
         while drivers:
             repeatDrivers = []
             for verName,maskName,drvVer in drivers:
-                rePackage = re.compile("^\[ebuild[^\]]+]\s+(\S+)")
+                rePackage = re.compile("^\[ebuild[^\]]+]\s+([^\s:]+)")
                 checkprocess = self.runChroot(
                             "emerge -pv %s"%
                             drvVer, raiseError=False,joinErr=True)
diff --git pym/cl_assemble_cmd.py pym/cl_assemble_cmd.py
index 64ea758..942c2c1 100644
--- pym/cl_assemble_cmd.py
+++ pym/cl_assemble_cmd.py
@@ -141,8 +141,9 @@ class assemble_cmd(share_cmd):
                                self.logicObj.getValidSource())+["stage"]
             self.checkChoice("--source",values.source, validSources)
         if values.name:
+            print values.name.__repr__()
             if not self.logicObj.setName(values.name):
-                self.error(_("option %s")%"--name"+
+                self.optobj.error(_("option %s")%"--name"+
                     ": "+ _("invalid value '%s'"%values.name))
         return (values, args)
 
