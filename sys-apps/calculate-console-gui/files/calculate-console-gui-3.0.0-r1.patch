diff --git consolegui/application/MainFrameResult.py consolegui/application/MainFrameResult.py
index 13ec7c1..8f6f21f 100755
--- consolegui/application/MainFrameResult.py
+++ consolegui/application/MainFrameResult.py
@@ -139,8 +139,14 @@ class MainFrameRes(QtGui.QWidget):
                                                len(table.head[0]), self)
 
         if not hasattr (self, 'mytable'):
-            self.mytable = SelectedTableWidget(len(table.body[0]), \
-                                  len(table.head[0]), self, readonly = True)
+            if table.body:
+                len_body = len(table.body[0])
+            else: len_body = 1
+            if table.head:
+                len_head = len(table.head[0])
+            else: len_head = 1
+                self.mytable = SelectedTableWidget(len_body, len_head, self,
+                                                   readonly = True)
         list_head = table.head[0]
         self.mytable.setHorizontalHeaderLabels(list_head)
         for line in range(len(table.body[0])):
diff --git consolegui/application/mainframe.py consolegui/application/mainframe.py
index f001ba5..de578c2 100755
--- consolegui/application/mainframe.py
+++ consolegui/application/mainframe.py
@@ -41,7 +41,6 @@ class CallMethod(QtCore.QThread):
     def run(self):
         self.collect_sig.emit()
         time.sleep(0.1)
-
         self.call_meth_sig.emit()
 
 class TableValue():
@@ -106,7 +105,7 @@ class MainFrame(QtGui.QWidget):
         self.setObjectName('MainFrame')
         self.setStyleSheet("QWidget#MainFrame "
                            "{background-color: #E4E1E0;}")
-#        " QWidget { border: 1px solid blue;}")
+        #                  " QWidget { border: 1px solid blue;}")
         # x = 0 - space for image
         x = 1
         y = 0
@@ -500,6 +499,8 @@ class MainFrame(QtGui.QWidget):
         else:
             self.view_dict[field.name] = QCheckBox(self)
 
+        self.view_dict[field.name].setFocusPolicy(QtCore.Qt.NoFocus)
+
         if field.element.lower() == 'check_tristate' or self.expert:
             self.view_dict[field.name].setTristate()
             if field.value == 'on':
@@ -613,6 +614,7 @@ class MainFrame(QtGui.QWidget):
 
         for i in range(0,len(choice)):
             radio_but = RadioButton(self)
+            radio_but.setFocusPolicy(QtCore.Qt.NoFocus)
             if choice[i] == None:
                 choice[i] = ''
             try:
diff --git consolegui/application/more.py consolegui/application/more.py
index f68979f..17951c8 100755
--- consolegui/application/more.py
+++ consolegui/application/more.py
@@ -655,6 +655,7 @@ class ComboFileWgt(QtGui.QWidget):
 class ReadonlyCheckBox(QtGui.QCheckBox):
     def __init__(self, parent):
         QtGui.QCheckBox.__init__(self, parent)
+        self.setFocusPolicy(QtCore.Qt.NoFocus)
         self.disabled = False
 
     def mousePressEvent(self, event):
@@ -680,6 +681,7 @@ class CentralCheckBox (QtGui.QWidget):
             self.pCheckB.clicked.connect(self.change_label)
             self.change_label()
         self.setStyleSheet('padding: 0px; margin-left: 2px;')
+        self.setFocusPolicy(QtCore.Qt.NoFocus)
         self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
 
     def setChecked(self, check = True):
@@ -848,7 +850,21 @@ class MultipleChoiceDialog (QtGui.QWidget):
 
         p_m_wgt = QtGui.QWidget(self)
         p_m_layout = QtGui.QVBoxLayout(p_m_wgt)
-        # add '+' button
+
+         # add '++' button
+        self.plus_all_Button = QtGui.QPushButton(self)
+        plus_all_icons = ['go-last-view', 'go-last']
+        for icon in plus_all_icons:
+            icon_next = QtGui.QIcon.fromTheme(icon)
+            if not icon_next.isNull():
+                self.plus_all_Button.setIcon(icon_next)
+                break
+        if icon_next.isNull():
+            self.plus_all_Button.setText('->\n->')
+        self.plus_all_Button.clicked.connect(self.plus_all_items)
+        p_m_layout.addWidget(self.plus_all_Button)
+
+         # add '+' button
         self.plus_Button = QtGui.QPushButton(self)
         plus_icons = ['go-next-view','go-next']
         for icon in plus_icons:
@@ -876,6 +892,19 @@ class MultipleChoiceDialog (QtGui.QWidget):
 
         self.layout.addWidget(p_m_wgt, 2, 2, 2, 1)
 
+        # add '--' button
+        self.minus_all_Button = QtGui.QPushButton(self)
+        minus_all_icons = ['go-first-view', 'go-first']
+        for icon in minus_all_icons:
+            icon_next = QtGui.QIcon.fromTheme(icon)
+            if not icon_next.isNull():
+                self.minus_all_Button.setIcon(icon_next)
+                break
+        if icon_next.isNull():
+            self.minus_all_Button.setText('<-\n<-')
+        self.minus_all_Button.clicked.connect(self.minus_all_items)
+        p_m_layout.addWidget(self.minus_all_Button)
+
         #add right list
         self.right_ListWidget = ListWidget(self)
         self.right_ListWidget.itemDoubleClicked.connect(self.minus_item)
@@ -919,6 +948,14 @@ class MultipleChoiceDialog (QtGui.QWidget):
             self.add_LineEdit.setText('')
         self.add_LineEdit.setFocus()
 
+    def plus_all_items(self):
+        # get item in left_ListWidget and set this item in right_ListWidget
+        while True:
+            temp_item = self.left_ListWidget.takeItem(0)
+            if not temp_item:
+                return
+            self.right_ListWidget.addItem(temp_item)
+
     def plus_item(self):
         # get item in left_ListWidget and set this item in right_ListWidget
         temp_item = self.left_ListWidget.takeItem \
@@ -931,6 +968,14 @@ class MultipleChoiceDialog (QtGui.QWidget):
                                         (self.right_ListWidget.currentRow())
         self.left_ListWidget.addItem(temp_item)
 
+    def minus_all_items(self):
+        # get item in left_ListWidget and set this item in right_ListWidget
+        while True:
+            temp_item = self.right_ListWidget.takeItem(0)
+            if not temp_item:
+                return
+            self.left_ListWidget.addItem(temp_item)
+
     def ok_pressed(self):
         # save all lists and close this widget
         self._parent.Selected = []
@@ -961,12 +1006,12 @@ class MultipleChoiceDialog (QtGui.QWidget):
 class MultipleButton(QtGui.QPushButton):
     def __init__(self, text, parent):
         QtGui.QPushButton.__init__(self, text, parent)
-        self.setStyleSheet ("text-align: left;")
-        self.setContentsMargins(0, 0, 0, 0)
+        self.setStyleSheet("text-align: left; padding: 3px;")
+        self.setFocusPolicy(QtCore.Qt.NoFocus)
         
     def mousePressEvent(self, button = None):
         self.parent().mousePressEvent()
-        
+
 class MultipleChoice (QtGui.QWidget):
     Changed = QtCore.Signal()
     # multiple-choice widget displayed in the table
@@ -1369,6 +1414,7 @@ class SelectList(QtGui.QGroupBox):
         self.CheckBoxList = []
         for row in range(self.row_count):
             item = QtGui.QCheckBox(self.comments[row])
+            item.setFocusPolicy(QtCore.Qt.NoFocus)
             item.setStyleSheet("QCheckBox {margin: 2px;}"
             "QCheckBox:hover { margin: 2px;"
             "background-color: transparent;}")
@@ -1435,6 +1481,7 @@ class SelectList(QtGui.QGroupBox):
         self.addLineWgt.close()
 
         item = QtGui.QCheckBox(text)
+        item.setFocusPolicy(QtCore.Qt.NoFocus)
         item.setStyleSheet("QCheckBox {margin: 2px;}"
             "QCheckBox:hover { margin: 2px;"
             "background-color: transparent;}")
@@ -1515,6 +1562,7 @@ class ExpertWidget (QtGui.QPushButton):
         layout.addWidget(self.image_lbl)
 
         self.text_lbl = QtGui.QLabel(label, self)
+        self.setFocusPolicy(QtCore.Qt.NoFocus)
         layout.addWidget(self.text_lbl)
         layout.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
 
@@ -1704,7 +1752,7 @@ class PlusRow (QtGui.QWidget):
 
                 self.grid.addWidget(self.widget_dict[str(i)], x, y+1, \
                                     QtCore.Qt.AlignLeft)
-                x += 1                
+                x += 1
 
             elif element == 'combo':
                 ChoiceValue = field.tablevalue.values.ChoiceValue[i]
diff --git scripts/cl-console-gui scripts/cl-console-gui
index 9cc7777..867932e 100755
--- scripts/cl-console-gui
+++ scripts/cl-console-gui
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/env python2
 #-*- coding: utf-8 -*-
 
 import sys, os, pwd
