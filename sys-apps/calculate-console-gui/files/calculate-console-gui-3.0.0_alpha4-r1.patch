diff --git a/consolegui/application/ControlButton.py b/consolegui/application/ControlButton.py
index 498df08..8569b48 100644
--- a/consolegui/application/ControlButton.py
+++ b/consolegui/application/ControlButton.py
@@ -69,9 +69,7 @@ class ControlButtonWgt(QtGui.QWidget):
 
     def add_standart_button(self, Group, x, y, brief = False, \
                             next_button_text = None):
-        if hasattr (self, 'button_widget'):
-            self.hlayout.removeWidget(self.button_widget)
-            self.button_widget.close()
+        self.del_button()
         main_frame = self._parent.MainFrameWgt
         # add 1 (or 2) button ok (next) [and previous]
         self.button_widget = QtGui.QWidget(self)
@@ -97,7 +95,8 @@ class ControlButtonWgt(QtGui.QWidget):
 #            self.prev_button.clicked.connect(self.button_enabled)
             self.prev_button.setMinimumWidth(62)
             self.prev_button.setFixedHeight(38)
-            end_layout.addWidget(self.prev_button)
+            if hasattr (self, 'button_widget'):
+                end_layout.addWidget(self.prev_button)
 #            self.grid.addWidget(self.prev_button, x, y)
         if main_frame.view.groups.GroupField[-1].last and not \
                                main_frame.isBrief(self.ClientObj.param_objects\
@@ -120,7 +119,8 @@ class ControlButtonWgt(QtGui.QWidget):
             if not brief:
                 self.next_button.clicked.connect(main_frame.collect_object(False))
             self.next_button.clicked.connect(main_frame.calling(False))
-            end_layout.addWidget(self.next_button)
+            if hasattr (self, 'button_widget'):
+                end_layout.addWidget(self.next_button)
         else:
             self.next_button = QtGui.QPushButton(self)
             try:
@@ -137,8 +137,8 @@ class ControlButtonWgt(QtGui.QWidget):
                 self.next_button.clicked.connect(main_frame.collect_object(False))
             self.next_button.clicked.connect(main_frame.calling(True))
             self.next_button.clicked.connect(main_frame.button_call_view(+1))
-
-            end_layout.addWidget(self.next_button)
+            if hasattr (self, 'button_widget'):
+                end_layout.addWidget(self.next_button)
 
         self.next_button.setMinimumWidth(64)
         self.next_button.setFixedHeight(38)
@@ -153,6 +153,10 @@ class ControlButtonWgt(QtGui.QWidget):
         if hasattr (self, 'button_widget'):
             self.hlayout.removeWidget(self.button_widget)
             self.button_widget.close()
+        if hasattr (self, 'prev_button'):
+            self.prev_button.close()
+        if hasattr (self, 'next_button'):
+            self.next_button.close()
 
     def set_button_style(self):
         if hasattr (self, 'next_button'):
@@ -175,9 +179,7 @@ class ControlButtonWgt(QtGui.QWidget):
                 self.button_hover_style + self.button_pressed_style)
 
     def pre_add_button(self):
-        if hasattr (self, 'button_widget'):
-            self.hlayout.removeWidget(self.button_widget)
-            self.button_widget.close()
+        self.del_button()
         # add 1 (or 2) button ok (next) [and previous]
         self.button_widget = QtGui.QWidget(self)
         end_layout = QtGui.QHBoxLayout(self.button_widget)
diff --git a/consolegui/application/LeftMenu.py b/consolegui/application/LeftMenu.py
index e056dab..998cbf6 100755
--- a/consolegui/application/LeftMenu.py
+++ b/consolegui/application/LeftMenu.py
@@ -310,10 +310,15 @@ class LeftMenu(QtGui.QScrollArea):
     calling = QtCore.Signal()
 
     def collect_object(self, method_name, set_step = None):
-        def wrapper(): 
-            self.step = set_step if set_step else 0
+        def wrapper():
+            if hasattr (self, 'check_step_thread'):
+                if self.check_step_thread.isRunning():
+                    _print ('check_step_thread is running')
+                    return 1
+
+            change_step = set_step if set_step else 0
             if self._parent.ClientObj.param_objects[method_name]['step'] > \
-                                                                   self.step:
+                                                                change_step:
                 return
             try:
                 self.collect.disconnect()
@@ -322,38 +327,44 @@ class LeftMenu(QtGui.QScrollArea):
 
             self.collect.connect(self._parent.ClientObj.MainWidget.\
                             MainFrameWgt.collect_object(False))
+                            
             self.collect.emit()
         return wrapper
 
     def calling_method(self, method_name, set_step = None):
-        def wrapper(): 
-            self.step = set_step if set_step else 0
+        def wrapper():
+            if hasattr (self, 'check_step_thread'):
+                if self.check_step_thread.isRunning():
+                    _print ('check_step_thread is running')
+                    return 1
+
+            change_step = set_step if set_step else 0
             if self._parent.ClientObj.param_objects[method_name]['step'] > \
-                                                                   self.step:
+                                                                change_step:
                 return
             try:
                 self.calling.disconnect()
             except RuntimeError:
                 pass
             self.calling.connect(self._parent.ClientObj.MainWidget.\
-                            MainFrameWgt.calling(True, from_left_frame = True))
+                          MainFrameWgt.calling(True, from_left_frame = True))
             self.calling.emit()
         return wrapper
 
     def check_step(self, method_name, set_step = None):
         def wrapper(): 
-            self.step = set_step if set_step else 0
-
-            self._parent.ClientObj.method_name = method_name
-            self._parent.ClientObj.sid = \
-                                get_sid(self._parent.ClientObj.client)
-
             # Call server method
             if hasattr (self, 'check_step_thread'):
                 if self.check_step_thread.isRunning():
                     _print ('check_step_thread is running')
                     return 1
 
+            self.step = set_step if set_step else 0
+
+            self._parent.ClientObj.method_name = method_name
+            self._parent.ClientObj.sid = \
+                                get_sid(self._parent.ClientObj.client)
+
             expert = None
             if self._parent.ClientObj.MainWidget.MainFrameWgt. \
                                                             isBrief(self.step):
diff --git a/consolegui/application/MainFrameResult.py b/consolegui/application/MainFrameResult.py
index c5073fe..c0af8cd 100755
--- a/consolegui/application/MainFrameResult.py
+++ b/consolegui/application/MainFrameResult.py
@@ -175,7 +175,7 @@ class MainFrameRes(QtGui.QWidget):
                 view = self.client.service[0][table.onClick + '_view'] \
                                     (sid, view_params)
             except suds.MethodNotFound, e:
-                _print (e)
+                _print(e)
                 return
             self._parent.ClientObj._parent.setWindowTitle(table.onClick + \
                         ' - ' + self.ClientObj.Name)
@@ -217,11 +217,10 @@ class MainFrameRes(QtGui.QWidget):
 
     def call_method_with_offset(self, offset):
         def wrapper():
-            if offset < 0:
+            self.ClientObj.param_objects[self.method_name]['offset'] += offset
+            if self.ClientObj.param_objects[self.method_name]['offset'] < 0:
                 self.ClientObj.param_objects[self.method_name]['offset'] = 0
-            else:
-                self.ClientObj.param_objects[self.method_name]['offset'] += \
-                                                                offset
+
             # Calling View
             sid = int(self.ClientObj.sid)
             try:
@@ -243,11 +242,11 @@ class MainFrameRes(QtGui.QWidget):
         if item.message:
             # add normal message label
             lbl_temp = LabelWordWrap(item.message, self)
-    
+
             lbl_temp.setMinimumHeight(lbl_temp.sizeHint().height())
             self.work_layout._addWidget(lbl_temp)
             self.initUI()
-        
+
     def show_error(self, message):
         # add error message label
         self.set_result_task(True)
diff --git a/consolegui/application/mainframe.py b/consolegui/application/mainframe.py
index a7534db..5c871e2 100755
--- a/consolegui/application/mainframe.py
+++ b/consolegui/application/mainframe.py
@@ -306,6 +306,7 @@ class MainFrame(QtGui.QWidget):
                        (self.ClientObj.param_objects[self.method_name]['step'])
         self.grid.addItem(QtGui.QSpacerItem( 0, 0, QtGui.QSizePolicy.\
                         Expanding, QtGui.QSizePolicy.Expanding), x+1, y, 1, 2)
+
         self.common_layout.addLayout(self.grid)
         # add spacer
         self.common_layout.addItem(QtGui.QSpacerItem( 0, 0, \
@@ -2063,7 +2064,6 @@ class MainFrame(QtGui.QWidget):
             if hasattr (self.param_object, 'CheckOnly'):
                 self.param_object['CheckOnly'] = CheckOnly
 
-            _print (self.method_name, "$$$$$$$$$$$$$$$$")
 #            _print (self.param_object)
 
             self.ClientObj.param_objects[self.method_name]['error'] = None
diff --git a/consolegui/application/more.py b/consolegui/application/more.py
index e655ee4..12d0bda 100755
--- a/consolegui/application/more.py
+++ b/consolegui/application/more.py
@@ -86,6 +86,7 @@ class TopMenu(QtGui.QPushButton):
         else:
             self.setFixedWidth(48)
         self.updateGeometry()
+        self.setFocusPolicy(QtCore.Qt.NoFocus)
 
         self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
 
@@ -249,7 +250,7 @@ class ButtonMenu(QtGui.QPushButton):
                            "QPushButton:hover{background-color: "
                            "rgb(230,230,230); border-radius: 7px;}")
 
-        self.setCursor(QtCore.Qt.CursorShape.PointingHandCursor)
+#        self.setCursor(QtCore.Qt.CursorShape.PointingHandCursor)
         self.updateGeometry()
 
     def text(self):
@@ -1303,7 +1304,8 @@ class SelectList(QtGui.QGroupBox):
 
         self.recover_but.setToolTip(_('Reset changes'))
         self.recover_but.clicked.connect(self.recover_list)
-        self.recover_but.setDisabled(True)
+        if default:
+            self.recover_but.setDisabled(True)
 
         buttons_layout.addWidget(self.recover_but)
         self.grid.addLayout(buttons_layout, 0, 0)
