diff --git install/variables/disk.py install/variables/disk.py
index e65eac1..827081b 100644
--- install/variables/disk.py
+++ install/variables/disk.py
@@ -1856,6 +1856,20 @@ class VariableOsInstallRootDev(ReadonlyVariable):
         else:
             return self.Get('os_root_dev')
 
+class VariableOsInstallRootUuid(ReadonlyVariable):
+    def get(self):
+        """UUID корневого устройства"""
+        if self.Get('cl_action') == 'system':
+            root_dev = self.Get('os_install_root_dev')
+            return self.Select('os_install_disk_uuid',
+                               where='os_install_disk_dev',
+                               eq=root_dev,limit=1) or ''
+        else:
+            root_dev = self.Get('os_root_dev')
+            return self.Select('os_disk_uuid',
+                               where='os_disk_dev',
+                               eq=root_dev,limit=1) or ''
+
 class VariableOsInstallFstabMountConf(ReadonlyVariable,DeviceHelper):
     """
     FStab.conf contains for mount and bind points
diff --git install/variables/distr.py install/variables/distr.py
index 2e0d32c..4da8e26 100644
--- install/variables/distr.py
+++ install/variables/distr.py
@@ -505,9 +505,12 @@ class VariableClTarget(ReadonlyVariable):
         elif self.Get('os_install_pxe') == "on":
             return PxeDistributive(self.Get('os_install_pxe_path'))
         elif self.Get('os_install_root_type')=="flash":
+            flashLabel = "{short}-{build}".format(
+                short="CL", build=self.Get('os_install_linux_build'))
             return FlashDistributive(disk,mdirectory="/mnt/install",
                                     check=True, fileSystem=fileSystem,
                                     isFormat=isFormat, systemId=systemId,
+                                    rootLabel=flashLabel,
                                     partitionTable=partTable)
         else:
             target = PartitionDistributive(disk,mdirectory='/mnt/install',
diff --git install/variables/kernel.py install/variables/kernel.py
index 926df72..2cf87fd 100644
--- install/variables/kernel.py
+++ install/variables/kernel.py
@@ -104,13 +104,17 @@ class VariableOsInstallKernelAttr(Variable):
     def get(self):
         # on usb-hdd install must be "delay=5"
         attr = ""
+        rdauto = ""
         if self.Get('os_install_root_type') == 'usb-hdd':
             attr = " scandelay=5"
         if self.Get('os_install_mdadm_set') == 'on':
             attr += " domdadm"
+            rdauto = " rd.auto"
         if self.Get('os_install_lvm_set') == 'on':
             attr += " dolvm"
-        return attr
+            if not rdauto:
+                rdauto = " rd.auto"
+        return attr + rdauto
 
 class VariableOsInstallKernelResume(ReadonlyVariable):
     """
diff --git install/variables/net.py install/variables/net.py
index 01b0032..a07cfe3 100644
--- install/variables/net.py
+++ install/variables/net.py
@@ -34,6 +34,7 @@ from calculate.lib.utils import ip
 from calculate.lib.utils.portage import isPkgInstalled
 from operator import itemgetter
 from itertools import *
+from functools import partial
 import hashlib
 from calculate.install.distr import DistributiveError
 
@@ -92,18 +93,24 @@ class VariableOsInstallNetInterfacesOrig(NetHelper,ReadonlyVariable):
     """
     type = "list"
 
+    def is_classic_interface_name(self):
+        hashsum = lambda x: hashlib.md5(readFile(x)).digest()
+        chroot_path = self.Get('cl_chroot_path')
+        etc_path_join = partial(path.join,
+                                chroot_path, 'etc/udev/rules.d')
+        lib_path_join = partial(path.join,
+                                chroot_path, 'lib/udev/rules.d')
+        udev_files = ('70-persistent-net.rules',
+                      '80-net-name-slot.rules',
+                      '80-net-setup-link.rules')
+        for etc_file, lib_file in  izip(map(etc_path_join,udev_files),
+                                        map(lib_path_join,udev_files)):
+            if path.exists(etc_file) and hashsum(etc_file) != hashsum(lib_file):
+                return True
+        return False
+
     def get(self):
-        chrootPath = self.Get('cl_chroot_path')
-        pathOldUdevNet = path.join(chrootPath,
-            'etc/udev/rules.d/70-persistent-net.rules')
-        pathNewUdevNet = path.join(chrootPath,
-            'etc/udev/rules.d/80-net-name-slot.rules')
-        pathOrigUdevNet = path.join(chrootPath,
-            'lib/udev/rules.d/80-net-name-slot.rules')
-        if path.exists(pathOldUdevNet) or \
-            (path.exists(pathNewUdevNet) and 
-            hashlib.md5(readFile(pathNewUdevNet)).digest() != \
-            hashlib.md5(readFile(pathOrigUdevNet)).digest()):
+        if self.is_classic_interface_name():
             return self.Get('os_install_net_interfaces')
         def getOrig(x):
             try:
diff --git install/wsdl_install.py install/wsdl_install.py
index bff5954..0fca47d 100644
--- install/wsdl_install.py
+++ install/wsdl_install.py
@@ -65,7 +65,8 @@ class Wsdl(WsdlBase):
                 normal=('os_install_locale_lang','os_install_clock_timezone')),
             lambda group:group(_("Distribution"),
                 normal=('cl_image_filename',),
-                hide=('cl_image_linux_shortname','cl_image_arch_machine'),
+                hide=('cl_image_linux_shortname','cl_image_arch_machine',
+                      'cl_image_new_only'),
                 expert=('cl_image_linux_shortname', 'cl_image_arch_machine',
                         'cl_image_new_only')),
             lambda group:group(_("Allocate drive space"),
@@ -95,8 +96,6 @@ class Wsdl(WsdlBase):
                 expert=('cl_install_home_crypt_set',),
                 hide=('cl_migrate_data',),
                 brief=('cl_migrate_user',)),
-            lambda group:group(_("Audio"),
-                normal=('os_audio_default',)),
             lambda group:group(_("Video"),
                 normal=('os_install_x11_video_drv','os_install_x11_composite',
                         'os_install_x11_resolution','os_install_fb_resolution',
@@ -154,28 +153,8 @@ class Wsdl(WsdlBase):
                 expert=('os_install_pxe_path',
                         'os_install_pxe_ip'),
                 next_label=_("Install"))]},
-        # настройка аудио
-        {
-        'method_name':"setup_audio",
-        'category':__("Configuration"),
-        'title':__("Audio"),
-        'image':'audio-card',
-        'command':'cl-setup-audio',
-        'gui':True,
-        'rights':['setupaudio'],
-        'logic':{'Install':install.Install},
-        'action':ClSetupAudioAction,
-        'datavars':"install",
-        'native_error':(VariableError,DataVarsError,install.InstallError),
-        'setvars':{'cl_action!':'merge','cl_merge_pkg!':[None],
-                   'cl_merge_set!':"on",'cl_setup':'audio'},
-        'groups':[
-            lambda group:group(_("Audio"),
-                normal=('os_audio_default',),
-                expert=('cl_templates_locate',"cl_dispatch_conf","cl_verbose_set"),
-                next_label=_("Save"))]},
-        {
         # настройка загрузки системы
+        {
         'method_name':"setup_boot",
         'category':__("Configuration"),
         'title':__("Boot"),
