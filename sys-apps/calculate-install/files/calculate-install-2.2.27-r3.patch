diff --git data/calculate data/calculate
index 7339b32..3609ae4 100644
--- data/calculate
+++ data/calculate
@@ -22,7 +22,7 @@ depend() {
 check_install_ability()
 {
 	local pkg=$1
-	FETCHCOMMAND=false DISTDIR=/usr/portage/distfiles emerge -fq $pkg &>/dev/null
+	FEATURES="-getbinpkg" FETCHCOMMAND=false DISTDIR=/usr/portage/distfiles emerge -fq $pkg &>/dev/null
 }
 
 is_already_install()
@@ -38,7 +38,7 @@ install_pkg()
 {
 	local pkg=$1
 	ebegin "Installing $pkg"
-	FETCHCOMMAND=false DISTDIR=/usr/portage/distfiles emerge $pkg &>/dev/null
+	FEATURES="-getbinpkg" FETCHCOMMAND=false DISTDIR=/usr/portage/distfiles emerge $pkg &>/dev/null
 }
 
 variable_value()
@@ -120,6 +120,10 @@ start() {
 	source /etc/profile
 	/sbin/update-modules
 
+	# reinit net.* services
+	local roottype=`variable_value os_root_type`
+	[[ $roottype == "livecd" ]] && udevadm trigger --action="add" --subsystem-match=net
+
 	/sbin/rc-update --update
 	return 0
 }
diff --git pym/cl_fill_install.py pym/cl_fill_install.py
index 438dedc..dcd6cd3 100644
--- pym/cl_fill_install.py
+++ pym/cl_fill_install.py
@@ -128,6 +128,7 @@ class fillVars(object, glob_attr):
         interfaces = ip.getInterfaces()
         net_hash = {}
         pciEthernet = lspci(shortInfo=True)
+        nfsRoot = self.Get('os_install_root_dev') == '/dev/nfs'
         for interface in interfaces:
             ipaddr,mask = ip.receiveIpAndMask(interface)
             dhcp = ip.isDhcpIp(interface)
@@ -142,7 +143,7 @@ class fillVars(object, glob_attr):
                 mapInterface["network"] = ip.getIpNet(ipaddr,mask=mask)
             else:
                 mapInterface["network"] = ""
-            mapInterface["dhcp"] = "on" if dhcp else "off"
+            mapInterface["dhcp"] = "on" if dhcp or nfsRoot else "off"
             mapInterface["mac"] = mac
             mapInterface["name"] = "{vendor} {name}".format(**pciInfo)
             net_hash[interface]=mapInterface
@@ -1146,7 +1147,8 @@ class fillVars(object, glob_attr):
         if filter(lambda x:x.lower() == ("networkmanager"),
            listDirectory('/etc/runlevels/boot')+
            listDirectory('/etc/runlevels/default')) \
-            or self.Get('os_install_root_type') == "livecd":
+            or self.Get('os_install_root_type') == "livecd" and \
+               self.Get('os_install_root_dev') != "/dev/nfs":
             if isPkgInstalled("net-misc/networkmanager",
                               prefix=self.Get('cl_chroot_path')):
                 return "networkmanager"
@@ -1158,6 +1160,10 @@ class fillVars(object, glob_attr):
 
     def get_os_install_net_domain(self):
         """Domain"""
+        if path.exists('/proc/self/fd/1') and \
+            readlink('/proc/self/fd/1') == '/dev/console' and \
+            self.Get('os_root_dev') == '/dev/nfs':
+            return "local"
         textLines = self._runos("hostname -d 2>&1")
         domain = ""
         if textLines:
diff --git pym/cl_install.py pym/cl_install.py
index 185b229..4084db5 100644
--- pym/cl_install.py
+++ pym/cl_install.py
@@ -29,8 +29,9 @@ from cl_utils import runOsCommand,appendProgramToEnvFile, \
                         cmpVersion,STDOUT,getUdevDeviceInfo, \
                         getLvmPartitions,getInstalledVideo, \
                         getSupportArch, refreshLVM, refreshUdev, \
-                        isPkgInstalled
+                        isPkgInstalled, checkUtils, countPartitions
 from cl_vars_share import varsShare
+from subprocess import Popen,PIPE,STDOUT
 
 from cl_kernel_utils import KernelConfig,InitRamFs
 
@@ -899,7 +900,8 @@ class cl_install(color_print, SignalInterrupt):
         pxe = clGet('os_install_pxe')=='on'
         pxeflash = flash or pxe
         usbhdd = clGet('os_install_root_type')=="usb-hdd"
-        hdd = clGet('os_install_root_type')=="hdd"
+        hdd = clGet('os_install_root_type')=="hdd" and not pxe
+        x11print = bool(clGet('os_install_x11_video_drv'))
         if not flash:
             musers = ", ".join(set(clGet('cl_migrate_user'))-set(['root'])) \
                 or _("none")
@@ -939,8 +941,9 @@ class cl_install(color_print, SignalInterrupt):
              (_("Number of processors"),clGet('hr_cpu_num'),hdd),
              (_("Videocard"),clGet('hr_video_name'),hdd),
              (_("{0} video driver").format("Xorg"),
-              clGet('os_install_x11_video_drv'),hdd),
-             (_("Screen resolution"),clGet('os_install_x11_resolution'),hdd)
+              clGet('os_install_x11_video_drv'),hdd and x11print),
+             (_("Screen resolution"),clGet('os_install_x11_resolution'),
+                        hdd and x11print)
             ],
             [(_("Network devices"),not pxeflash),
              (self.printNetworkTables,None,True)
@@ -948,11 +951,12 @@ class cl_install(color_print, SignalInterrupt):
             [(_("Routes"),not pxeflash),
              (self.printRouteTables,None,True)
             ],
-            [(_("Location"),not pxe),
-             (_("Master boot record")+" (MBR)",mbrdisk,True),
+            [(_("Location"),True),
+             (_("Master boot record")+" (MBR)",mbrdisk,not pxe),
+             (_("PXE installation directory"),clGet('os_install_pxe_path'),pxe),
              (self.printLocationTables,None,True)
             ],
-            [(_("Perform pre-install checkups"),True)]
+            [(_("Perform pre-install checkups"),not pxe)]
         ]
 
         for section in printData:
@@ -1781,33 +1785,67 @@ class cl_install(color_print, SignalInterrupt):
             return ""
 
     def setActivePartition(self,partition):
-        """TODO: don't work with GPT. Don't work must be rewrite!!!!!"""
-        reActive = re.compile('^%s\s*[*]'%partition)
-        device = filter(lambda x:x in partition,
-                            self.clVars.Get('os_device_dev'))
-        if not device:
-            raise DistributiveError(_("Failed to find the parent device"))
-        device = device[0]
-
-        fdiskProcess = process("/sbin/fdisk","-l",device)
-        if fdiskProcess.failed():
-            raise DistributiveError(_("Failed to get device information\n%s")%
-                        fdiskProcess.read())
-        if not filter(reActive.search,fdiskProcess):
-            grubDisk = self.getFieldByField("grub","mount","/",
-                                      secondPrefix="os_install_disk")
-            if grubDisk and grubDisk.rpartition(',')[2].isdigit():
-                fdiskProcess = process("/sbin/fdisk", device)
-                fdiskProcess.write("a\n%d\nw\n"%
-                            (int(grubDisk.rpartition(',')[2])+1))
-                if fdiskProcess.success():
-                    return True
-                if filter(reActive.search,process("/sbin/fdisk",
-                                                    "-l",device)):
-                    return True
-            raise DistributiveError(_("Failed to set the active partition"))
-        else:
+        """Change partition id, specified by systemid"""
+        deviceName = detectDeviceForPartition(partition)
+        if deviceName is None:
+            raise DistributiveError(
+                _("Failed to determine the parent device for %s")%partition)
+        # device hasn't any partition
+        elif deviceName == "":
+            return True
+        fdiskProg, gdiskProg, partedProg = checkUtils('/sbin/fdisk',
+                    '/usr/sbin/gdisk','/usr/sbin/parted')
+
+        parttable = self.varSelect("os_disk_table",where="os_disk_dev",
+                                    eq=partition)
+        partitionNumber = \
+            getUdevDeviceInfo(name=partition).get('ID_PART_ENTRY_NUMBER','')
+        devicePartitionCount = countPartitions(deviceName)
+        if deviceName and not partitionNumber:
+            raise DistributiveError(
+                _("Failed to determine the partition number for %s")%partition)
+        bootFlag = "boot" if parttable == "dos" else "legacy_boot"
+        parted = process(partedProg, "-m",deviceName,"print")
+        DEVICENUM,FLAGS = 0,6
+        changeActive = \
+            map(lambda x:x[DEVICENUM],
+            filter(lambda x:x[DEVICENUM] != partitionNumber and \
+                            bootFlag in x[FLAGS].strip(';').split(', ') or \
+                            x[DEVICENUM] == partitionNumber and \
+                            not bootFlag in x[FLAGS].strip(';').split(', '),
+            filter(lambda x:len(x)>=7,
+            map(lambda x:x.split(':'),
+            parted.readlines()[2:]))))
+        if not changeActive:
             return True
+        if parttable == "dos":
+            pipe = Popen([fdiskProg,deviceName],
+                stdin=PIPE, stdout=PIPE,stderr=PIPE)
+            for partnum in changeActive:
+                pipe.stdin.write("a\n%s\n"%partnum)
+            pipe.stdin.write("w\n")
+            pipe.stdin.close()
+            pipe.wait()
+        elif parttable == "gpt":
+            pipe = Popen([gdiskProg,deviceName],
+                stdin=PIPE, stdout=PIPE,stderr=PIPE)
+            if devicePartitionCount > 1:
+                pipe.stdin.write("x\n")
+                for partnum in changeActive:
+                    pipe.stdin.write("a\n%s\n2\n\n"%partnum)
+                pipe.stdin.write("w\nY\n")
+            else:
+                pipe.stdin.write("x\na\n2\n\nw\nY\n")
+            pipe.stdin.close()
+            pipe.wait()
+        for waittime in (0.1,0.2,0.5,1,2,4):
+            if path.exists(partition):
+                return True
+            else:
+                sleep(waittime)
+        raise InstallError(
+            _("Failed to found partition %s after changing the activity")%
+                partition)
 
     def installSyslinuxBootloader(self,target):
         """Install boot loader by syslinux
@@ -1881,6 +1919,13 @@ class cl_install(color_print, SignalInterrupt):
 
     def installGrub2Bootloader(self,target):
         """Install grub2 boot loader"""
+        for bootPath in ("/boot","/"):
+            # get grub disk by mount point
+            bootDisk = self.varSelect(
+                "os_disk_dev",where="os_install_disk_mount",eq=bootPath)
+            if bootDisk:
+                self.setActivePartition(bootDisk)
+                break
         cmdGrubInstall = self.clVars.Get('os_grub2_path')
         #if not self.setBiosGrubForBootPartition():
         #    raise DistributiveError(
@@ -1912,6 +1957,8 @@ class cl_install(color_print, SignalInterrupt):
             bootDisk = self.varSelect(
                 "os_disk_grub",where="os_install_disk_mount",eq=bootPath)
             if bootDisk:
+                self.setActivePartition(self.varSelect(
+                    "os_disk_dev",where="os_install_disk_mount",eq=bootPath))
                 break
         mbrDisk = self.clVars.Get('os_install_mbr')
         mbrDiskNum = self.varSelect(
@@ -2399,10 +2446,14 @@ class cl_install(color_print, SignalInterrupt):
             _("Coping configuration files to the new system"))
         fileMask = r"/etc/udev/rules\.d/70-persistent-net\.rules"
         if self.clVars.Get('os_root_type') != "livecd":
-            fileMask = "(%s|/etc/ssh/ssh_host_.*)"%fileMask
+            fileMask = \
+                "(%s|/etc/ssh/ssh_host_.*|/root/.ssh/(id_.*|known_hosts))"% \
+                    fileMask
         fileCpy = otherfilesCopy(target=targetDistr.getDirectory(),
                                  reTest=fileMask)
         fileCpy.performCopy('/etc')
+        if path.exists('/root/.ssh'):
+            fileCpy.performCopy('/root/.ssh')
         self.printByResult(True)
 
         # optimize initrd
diff --git setup.py setup.py
index 606fdc5..ef19785 100755
--- setup.py
+++ setup.py
@@ -34,7 +34,9 @@ var_data_files = []
 data_files += [('/etc/init.d', ['data/calculate']),
                ('/usr/bin',['data/xautologin']),
                ('/usr/share/calculate/doc', ['data/handbook-en.html',
-                                             'data/handbook-ru.html']),
+                                             'data/handbook-ru.html',
+                                             'data/handbook-es.html',
+                                             'data/handbook-fr.html']),
                ('/bin',['data/bashlogin'])]
 
 BUILD_MAN_PATH = "build/man"
