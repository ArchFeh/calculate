diff --git install/distr.py install/distr.py
index be23d8e..545168b 100644
--- install/distr.py
+++ install/distr.py
@@ -458,7 +458,7 @@ class Distributive(object):
                               PartitionDistributive:"partdir"}
                 extname = mapExtName.get(distr.__class__,"")
                 image = distr.convertToDirectory()
-            except Exception,e:
+            except Exception as e:
                 if distr:
                     distr.close()
                 return {}.copy()
diff --git install/install.py install/install.py
index 9456d36..3ae3eb9 100644
--- install/install.py
+++ install/install.py
@@ -400,7 +400,7 @@ class Install:
         'lvm_vgname' название группы томов LVM, bios_grub - создавать
         bios_grub раздел
         """
-        ap = Autopartition()
+        ap = AutoPartition()
         ap.clearLvm(devices,self.clVars)
         ap.clearRaid(devices,self.clVars)
         ap.recreateSpace(table,devices,data,lvm,lvm_vgname,bios_grub)
diff --git install/utils/cl_setup.py install/utils/cl_setup.py
index 39b8ba6..c5622dc 100644
--- install/utils/cl_setup.py
+++ install/utils/cl_setup.py
@@ -25,19 +25,48 @@ from calculate.install.install import (MigrationError, TemplatesError,
 setLocalTranslate('cl_install3',sys.modules[__name__])
 __ = getLazyLocalTranslate(_)
 
-class ClSetupSystemAction(Action):
+class ClSetupVideoAction(Action):
     """
-    Объект настройки всех параметров системы
+    Действие для настройки параметров видео
     """
     # ошибки, которые отображаются без подробностей
     native_error = (FilesError,MigrationError, TemplatesError,
                   InstallError, AutopartitionError, DistributiveError)
-    addon_tasks = []
-    templateTaskMessage = __("System are being configured")
-    successMessage = __("System configured!")
-    failedMessage = __("Failed to configure the system!")
+
+    templateTaskMessage = __("Video settings are being configured")
+    successMessage = __("Video settings configured!")
+    failedMessage = __("Failed to configure the video settings!")
     interruptMessage = __("Configuration manually interrupted")
 
+    addon_tasks = [
+        # проверить и настроить параметры для nvidia драйвера
+        {'name':'check_video',
+        'message':__("Checking the video driver"),
+        'method':'Install.checkVideoDriver()',
+        },
+        {'name':'setup_opengl',
+        'message':__("Configuring OpenGL"),
+        'method':'Install.setupOpenGL()',
+        },
+        {'name':'reboot',
+         'warning':__("To apply the changes, reboot the system"),
+         'condition': lambda dv:(dv.Get('os_x11_video_drv') != \
+                dv.Get('os_install_x11_video_drv') and \
+                (dv.Get('os_x11_video_drv') in dv.Get('os_x11_kms_video_drv') \
+                or dv.Get('os_install_x11_video_drv') \
+                    in dv.Get('os_x11_kms_video_drv')))
+        },
+        {'name':'restart',
+         'warning':__("To apply the changes, restart the X server"),
+         'condition': lambda dv:(dv.Get('os_x11_video_drv') !=
+                dv.Get('os_install_x11_video_drv') and
+                (not dv.Get('os_x11_video_drv') in
+                     dv.Get('os_x11_kms_video_drv') and
+                 not dv.Get('os_install_x11_video_drv')
+                    in dv.Get('os_x11_kms_video_drv')))
+        }
+        ]
+
     def __init__(self):
         # список задач для дейсвия
         self.tasks = [
@@ -52,10 +81,20 @@ class ClSetupSystemAction(Action):
         self.tasks.extend(self.addon_tasks)
         Action.__init__(self)
 
+
+class ClSetupSystemAction(ClSetupVideoAction):
+    """
+    Объект настройки всех параметров системы
+    """
+    templateTaskMessage = __("System are being configured")
+    successMessage = __("System configured!")
+    failedMessage = __("Failed to configure the system!")
+
 class ClSetupAudioAction(ClSetupSystemAction):
     """
     Действие для настройки аудио параметров
     """
+    addon_tasks = []
     templateTaskMessage = __("Audio settings are being configured")
     successMessage = __("Audio settings configured!")
     failedMessage = __("Failed to configure the audio parameters!")
@@ -64,6 +103,7 @@ class ClSetupLocaleAction(ClSetupSystemAction):
     """
     Действие для настройки языковых параметров
     """
+    addon_tasks = []
     templateTaskMessage = \
         __("Localization and time options are being configured")
     successMessage = __("System configured!")
@@ -73,6 +113,7 @@ class ClSetupNetworkAction(ClSetupSystemAction):
     """
     Действие для настройки аудио параметров
     """
+    addon_tasks = []
     templateTaskMessage = __("Network settings are being configured")
     successMessage = __("Network settings configured!")
     failedMessage = __("Failed to configure the network settings!")
@@ -81,6 +122,7 @@ class ClSetupUsersAction(ClSetupSystemAction):
     """
     Действие для настройки пользовательских параметров
     """
+    addon_tasks = []
     templateTaskMessage = __("User settings are being configured")
     successMessage = __("User settings configured!")
     failedMessage = __("Failed to configure the user settings!")
@@ -98,53 +140,17 @@ class ClSetupBootAction(ClSetupSystemAction):
         {'name':'prepare_bootloader',
          'message':_("Installing the bootloader"),
          'method':'Install.prepareBoot(cl_image)',
-         'condition':(lambda dv:dv.Get('os_install_mbr') or 
-            dv.Get('os_install_uefi_set') == 'on')
+         'condition':(lambda Get:(Get('os_install_mbr') or 
+            Get('os_install_uefi_set') == 'on') and
+            Get('os_root_type') != 'livecd')
         },
         # изменить IO планировщик
         {'name':'change_ioscheduler',
          'message':_("Changing the I/O scheduler"),
          'method':'Install.changeScheduler(os_install_kernel_scheduler)',
-         'condition':(lambda dv:dv.Select('os_disk_parent',
+         'condition':(lambda dv:dv.Get('os_root_type') != 'livecd' and 
+                               dv.Select('os_disk_parent',
                                where='os_disk_mount',
                                eq='/',limit=1))
         },
         ]
-
-class ClSetupVideoAction(ClSetupSystemAction):
-    """
-    Действие для настройки параметров видео
-    """
-    templateTaskMessage = __("Video settings are being configured")
-    successMessage = __("Video settings configured!")
-    failedMessage = __("Failed to configure the video settings!")
-
-    addon_tasks = [
-        # проверить и настроить параметры для nvidia драйвера
-        {'name':'check_video',
-        'message':__("Checking the video driver"),
-        'method':'Install.checkVideoDriver()',
-        },
-        {'name':'setup_opengl',
-        'message':__("Configuring OpenGL"),
-        'method':'Install.setupOpenGL()',
-        },
-        {'name':'reboot',
-         'warning':__("To apply the changes, reboot the system"),
-         'condition': lambda dv:(dv.Get('os_x11_video_drv') != \
-                dv.Get('os_install_x11_video_drv') and \
-                (dv.Get('os_x11_video_drv') in dv.Get('os_x11_kms_video_drv') \
-                or dv.Get('os_install_x11_video_drv') \
-                    in dv.Get('os_x11_kms_video_drv')))
-        },
-        {'name':'restart',
-         'warning':__("To apply the changes, restart the X server"),
-         'condition': lambda dv:(dv.Get('os_x11_video_drv') !=
-                dv.Get('os_install_x11_video_drv') and
-                (not dv.Get('os_x11_video_drv') in
-                     dv.Get('os_x11_kms_video_drv') and
-                 not dv.Get('os_install_x11_video_drv')
-                    in dv.Get('os_x11_kms_video_drv')))
-        }
-        ]
-
diff --git install/variables/X11.py install/variables/X11.py
index cd8ef73..3634b02 100644
--- install/variables/X11.py
+++ install/variables/X11.py
@@ -26,6 +26,7 @@ from calculate.lib.utils.common import (getVideoFromXorgLog,
                 getAvailableVideo, getValueFromCmdLine,
                 getCompositeFromXorgconf, getVideoFromModules,
                 getVideoFromVendor,getInstalledVideo)
+from calculate.install.distr import DistributiveError
 
 from calculate.lib.cl_lang import setLocalTranslate
 setLocalTranslate('cl_install3',sys.modules[__name__])
@@ -109,10 +110,13 @@ class VariableOsInstallX11VideoAvailable(VideoVariable):
         image = self.Get('cl_image')
         if image:
             with image as distr:
-                distrPath = image.getDirectory()
-                if isPkgInstalled('xorg-server',prefix=distrPath):
-                    return sorted(filter(self.supported.__contains__,
-                           getAvailableVideo(prefix=distrPath)))+['other']
+                try:
+                    distrPath = image.getDirectory()
+                    if isPkgInstalled('xorg-server',prefix=distrPath):
+                        return sorted(filter(self.supported.__contains__,
+                               getAvailableVideo(prefix=distrPath)))+['other']
+                except DistributiveError as e:
+                    pass
         return []
 
 class VariableOsX11KmsVideoDrv(ReadonlyVariable):
diff --git install/variables/kernel.py install/variables/kernel.py
index 9f8c395..2e844ac 100644
--- install/variables/kernel.py
+++ install/variables/kernel.py
@@ -30,6 +30,7 @@ from calculate.lib.utils.common import (getKernelUid,getTupleVersion,
     getValueFromCmdLine)
 from calculate.lib.utils.device import getUdevDeviceInfo
 from itertools import *
+from calculate.install.distr import DistributiveError
 
 class VariableOsInstallKernelScheduler(Variable):
     """
@@ -85,11 +86,14 @@ class VariableOsInstallKernelBfqSet(ReadonlyVariable):
         image = self.Get('cl_image')
         if image:
             with image as distr:
-                distrPath = image.getDirectory()
-                kernelConfig = path.join(distrPath,"usr/src/linux/.config")
-                if filter(lambda x:"CONFIG_IOSCHED_BFQ=y" in x,
-                    readLinesFile(kernelConfig)):
-                    return "on"
+                try:
+                    distrPath = image.getDirectory()
+                    kernelConfig = path.join(distrPath,"usr/src/linux/.config")
+                    if filter(lambda x:"CONFIG_IOSCHED_BFQ=y" in x,
+                        readLinesFile(kernelConfig)):
+                        return "on"
+                except DistributiveError as e:
+                    return "off"
         return "off"
 
 class VariableOsInstallKernelAttr(Variable):
diff --git install/variables/net.py install/variables/net.py
index a7f2df2..d5cec22 100644
--- install/variables/net.py
+++ install/variables/net.py
@@ -35,6 +35,7 @@ from calculate.lib.utils.portage import isPkgInstalled
 from operator import itemgetter
 from itertools import *
 import hashlib
+from calculate.install.distr import DistributiveError
 
 class NetHelper:
     """
@@ -649,11 +650,14 @@ class VariableOsInstallNetConfAvailable(NetHelper,Variable):
         image = self.Get('cl_image')
         if image:
             with image as distr:
-                distrPath = image.getDirectory()
-                return map(itemgetter(0,2),
-                       filter(lambda x:not x[1] or isPkgInstalled(x[1],
-                                           prefix=distrPath),
-                       mapNetConf))
+                try:
+                    distrPath = image.getDirectory()
+                    return map(itemgetter(0,2),
+                           filter(lambda x:not x[1] or isPkgInstalled(x[1],
+                                               prefix=distrPath),
+                           mapNetConf))
+                except DistributiveError as e:
+                    pass
         return sorted(map(itemgetter(0,2),mapNetConf[-1:]),key=itemgetter(1))
 
 class VariableOsInstallNetConf(NetHelper,Variable):
diff --git install/variables/system.py install/variables/system.py
index dd5a974..b54aaf8 100644
--- install/variables/system.py
+++ install/variables/system.py
@@ -766,6 +766,6 @@ class VariableOsAudioDefault(Variable):
         """
         Audio setting up unavailable for flash installation
         """
-        if self.Get('os_install_root_type') != 'flash':
+        if self.Get('os_install_root_type') == 'flash':
             return _("Audio configuration unavailable for Flash install")
         return ""
