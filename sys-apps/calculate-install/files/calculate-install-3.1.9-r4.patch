diff --git install/distr.py install/distr.py
index 88de47f..ae94ddb 100644
--- install/distr.py
+++ install/distr.py
@@ -31,7 +31,8 @@ from functools import partial
 from calculate.lib.utils.files import (runOsCommand,isMount,removeDir,
                     processProgress,countFiles,STDOUT,
                     typeFile,pathJoin,process,getRunCommands,
-                    readLinesFile,getProgPath,listDirectory,checkUtils)
+                    readLinesFile,getProgPath,listDirectory,checkUtils,
+                    MAGIC_COMPRESS,MAGIC_SYMLINK,MAGIC_CONTINUE)
 from calculate.lib.utils.common import getTupleVersion,cmpVersion
 from calculate.lib.utils.device import (detectDeviceForPartition, 
                                 getUdevDeviceInfo, countPartitions,
@@ -114,7 +115,7 @@ class Distributive(object):
     def fromFile(cls,filename):
         """Get Distributive object by filename"""
         # MAGIC_COMPRESS 0x000004 Check inside compressed files 
-        tf = typeFile(magic=0x6)
+        tf = typeFile(magic=MAGIC_COMPRESS|MAGIC_SYMLINK|MAGIC_CONTINUE)
         ftype = tf.getMType(filename)
         if ftype:
             if "block special" in ftype:
@@ -1095,7 +1096,7 @@ class IsoDistributive(Distributive):
         self.compress = compress
 
     def getType(self):
-        tf = typeFile(magic=0x6)
+        tf = typeFile(magic=MAGIC_COMPRESS|MAGIC_SYMLINK|MAGIC_CONTINUE)
         ftype = tf.getMType(self.file)
         if "block special" in ftype:
             return _("live image %s")%self.file
@@ -1116,7 +1117,7 @@ class IsoDistributive(Distributive):
     def _mountIso(self,file,directory):
         if self.file != self.mdirectory:
             self._makeDirectory(directory)
-            tf = typeFile(magic=0x6)
+            tf = typeFile(magic=MAGIC_COMPRESS|MAGIC_SYMLINK|MAGIC_CONTINUE)
             ftype = tf.getMType(file)
             if "block special" in ftype:
                 mopts = "-o ro"
diff --git install/install.py install/install.py
index fdd6b04..c3e0c7e 100644
--- install/install.py
+++ install/install.py
@@ -28,7 +28,8 @@ from shutil import copy2
 from calculate.core.server.func import safetyWrapper
 from calculate.lib.utils.files import (runOsCommand,pathJoin,
                                        isMount,process,listDirectory,STDOUT,
-                                       checkUtils,readFile,find,copyWithPath)
+                                       checkUtils,readFile,find,copyWithPath,
+                                       readLinesFile)
 from calculate.lib.utils.common import (appendProgramToEnvFile,
                         removeProgramToEnvFile, getTupleVersion,
                         cmpVersion,getUserPassword,
@@ -350,7 +351,7 @@ class Install:
             newModuleName = defaultGL
         curModuleName = map(lambda x:x.strip().rpartition('=')[-1].strip('"\''),
                    filter(lambda x: x.startswith("OPENGL_PROFILE="),
-                          readFile(openGLenv)))
+                          readLinesFile(openGLenv)))
         curModuleName = curModuleName[-1] if curModuleName else ""
         if curModuleName == newModuleName:
             return True
diff --git install/variables/disk.py install/variables/disk.py
index ef0f9e2..14462e7 100644
--- install/variables/disk.py
+++ install/variables/disk.py
@@ -31,7 +31,7 @@ from calculate.lib.utils.device import (getUdevDeviceInfo,getDeviceType,
                         getUUIDDict,getCommonDeviceName)
 from calculate.install.variables.autopartition import Sizes
 from calculate.lib.utils.files import (listDirectory,pathJoin,readFile,FStab,
-                                       isMount)
+                                       isMount,getProgPath)
 from calculate.install.distr import PartitionDistributive
 from calculate.install.fs_manager import FileSystemManager
 
@@ -110,7 +110,8 @@ class VariableOsDeviceDev(ReadonlyVariable,DeviceHelper):
         """Get device /dev name"""
         if self.master is None:
             self.master,slave = pty.openpty()
-            self.monitor = Popen(["/sbin/udevadm","monitor","--kernel",
+            udevAdm = getProgPath('/sbin/udevadm')
+            self.monitor = Popen([udevAdm,"monitor","--kernel",
                                 "--subsystem-match=block"],stdout=slave,
                                 close_fds=True)
             os.close(slave)
@@ -1834,7 +1835,7 @@ class VariableOsInstallFstabMountConf(ReadonlyVariable,DeviceHelper):
                                        'os_install_disk_mount',
                                        'os_install_disk_format',
                                        'os_install_disk_options',
-                                       'os_disk_dev'],
+                                       'os_install_disk_dev'],
                                where='os_install_disk_mount',
                                func=lambda x:x[0] != "" and x[0] != "swap"),
                           lambda x,y: cmp(self.separateDevice(x[1]),
diff --git install/variables/kernel.py install/variables/kernel.py
index 2e844ac..42ee87a 100644
--- install/variables/kernel.py
+++ install/variables/kernel.py
@@ -19,7 +19,8 @@ import sys
 import re
 from os import path
 from calculate.lib.datavars import Variable,VariableError,ReadonlyVariable
-from calculate.lib.utils.files import typeFile,process,listDirectory
+from calculate.lib.utils.files import (
+        typeFile,process,listDirectory,MAGIC_SYMLINK,MAGIC_COMPRESS)
 
 from calculate.lib.cl_lang import setLocalTranslate
 setLocalTranslate('cl_install3',sys.modules[__name__])
@@ -137,7 +138,7 @@ class KernelHelper:
     def getFilesByType(self,pathname,descr):
         """Get files from "pathname" has "descr" in descriptions"""
         filelist = map(lambda x:path.join(pathname,x),os.listdir(pathname))
-        ftype = typeFile(magic=0x4).getMType
+        ftype = typeFile(magic=MAGIC_COMPRESS|MAGIC_SYMLINK).getMType
         filesWithType = map(lambda x:(x,ftype(x)), filelist)
         return filter(lambda x:descr in x[1],filesWithType)
 
@@ -150,7 +151,7 @@ class KernelHelper:
                 return resInitrdVer.groups()[1]
             return ""
 
-        ftype = typeFile(magic=0x4).getMType
+        ftype = typeFile(magic=MAGIC_COMPRESS|MAGIC_SYMLINK).getMType
         kernelfile = path.join(chroot,'boot',kernel)
         typeKernelFile = ftype(kernelfile)
         if typeKernelFile == None:
