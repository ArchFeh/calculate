diff --git a/i18n/cl_install_ru.mo b/i18n/cl_install_ru.mo
index ac2f2f9..9c998dd 100644
Binary files a/i18n/cl_install_ru.mo and b/i18n/cl_install_ru.mo differ
diff --git a/pym/cl_distr.py b/pym/cl_distr.py
index 7a47383..6f8ee5b 100644
--- a/pym/cl_distr.py
+++ b/pym/cl_distr.py
@@ -1071,11 +1071,15 @@ class ArchiveDistributive(Distributive):
         self.packToArchive(dFrom.directory, self.file)
 
 class SquashDistributive(Distributive):
-    def __init__(self,file,parent=None,mdirectory="/mnt/livecd",exclude=None):
+    def __init__(self,file,parent=None,mdirectory="/mnt/livecd",exclude=None,
+                 compress=""):
         Distributive.__init__(self,parent=parent)
         self.file = file
         self.mdirectory = mdirectory
         self.exclude = [] if not exclude else exclude
+        self.compress = compress \
+                        if compress and compress != "gzip" else \
+                        ""
 
     def _mountSquash(self,file,directory):
         """Mount squashfs to directory"""
@@ -1110,6 +1114,8 @@ class SquashDistributive(Distributive):
         cmd = [mksquashfsUtil, "%s/"%directory,file, "-no-progress"]
         if self.exclude:
             cmd += ["-e"] + self.exclude
+        if self.compress:
+            cmd += ["-comp",self.compress]
         processMkSquash = process(*cmd)
         if processMkSquash.failed():
             raise DistributiveError(_("Cann't create squashfs") + " '%s':\n%s"%
@@ -1124,7 +1130,8 @@ class SquashDistributive(Distributive):
 
 class IsoDistributive(Distributive):
     def __init__(self,file,parent=None,mdirectory="/mnt/cdrom",
-            bdirectory="/var/calculate/tmp/iso",exclude=None):
+            bdirectory="/var/calculate/tmp/iso",exclude=None,
+            compress="gzip"):
         Distributive.__init__(self,parent=parent)
         self.file = file
         if path.isdir(self.file):
@@ -1136,6 +1143,7 @@ class IsoDistributive(Distributive):
         else:
             self.bdirectory = self._getMntDirectory(bdirectory)
         self.exclude = [] if not exclude else exclude
+        self.compress = compress
 
     def _mountIso(self,file,directory):
         if self.file != self.mdirectory:
@@ -1162,7 +1170,8 @@ class IsoDistributive(Distributive):
             raise DistributiveError(_("Iso %s doesn't contain live image") %
                     self.file)
         return SquashDistributive(path.join(mdirectory,fileLive),
-                                    parent=self,exclude=self.exclude)
+                                    parent=self,exclude=self.exclude,
+                                    compress=self.compress)
 
     def getIsoContentDirectory(self):
         """Return directory with content of iso image"""
@@ -1234,7 +1243,8 @@ class IsoDistributive(Distributive):
                 distDirectory = source.convertToDirectory()
                 squashDistr = SquashDistributive(
                                path.join(isoDirectory,liveimage),
-                               exclude=self.exclude)
+                               exclude=self.exclude,
+                               compress=self.compress)
                 squashDistr.installFrom(distDirectory)
             # prepare iso
             self.prepareIso(isoDirectory)
diff --git a/pym/cl_fill_install.py b/pym/cl_fill_install.py
index ff84ee8..d328583 100644
--- a/pym/cl_fill_install.py
+++ b/pym/cl_fill_install.py
@@ -23,7 +23,7 @@ from cl_datavars import glob_attr
 from os import path
 from os import readlink,access,R_OK
 from cl_utils import isMount,typeFile,getTupleVersion,pathJoin,isFstabMount,\
-                     listDirectory
+                     listDirectory, getAvailableX11Drivers
 from cl_distr import DistributiveRepository,PartitionDistributive
 from cl_fill import clLocale
 from operator import itemgetter
@@ -864,11 +864,7 @@ class fillVars(object, glob_attr):
     def get_os_install_x11_video_drv(self):
         """Video driver used by xorg"""
         if self.Get('os_install_root_type') == 'usb-hdd':
-            xorg_modules_dir = '/usr/lib/xorg/modules/drivers'
-            avialable_drivers = \
-                map(lambda x: x[:-7],
-                filter(lambda x: x.endswith('_drv.so'),
-                listDirectory(xorg_modules_dir)))
+            avialable_drivers = getAvailableX11Drivers()
             videoVal = self.getValueFromCmdLine("calculate","video")
             videoVal = {'i915':'intel'}.get(videoVal,videoVal)
             if videoVal in list_avialable_drivers:
@@ -879,7 +875,7 @@ class fillVars(object, glob_attr):
     
     def get_os_install_x11_composite(self):
         """On/off composite"""
-        defaultCompositeOn = ("nvidia","intel","fglrx","nouveau")
+        defaultCompositeOn = ("nvidia","intel","fglrx","nouveau","radeon")
         composite = self.getValueFromCmdLine("calculate",5)
         videodrv = self.getValueFromCmdLine("calculate",4)
         if videodrv != "auto":
diff --git a/pym/cl_install.py b/pym/cl_install.py
index 760d080..9009e36 100644
--- a/pym/cl_install.py
+++ b/pym/cl_install.py
@@ -849,6 +849,8 @@ class cl_install(color_print, SignalInterrupt):
                 self.clVars.Get('hr_cpu_num'))
         self.printSUCCESS(_("Videocard vendor")+": %s"%
                 self.clVars.Get('hr_video'))
+        self.printSUCCESS(_("{0} video driver").format("Xorg")+": %s"%
+                self.clVars.Get('os_install_x11_video_drv'))
         self.printSUCCESS(_("Screen resolution")+": %s"%
                 self.clVars.Get('os_install_x11_resolution'))
         self.defaultPrint("%s\n"%_("Localization"))
@@ -1767,7 +1769,20 @@ class cl_install(color_print, SignalInterrupt):
                 if path.exists(pathGlModules):
                     self.printMessageForTest(_("Configure OpenGL"))
                     self.printByResult(self.setupOpenGL())
-
+                # if change video driver, then restore initramfs
+                installDrv = self.clVars.Get('os_install_x11_video_drv')
+                if self.clVars.Get('os_x11_video_drv') != installDrv:
+                    initrdPath = path.join('/boot',
+                                self.clVars.Get('os_install_initrd'))
+                    initrdInstallPath = path.join('/boot',
+                                self.clVars.Get('os_install_initrd_install'))
+                    needMod = {'radeon':'radeon',
+                               'intel':'i915',
+                               'nouveau':'nouveau'}.get(installDrv,'uvesafb')
+                    if not InitRamFs(initrdPath).isModuleInside(needMod):
+                        self.printMessageForTest(_("Restore initramfs"))
+                        self.printByResult(InitRamFs(initrdInstallPath)\
+                                .cleanInitRamFs(initrdPath))
             except (InstallError,DistributiveError),e:
                 error = e
             except Exception,e:
diff --git a/pym/cl_kernel_utils.py b/pym/cl_kernel_utils.py
index 42944cc..2cae14b 100644
--- a/pym/cl_kernel_utils.py
+++ b/pym/cl_kernel_utils.py
@@ -133,6 +133,16 @@ class InitRamFs:
         os.chdir(self.prevDir)
         return res
 
+    def searchInside(self,searchFunc):
+        """Search data in file list of initramfs"""
+        cpioProcess = process("cpio", "-tf",
+                stdin=process("gzip", "-dc", self.initrdFile))
+        return filter(searchFunc,cpioProcess)
+
+    def isModuleInside(self,moduleName):
+        """Search module in initramfs"""
+        return bool(self.searchInside(lambda x: "%s.ko"%moduleName in x))
+
     def _packInitRamfs(self,newInitramfsFile=None):
         """Pack initramfs"""
         self.prevDir = os.getcwd()
