diff --git install/cl_install.py install/cl_install.py
index ce4c5f6..c8a69b3 100644
--- install/cl_install.py
+++ install/cl_install.py
@@ -744,7 +744,8 @@ class Install(color_print):
             self.startTask(_("Preparing the system for reboot"))
             self.prepareBoot(self.targetDistr)
         self.endTask()
-        if self.askConfirm(_("Would you like to reboot your computer "
+        if self.clVars.Get('os_install_pxe') == "off" and \
+            self.askConfirm(_("Would you like to reboot your computer "
                              "now to complete the installation?"),
                                 default="no") == "yes":
             os.system("/sbin/reboot")
diff --git install/cl_wsdl_install.py install/cl_wsdl_install.py
index c5e61bd..68eb984 100644
--- install/cl_wsdl_install.py
+++ install/cl_wsdl_install.py
@@ -75,6 +75,7 @@ class InstallInfo(CommonInfo):
     os_install_x11_composite = Boolean
     os_install_fb_resolution = String
     os_install_grub_terminal = String
+    os_audio_default = String
 
     cl_autopartition_device = Array(String)
     cl_autopartition_scheme = Array(String)
@@ -141,6 +142,8 @@ class Wsdl:
             normal=('cl_migrate_root_pwd','cl_migrate_data','cl_autologin'),
             hide=('cl_migrate_data',),
             brief=('cl_migrate_user',))
+        dv.addGroup(_("Audio"),
+            normal=('os_audio_default',))
         dv.addGroup(_("Video"),
             normal=('os_install_x11_video_drv','os_install_x11_composite',
                     'os_install_x11_resolution','os_install_fb_resolution',
@@ -399,3 +402,33 @@ class Wsdl:
     @installCatchExcept
     def setup_system_view (self, sid, params):
         return commonView(self,sid,params,"setup_system")
+
+    def setup_audio_vars(self):
+        dv = cl_install.DataVarsInstall()
+        dv.importInstall()
+        dv.flIniFile()
+        dv.Set('cl_action','merge',True)
+        dv.Set('cl_merge_pkg',[None],True)
+        dv.Set('cl_merge_set',"on",True)
+        dv.Set('cl_setup','audio',True)
+        dv.addGroup(None,
+            normal=('os_audio_default',),
+            expert=('cl_templates_locate',"cl_dispatch_conf","cl_verbose_set"),
+            next_label=_("Save"))
+        return dv
+
+    @rpc(Integer, InstallInfo, _returns = Array(ReturnedMessage))
+    @core_method(category=__('Configuration'),title=__('Audio'),
+        image='audio-card',command="cl-setup-audio",
+        gui=True, rights=['setup'])
+    def setup_audio ( self, sid, info):
+        """
+        Setup locale
+        """
+        return self.callMethod(sid,info,logicClass=cl_install.Install,
+                           method="setupSystem",method_name="setup_audio")
+
+    @rpc(Integer, ViewParams,_returns = ViewInfo)
+    @installCatchExcept
+    def setup_audio_view (self, sid, params):
+        return commonView(self,sid,params,"setup_audio")
diff --git install/variables/autopartition.py install/variables/autopartition.py
index 7c9c4da..52ca7a9 100644
--- install/variables/autopartition.py
+++ install/variables/autopartition.py
@@ -869,7 +869,7 @@ class VariableClAutopartitionDeviceSize(ReadonlyVariable):
                                  _in=devices))
         # TODO: remove set 10G
         #return str(1024*1024*1024*10)
-        return str(reduce(operator.add,sizeDevice))
+        return str(reduce(operator.add,sizeDevice,0))
 
 class VariableClAutopartitionFreeSize(ReadonlyVariable):
     """
diff --git install/variables/disk.py install/variables/disk.py
index 639aa85..5988067 100644
--- install/variables/disk.py
+++ install/variables/disk.py
@@ -1680,6 +1680,8 @@ class VariableOsInstallMbr(LocationHelper,Variable):
             if len(value) > 1:
                 raise VariableError(
                     _("For Flash install, you need only one disk"))
+        if self.Get('os_install_uefi_set') == 'on':
+            return
         for mbrDisk in value:
             if self.Get('cl_autopartition_set') == 'on':
                 tableOnBootDisk = self.Get('cl_autopartition_table')
diff --git install/variables/system.py install/variables/system.py
index 184f651..8303f13 100644
--- install/variables/system.py
+++ install/variables/system.py
@@ -19,7 +19,8 @@ import sys
 import re
 from os import path
 from calculate.lib.datavars import Variable,VariableError,ReadonlyVariable, \
-                                   TableVariable,PasswordError
+                                   TableVariable,PasswordError, \
+                                   ReadonlyTableVariable,FieldValue
 from calculate.install.fs_manager import FileSystemManager
 from calculate.lib.utils.files import (readFile,getProgPath,process,
     readLinesFile)
@@ -509,13 +510,14 @@ class VariableClSetup(Variable):
     value = ""
 
     def choice(self):
-        return ["network","locale","video","boot","users",""]
+        return ["audio","network","locale","video","boot","users",""]
 
     def humanReadable(self):
         mapType = {'network':_("network settings"),
                    'locale':_("localization and time options"),
                    'video':_("video settings"),
                    'boot':_("boot parameters"),
+                   'audio':_("audio parameters"),
                    'users':_("user settings") }
         return mapType.get(self.Get(),"")
 
@@ -650,3 +652,92 @@ class VariableOsInstallGrubTerminal(Variable):
 
     def choice(self):
         return ['gfxterm','console']
+
+    def uncompatible(self):
+        """
+        Grub setting up unavailable for flash installation
+        """
+        if self.Get('os_install_root_type') == 'flash':
+            return _("Grub configuration unavailable for Flash install")
+        return ""
+
+class VariableOsAudioData(ReadonlyTableVariable):
+    """
+    Information about audio cards
+    """
+    source = ['os_audio_id',
+              'os_audio_name']
+
+    def get(self,hr=False):
+        """LVM hash"""
+        aplay = getProgPath('/usr/bin/aplay')
+        if not aplay:
+            return [[]]
+        entry = re.compile('^card (\d+): ([^,]+)')
+        return tuple(map(lambda x:x.groups(),
+               filter(None,map(entry.search,
+               process(aplay,'-l')))))
+
+    setValue = Variable.setValue
+
+class VariableOsAudioId(FieldValue,ReadonlyVariable):
+    """
+    Order Id of audio card
+    """
+    type = "list"
+    source_variable = "os_audio_data"
+    column = 0
+
+class VariableOsAudioName(FieldValue,ReadonlyVariable):
+    """
+    Name of audio card
+    """
+    type = "list"
+    source_variable = "os_audio_data"
+    column = 1
+
+class VariableOsAudioDefaultSet(ReadonlyVariable):
+    """
+    Force write in config 0
+    """
+    type = "bool"
+
+    def get(self):
+        res = self.Select('os_audio_id',where='os_audio_name',
+                              notlike='HDMI',limit=1)
+        audioDefault = self.Get('os_audio_default')
+        if audioDefault != '0' or \
+            res and res != "0" and audioDefault == '0':
+            return 'on'
+        return 'off'
+
+class VariableOsAudioDefault(Variable):
+    """
+    Current default audio card
+    """
+    type  = "choice"
+    opt = ['--audio']
+
+    def init(self):
+        self.label = _("Default audio card")
+        self.help = _("set default audio card")
+
+    def get(self):
+        defaultCardRe = re.compile('defaults.ctl.card\s+(\d+)')
+        entry = defaultCardRe.search(readFile('/etc/asound.conf'))
+        if entry and entry.groups()[0] in self.Get('os_audio_id'):
+            return entry.groups()[0]
+        res = self.Select('os_audio_id',where='os_audio_name',
+                          notlike='HDMI',limit=1)
+        return res or '0'
+
+    def choice(self):
+        return self.Get('os_audio_data')
+
+    def uncompatible(self):
+        """
+        Audio setting up unavailable for flash installation
+        """
+        if self.Get('os_install_root_type') == 'flash':
+            return _("Audio configuration unavailable for Flash install")
+        return ""
