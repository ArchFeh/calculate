diff --git install/cl_install.py install/cl_install.py
index f4a511b..a225a7a 100644
--- install/cl_install.py
+++ install/cl_install.py
@@ -590,16 +590,14 @@ class Install(color_print):
         self.endTask()
 
         self.startTask(_("Copying configuration files to the new system"))
-        fileMask = r"/etc/udev/rules\.d/70-persistent-net\.rules"
         if self.clVars.Get('os_root_type') != "livecd":
             fileMask = \
-                "(%s|/etc/ssh/ssh_host_.*|/root/.ssh/(id_.*|known_hosts))"% \
-                    fileMask
-        fileCpy = otherfilesCopy(target=targetDistr.getDirectory(),
-                                 reTest=fileMask)
-        fileCpy.performCopy('/etc')
-        if path.exists('/root/.ssh'):
-            fileCpy.performCopy('/root/.ssh')
+                "(/etc/ssh/ssh_host_.*|/root/.ssh/(id_.*|known_hosts))"
+            fileCpy = otherfilesCopy(target=targetDistr.getDirectory(),
+                                     reTest=fileMask)
+            fileCpy.performCopy('/etc')
+            if path.exists('/root/.ssh'):
+                fileCpy.performCopy('/root/.ssh')
         self.endTask()
 
         # optimize initrd
diff --git install/cl_wsdl_install.py install/cl_wsdl_install.py
index 390127f..0d0e7fb 100644
--- install/cl_wsdl_install.py
+++ install/cl_wsdl_install.py
@@ -42,6 +42,7 @@ __ = getLazyLocalTranslate(_)
 class InstallInfo(CommonInfo):
     """Parameters for method install"""
     cl_image_filename = String
+    cl_image_new_only = Boolean
     cl_image_linux_shortname = String
     cl_image_arch_machine = String
     cl_image_linux_ver = String
@@ -113,7 +114,7 @@ class Wsdl:
             normal=('os_install_locale_lang','os_install_clock_timezone'))
         dv.addGroup(_("Distribution"),
             normal=('cl_image_filename',),
-            expert=('cl_image_linux_shortname', 'cl_image_arch_machine'))
+            expert=('cl_image_linux_shortname', 'cl_image_arch_machine','cl_image_new_only'))
         dv.addGroup(_("Allocate drive space"),
             normal=('cl_autopartition_set',),
             expert=('cl_autopartition_scheme','cl_autopartition_device',
diff --git install/variables/distr.py install/variables/distr.py
index eb12c9d..7f24231 100644
--- install/variables/distr.py
+++ install/variables/distr.py
@@ -20,7 +20,8 @@ from os import path
 import re
 import operator
 from operator import itemgetter
-from calculate.lib.datavars import Variable,VariableError,ReadonlyVariable
+from calculate.lib.datavars import Variable,VariableError,ReadonlyVariable, \
+                                CommonVariableError
 from calculate.lib.utils.common import getSupportArch,getTupleVersion, \
                             cmpVersion
 from calculate.lib.utils.files import readLinesFile, listDirectory
@@ -294,6 +295,7 @@ class VariableClImageFilename(Variable,DistroRepository):
         if not("os_linux_shortname" in imageData and \
                imageData.get('os_linux_build','') and \
             "os_arch_machine" in imageData):
+            print imageData,isoimage
             raise VariableError(_("Wrong image file"))
 
     def humanImageName(self,distroinfo,filepath):
@@ -514,3 +516,42 @@ class VariableClTarget(ReadonlyVariable):
                     systemId=None,
                     partitionTable='')
             return target
+
+class VariableClImageNewOnly(Variable):
+    """
+    Distributive image filename
+    """
+    type = 'bool'
+    opt = ['-U','--update']
+    value = "off"
+
+    def init(self):
+        self.label = _("Install newer images only")
+        self.help = _("install newer images only")
+        
+    def installedBuild(self):
+        """
+        Get build already installed system
+        Need for check update
+        """
+        imageData = None
+        rootDev = self.Get('os_install_root_dev')
+        if not rootDev:
+            return ""
+        try:
+            imageData = Distributive().getInfo(rootDev)
+            return imageData.get('os_linux_build','')
+        except:
+            pass
+        return ""
+
+    def check(self,value):
+        if value == 'on':
+            try:
+                imageData = Distributive().getInfo(self.Get('cl_image_filename'))
+            except Exception as e:
+                raise VariableError(_("Wrong image file"))
+            if imageData.get('os_linux_build','') <= \
+                self.Get('os_linux_build') or \
+                imageData.get('os_linux_build','') <= self.installedBuild():
+                raise CommonVariableError(_("The image for update not found"))
diff --git install/variables/net.py install/variables/net.py
index c8801c4..2213077 100644
--- install/variables/net.py
+++ install/variables/net.py
@@ -28,11 +28,13 @@ from calculate.lib.utils.ip import (getInterfaces,getIp,getMask,getMac,
     cidrToMask,maskToCidr,getIpNet,isDhcpIp,checkIp,checkMask,
     getOperState)
 from calculate.lib.utils.device import lspci
-from calculate.lib.utils.files import listDirectory,readLinesFile,process
+from calculate.lib.utils.files import listDirectory,readLinesFile,process,\
+                                      readFile
 from calculate.lib.utils import ip
 from calculate.lib.utils.portage import isPkgInstalled
 from operator import itemgetter
 from itertools import *
+import hashlib
 
 class NetHelper:
     """
@@ -95,8 +97,12 @@ class VariableOsInstallNetInterfacesOrig(NetHelper,ReadonlyVariable):
             'etc/udev/rules.d/70-persistent-net.rules')
         pathNewUdevNet = path.join(chrootPath,
             'etc/udev/rules.d/80-net-name-slot.rules')
-        for foundPath in ifilter(path.exists,(pathOldUdevNet,
-                                              pathNewUdevNet)):
+        pathOrigUdevNet = path.join(chrootPath,
+            'lib/udev/rules.d/80-net-name-slot.rules')
+        if path.exists(pathOldUdevNet) or \
+            (path.exists(pathNewUdevNet) and 
+            hashlib.md5(readFile(pathNewUdevNet)).digest() != \
+            hashlib.md5(readFile(pathOrigUdevNet)).digest()):
             return self.Get('os_install_net_interfaces')
         def getOrig(x):
             try:
