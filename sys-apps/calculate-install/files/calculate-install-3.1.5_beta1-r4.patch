diff --git install/cl_install.py install/cl_install.py
index 42c0838..ce4c5f6 100644
--- install/cl_install.py
+++ install/cl_install.py
@@ -744,6 +744,11 @@ class Install(color_print):
             self.startTask(_("Preparing the system for reboot"))
             self.prepareBoot(self.targetDistr)
         self.endTask()
+        if self.askConfirm(_("Would you like to reboot your computer "
+                             "now to complete the installation?"),
+                                default="no") == "yes":
+            os.system("/sbin/reboot")
+            return True
         return True
 
     def rndString(self):
diff --git install/variables/disk.py install/variables/disk.py
index 8a75181..639aa85 100644
--- install/variables/disk.py
+++ install/variables/disk.py
@@ -804,7 +804,12 @@ class VariableOsLocationDest(LocationHelper,Variable):
             if type(val) == str and val:
                 return path.normpath(val)
             return val
-        value = map(normpath,value)
+        def eficonvert(val):
+            if val.lower() in ("efi","uefi"):
+                return "/boot/efi"
+            else:
+                return val
+        value = map(normpath,map(eficonvert,value))
         return map(lambda x:x or "/",value)
 
     def choice(self):
diff --git install/variables/distr.py install/variables/distr.py
index 5e92c5f..e6b764b 100644
--- install/variables/distr.py
+++ install/variables/distr.py
@@ -311,14 +311,28 @@ class VariableClImageFilename(Variable,DistroRepository):
                     distroinfo['os_linux_shortname'],""))
             if subname:
                 subname=" %s"%subname
-            vers = distroinfo['os_linux_build'] or \
+            build = distroinfo['os_linux_build'] or \
                 distroinfo.get('os_linux_ver','')
-            return "{fullname} {os_arch_machine} {ver}".format(
+            ver = distroinfo.get('os_linux_ver','')
+            return "{fullname} {os_arch_machine} {build}".format(
                 fullname="%s%s"%(fullname,subname),filepath=filepath,
-                ver=vers,**distroinfo)
+                build=build,ver=ver,**distroinfo)
         else:
             return filepath
 
+    def humanReadable(self):
+        fullname = self.Get('os_install_linux_name')
+        subname = self.Get('os_install_linux_subname')
+        if subname:
+            subname = " %s"%subname
+        arch = self.Get('os_install_arch_machine')
+        build = self.Get('os_install_linux_build')
+        ver = self.Get('os_install_linux_ver')
+
+        return "{fullname} {ver} {arch} {build}".format(
+                fullname="%s%s"%(fullname,subname),
+                build=build,ver=ver,arch=arch)
+
     def choice(self):
         scratch = self.Get('os_install_scratch')
         rootType = self.Get('os_install_root_type')
diff --git install/variables/kernel.py install/variables/kernel.py
index 0de0cd5..7ba7233 100644
--- install/variables/kernel.py
+++ install/variables/kernel.py
@@ -56,11 +56,17 @@ class VariableOsInstallKernelScheduler(Variable):
                 if "OCZ" in dev_name or "SSD" in dev_name:
                     return "noop"
         else:
-            return getValueFromCmdLine('elevator',0) or "cfq"
+            currentScheduler = getValueFromCmdLine('elevator',0)
+            if currentScheduler in map(lambda x:x[0],self.choice()):
+                return currentScheduler
         return "cfq"
     
     def choice(self):
-        return [("deadline","Deadline"),("cfq","CFQ"),("noop","No-op")]
+        schedulers = [("deadline","Deadline"),("cfq","CFQ"),("noop","No-op")]
+        if self.Get('os_install_kernel_bfq_set') == 'on':
+            return schedulers + [("bfq","BFQ")]
+        else:
+            return schedulers
 
     def uncompatible(self):
         """
@@ -69,6 +75,23 @@ class VariableOsInstallKernelScheduler(Variable):
         if self.Get('os_install_root_type') == 'flash':
             return _("I/O scheduler unavailable for Flash install")
 
+class VariableOsInstallKernelBfqSet(ReadonlyVariable):
+    """
+    Available BFQ in kernel
+    """
+    type = "bool"
+
+    def get(self):
+        image = self.Get('cl_image')
+        if image:
+            with image as distr:
+                distrPath = image.getDirectory()
+                kernelConfig = path.join(distrPath,"usr/src/linux/.config")
+                if filter(lambda x:"CONFIG_IOSCHED_BFQ=y" in x,
+                    readLinesFile(kernelConfig)):
+                    return "on"
+        return "off"
+
 class VariableOsInstallKernelAttr(Variable):
     """
     Install kernel attributes
diff --git install/variables/system.py install/variables/system.py
index 2e33a49..184f651 100644
--- install/variables/system.py
+++ install/variables/system.py
@@ -644,7 +644,7 @@ class VariableOsInstallGrubTerminal(Variable):
             return 'console'
         grubDefault = path.join(self.Get('cl_chroot_path'),
                                 'etc/default/grub')
-        if getValueFromConfig(grubDefault,'GRUB_TERMINAL_OUTPUT') == 'console':
+        if getValueFromConfig(grubDefault,'GRUB_TERMINAL') == 'console':
             return 'console'
         return 'gfxterm'
 
