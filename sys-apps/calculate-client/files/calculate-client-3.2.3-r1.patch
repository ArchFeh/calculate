diff --git pym/client/client.py pym/client/client.py
index 7a4cff6..2833b94 100644
--- pym/client/client.py
+++ pym/client/client.py
@@ -204,12 +204,12 @@ class commandServer(color_print):
             if not pwDialog:
                 pwDialog = [_("New password"),
                             _("Retype the new password")]
-            pwdA = getpass.getpass(pwDialog[0]+":")
-            pwdB = getpass.getpass(pwDialog[1]+":")
+            pwdA = getpass.getpass(pwDialog[0]+_(":"))
+            pwdB = getpass.getpass(pwDialog[1]+_(":"))
         if (optStdIn and options.has_key(optStdIn)) or\
             (optDialog and options.has_key(optDialog)):
             if not pwdA or not (pwdA == pwdB):
-                self.printERROR (_("ERROR") + ": " +\
+                self.printERROR (_("ERROR") + _(": ") +\
                 _("passwords do not match"))
                 return False
             userPwd = pwdA
@@ -953,7 +953,7 @@ class Client(commandServer, encrypt, Desktop):
                    # \s*<название_службы>\s*|\s*<уроверь запуска>?\s*
                    p.readlines())))
         else:
-            raise ClientError(_("ERROR") + ": " + p.read())
+            raise ClientError(_("ERROR") + _(": ") + p.read())
 
     def delDaemonAutostart(self, daemon):
         """
@@ -966,7 +966,7 @@ class Client(commandServer, encrypt, Desktop):
             if p.success():
                 return True
             else:
-                self.printERROR(_("ERROR") + ": " + p.read())
+                self.printERROR(_("ERROR") + _(": ") + p.read())
                 self.printERROR(_("Failed to delete from the default runlevel"))
                 return False
         return True
@@ -982,7 +982,7 @@ class Client(commandServer, encrypt, Desktop):
         if p.success():
             return True
         else:
-            self.printERROR(_("ERROR") + ": " + p.read())
+            self.printERROR(_("ERROR") + _(": ") + p.read())
             self.printERROR(_("Failed to add to the default runlevel"))
             return False
 
@@ -1094,7 +1094,7 @@ class Client(commandServer, encrypt, Desktop):
         bindPw = self.getInfoService("unix", "bind_pw")
         # check info from server
         if not (servDn and unixDn and bindDn and bindPw):
-            raise ClientError(_("Info not found on the server") + ": " +\
+            raise ClientError(_("Info not found on the server") + _(": ") +
                 _("services DN or unix DN or bind DN or bind password"))
         self.clVars.Set("os_remote_auth", domain)
         return True
@@ -1185,8 +1185,8 @@ class Client(commandServer, encrypt, Desktop):
             return True
         else:
             if not (domain and pwdRemote):
-                self.printERROR(_("Variable not found")+\
-                        ": cl_remote_pw")
+                self.printERROR(_("Variable not found")+
+                                _(": ") + "cl_remote_pw")
                 return False
             if not os.path.exists(pathRemote):
                 os.makedirs(pathRemote)
diff --git pym/client/client_cache.py pym/client/client_cache.py
index dd4e9f2..200d48d 100644
--- pym/client/client_cache.py
+++ pym/client/client_cache.py
@@ -36,13 +36,15 @@ class _shareData(color_print):
             if os.access(self.fileName, os.R_OK):
                 return True
             else:
-                self.printERROR(_("Failed to read the file")+": "+self.fileName)
+                self.printERROR(_("Failed to read the file")+_(": ") +
+                                self.fileName)
             return False
         elif perm == "WRITE":
             if os.access(self.fileName, os.W_OK):
                 return True
             else:
-                self.printERROR(_("Failed to write to file")+": "+self.fileName)
+                self.printERROR(_("Failed to write to file")+_(": ") +
+                                self.fileName)
                 return False
 
     def getData(self):
