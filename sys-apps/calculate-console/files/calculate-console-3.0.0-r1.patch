diff --git .gitignore .gitignore
index ea7e6a7..279d4d2 100644
--- .gitignore
+++ .gitignore
@@ -3,3 +3,6 @@ build
 *.pyc
 *.kate-swp
 *.mo
+mymake
+.gitignore
+Makefile
diff --git console/application/cl_client.py console/application/cl_client.py
index 7bdc5b1..1ec21e2 100644
--- console/application/cl_client.py
+++ console/application/cl_client.py
@@ -65,6 +65,8 @@ class StoppableThread(threading.Thread):
     def __init__(self):
         super(StoppableThread, self).__init__()
         self._stop = threading.Event()
+        self._pause = threading.Event()
+        self._paused = threading.Event()
 
     def run(self):
         l = ['|','/','-','\\','|','/','-','\\']
@@ -74,10 +76,23 @@ class StoppableThread(threading.Thread):
                 sys.stdout.write("\r\r" + i)
                 sys.stdout.flush()
                 time.sleep(.1)
+                while self.paused() and not self.stopped():
+                    self._paused.set()
                 if self.stopped():
                     sys.stdout.write("\b")
                     sys.stdout.flush()
                     return 0
+                    
+
+    def pause(self):
+        self._pause.set()
+        while not self._paused.is_set():
+            self._paused.clear()
+            sys.stdout.write("\r")
+            sys.stdout.flush()
+
+    def resume(self):
+        self._pause.clear()
 
     def stop(self):
         self._stop.set()
@@ -85,6 +100,9 @@ class StoppableThread(threading.Thread):
     def stopped(self):
         return self._stop.isSet()
 
+    def paused(self):
+        return self._pause.isSet()
+
 def connect_with_cert(cert, path_to_cert, url, args, wait_thread, clVarsCore,
                       crypto_Error, Connect_Error):
     flag_thread_start = False
@@ -237,10 +255,10 @@ def https_server(client, args, unknown_args, url, clVarsCore, wait_thread):
         view_params = get_view_params(client, args.method + '_view',
                                       step = None, expert = True)
         view = get_view(client, args.method, client.sid, view_params)
-        method_parser = get_method_argparser(view, args)
         wait_thread.stop()
         sys.stdout.write("\b")
         sys.stdout.flush()
+        method_parser = get_method_argparser(view, args)
         method_parser.print_help()
         client.service.clear_method_cache(client.sid, args.method)
 
@@ -402,7 +420,7 @@ def main(wait_thread):
                 if type(e.message) != int:
                     if e.message:
                         print e.message
-                    else:
+                    elif e.args:
                         print e
 #                    tb.print_exc()
                 return 1
@@ -504,7 +522,7 @@ def main(wait_thread):
             if type(e.message) != int:
                 if e.message:
                     print e.message
-                else:
+                elif e.args:
                     print e
 #                tb.print_exc()
             return 1
diff --git console/application/function.py console/application/function.py
index dbcbe5f..22b14d6 100644
--- console/application/function.py
+++ console/application/function.py
@@ -96,8 +96,9 @@ def get_ip_mac_type(client_type = None):
     return results
 
 def print_brief_group(Fields, group_name):
-    if group_name:
-        _print ('\b'+group_name)
+    print_group_flag = False
+#    if group_name:
+#        _print ('\b'+group_name)
     uncompatible_count = 0
     for field in Fields:
         if field.uncompatible:
@@ -105,6 +106,9 @@ def print_brief_group(Fields, group_name):
             continue
         if field.element in ['input', 'openfile']:
             value = field.value if field.value else ''
+            if not print_group_flag:
+                _print ('\b'+group_name)
+                print_group_flag = True
             colorPrint._printSUCCESS('%s: %s' %(field.label, value))
 
         elif field.element in ['combo', 'comboEdit', 'radio', 'file']:
@@ -118,6 +122,9 @@ def print_brief_group(Fields, group_name):
                 value = ', '.join(value)
             else:
                 value = field.value if field.value else ''
+            if not print_group_flag:
+                _print ('\b'+group_name)
+                print_group_flag = True
             colorPrint._printSUCCESS('%s: %s' %(field.label, value))
 
         elif field.element in ['multichoice', 'multichoice_add',\
@@ -134,12 +141,18 @@ def print_brief_group(Fields, group_name):
                 value = ', '.join(field.listvalue.string)
             else:
                 value = field.value if field.value else ''
+            if not print_group_flag:
+                _print ('\b'+group_name)
+                print_group_flag = True
             colorPrint._printSUCCESS('%s: %s' %(field.label, value))
 
 #        elif field.element == 'label':
 #            print field.label
 
         elif field.element == 'error':
+            if not print_group_flag:
+                _print ('\b'+group_name)
+                print_group_flag = True
             colorPrint.printERROR(field.label)
 
         elif field.element in ['check', 'check_tristate']:
@@ -151,6 +164,9 @@ def print_brief_group(Fields, group_name):
                 value = _('auto')
             else:
                 value = field.value
+            if not print_group_flag:
+                _print ('\b'+group_name)
+                print_group_flag = True
             colorPrint._printSUCCESS('%s: %s' %(field.label, value))
 
         elif field.element == 'table' and field.type != 'steps':
@@ -192,6 +208,9 @@ def print_brief_group(Fields, group_name):
             for body_row in body:
                 data.append(map(lambda x: x if x else '', body_row))
 
+            if not print_group_flag:
+                _print ('\b'+group_name)
+                print_group_flag = True
             colorPrint._printSUCCESS('%s: ' %(field.label))
             res = printTable(data, head)
             sys.stdout.flush()
@@ -200,8 +219,8 @@ def print_brief_group(Fields, group_name):
         else:
             uncompatible_count += 1
 
-    if uncompatible_count == len (Fields) and group_name:
-        colorPrint._printSUCCESS(_('Not used'))
+#    if uncompatible_count == len (Fields) and group_name:
+#        colorPrint._printSUCCESS(_('Not used'))
 
 def print_brief(view, brief_label):
     for Group in view.groups.GroupField:
diff --git console/application/methods_func.py console/application/methods_func.py
index 7afde09..2087b4a 100644
--- console/application/methods_func.py
+++ console/application/methods_func.py
@@ -90,6 +90,10 @@ def parse():
     parser.add_argument(
         '-f', '--force', action='store_true', default=False,
         dest = 'no_questions', help=_('silent during the process'))
+    parser.add_argument(
+        '-P', action='store_true', default=False,
+        dest = 'stdin_passwd',
+        help=_('use passwords for the users accounts from standard input'))
     return parser
 
 def get_view(client, method, sid, view_params):
@@ -103,6 +107,7 @@ def get_view(client, method, sid, view_params):
 def call_method(client, args, wait_thread):
     method = args.method
     no_questions = args.no_questions
+    stdin_passwd = args.stdin_passwd
     view_params = get_view_params(client, method + '_view', step = None, \
                                   expert = True)
 
@@ -122,7 +127,7 @@ def call_method(client, args, wait_thread):
                 _print (_('Unknown parameter'), i)
                 raise Exception(1)
     param_object, steps = collect_object(client, param_object, view, args,
-                                         wait_thread)
+                                         wait_thread,stdin_passwd=stdin_passwd)
     if steps.label and hasattr (param_object, 'CheckOnly'):
         param_object['CheckOnly'] = True
         check_res = {}
diff --git scripts/cl-console scripts/cl-console
index 9431995..33650cb 100755
--- scripts/cl-console
+++ scripts/cl-console
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/env python2
 #-*- coding: utf-8 -*-
 
 # Copyright 2012 Calculate Ltd. http://www.calculate-linux.org
@@ -34,4 +34,4 @@ if __name__=='__main__':
         wait_thread.stop()
         red = '\033[31m * \033[0m'
         print '\n'+red+_('Interrupted by the user')
-        sys.exit(1)
\ No newline at end of file
+        sys.exit(1)
