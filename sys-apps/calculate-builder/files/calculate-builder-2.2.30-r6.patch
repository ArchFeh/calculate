diff --git pym/cl_builder.py pym/cl_builder.py
index 2cc5334..180a0b3 100644
--- pym/cl_builder.py
+++ pym/cl_builder.py
@@ -328,7 +328,7 @@ class cl_builder(color_print):
         createdDev = self.createUrandom(mp)
         self.dispatchConf(mp)
         self.updatePortage(mp)
-        self.clearPortage(mp)
+        #self.clearPortage(mp)
         self.updateMan(mp)
         self.removeUrandom(mp,createdDev)
 
@@ -578,8 +578,12 @@ class cl_builder(color_print):
         """Get list for portage exclude by 'cl_builder_tree'"""
         if self.clVars.Get('cl_builder_tree') == 'off':
             portagePath = pathJoin(sourceDirectory,"usr/portage")
-            return map(lambda x: path.join("usr/portage",x),
-                  filter(lambda x: not x in ( "eclass", "licenses", "profiles"),
+            overlayPath = pathJoin(sourceDirectory,"var/lib/layman/calculate")
+            return map(lambda x: path.join("var/lib/layman/calculate",x),
+                  filter(lambda x: not x in ("distfiles", "eclass", ".git","profiles"),
+                  listDirectory(overlayPath))) + \
+                  map(lambda x: path.join("usr/portage",x),
+                  filter(lambda x: not x in ("distfiles", "eclass", ".git","profiles"),
                   listDirectory(portagePath)))
         else:
             return []
diff --git pym/cl_fill_builder.py pym/cl_fill_builder.py
index fbaf6df..77727f1 100644
--- pym/cl_fill_builder.py
+++ pym/cl_fill_builder.py
@@ -281,11 +281,31 @@ class fillVars(object, varsShare):
         systemRoot = self.Get('cl_builder_path')
         return str(countFiles(systemRoot))
 
+    def getVersionFromCalculateEnv(self,systemroot):
+        """Get version from calculate ini"""
+        pathname = path.join(systemroot,
+                      'var/lib/layman/calculate/profiles/calculate.env')
+        if path.exists(pathname):
+            FD = open(pathname)
+            data = FD.readlines()
+            FD.close()
+            verList = filter(lambda y:y,
+                                   map(lambda x:\
+                                       len(x.split("="))==2 and\
+                                       x.split("=")[0].strip() == "os_linux_ver" and\
+                                       x.split("=")[1].strip(), data))
+            if verList:
+                reVer=re.compile("^((\d+\.)*\d|\d+)$",re.S)
+                reRes = filter(reVer.search,verList)
+                if reRes:
+                    return reRes[0]
+
     def get_os_builder_linux_ver(self):
         """Build system ver"""
         linuxShortName = self.Get("os_builder_linux_shortname")
         rootSystem = self.Get('cl_builder_path')
         return self.getVersionFromMetapackage(rootSystem,linuxShortName) or \
+            self.getVersionFromCalculateEnv(rootSystem) or \
             self.getVersionFromCalculateIni(rootSystem) or \
             self.getVersionFromGentooFiles(rootSystem) or "0"
 
diff --git pym/cl_image_cmd.py pym/cl_image_cmd.py
index f05ac27..9564bec 100644
--- pym/cl_image_cmd.py
+++ pym/cl_image_cmd.py
@@ -70,6 +70,9 @@ CMD_OPTIONS = [{'shortOption':"p",
                 'optVal':"TIMEZONE",
                 'help':_("timezone by default")
                },
+               {'longOption':'keep-tree',
+                'help':_("keep portage tree in image")
+               },
                {'longOption':"set"},
                {'shortOption':"f",
                 'longOption':"force",
@@ -170,6 +173,9 @@ class image_cmd(share_cmd):
         if values.noisohybrid:
             self.logicObj.clVars.Set('cl_builder_isohybrid_set','off',True)
 
+        if values.keep_tree:
+            self.logicObj.clVars.Set('cl_builder_tree','on',True)
+
         if args and args[0] == "squash":
             self.logicObj.clVars.Set('cl_builder_iso_path','/mnt/flash',True)
         if values.timezone and not self.logicObj.setTimezone(values.timezone):
diff --git pym/cl_kernel.py pym/cl_kernel.py
index b6e3c35..456efad 100644
--- pym/cl_kernel.py
+++ pym/cl_kernel.py
@@ -74,12 +74,23 @@ class cl_kernel(color_print):
         """Test directory for kernel sources"""
         makefilepath = path.join(dirpath,'Makefile')
         kbuildpath = path.join(dirpath,'Kbuild')
-        if not path.exists(makefilepath) \
-            or not path.exists(kbuildpath) \
-            or not "Kbuild for top-level directory of the kernel" in \
+        if path.exists(makefilepath) \
+            and path.exists(kbuildpath) \
+            and "Kbuild for top-level directory of the kernel" in \
                 open(kbuildpath,'r').read():
-            return False
-        return True
+            return True
+        return False
+
+    def _testFullKernelDirectory(self,dirpath):
+        """To check the directory for full kernel sources
+        
+        Kernel may be installed with minimal (later vmlinuz) flag"""
+        documentationPath = path.join(dirpath,'Documentation')
+        driversPath = path.join(dirpath,'drivers')
+        if path.exists(documentationPath) \
+            and path.exists(driversPath):
+            return True
+        return False
 
     def setNoColor(self):
         self.color = False
@@ -95,19 +106,7 @@ class cl_kernel(color_print):
                    mrproper=False,target="all"):
         """Run kernel compilation"""
         clVars = self.clVars
-        for themePkg in ['media-gfx/cldx-themes',
-                         'media-gfx/cld-themes',
-                         'media-gfx/cldg-themes',
-                         'media-gfx/cls-themes',
-                         'media-gfx/cds-themes',
-                         'media-gfx/cmc-themes']:
-            installed = getPkgInstalled(themePkg,
-                                       prefix=self.clVars.Get('cl_chroot_path'))
-            if installed and installed[0]['PV'].startswith('12'):
-                themeName = "calculate"
-                break
-        else:
-            themeName = "tty1"
+        themeName = "calculate"
         standardParams = ["--splash=%s"%themeName, "--unionfs",
                           "--all-ramdisk-modules","--disklabel",
                           "--no-save-config", "--firmware","--udev",
diff --git pym/cl_kernel_cmd.py pym/cl_kernel_cmd.py
index 3a85ada..54edbc0 100644
--- pym/cl_kernel_cmd.py
+++ pym/cl_kernel_cmd.py
@@ -121,12 +121,30 @@ class kernel_cmd(share_cmd):
             self.checkIncompatibleParam("initrd")
         if values.symlink:
             self.checkIncompatibleParam("symlink")
-        if values.k:
-            if not self.logicObj._testKernelDirectory(values.k):
-                self.optobj.error("%s:'%s'"%
-                    (_("wrong kernel source directory"),values.k))
-            else:
-                self.logicObj.clVars.Set('cl_kernel_src_path',values.k,True)
+        if not values.v:
+            if values.k:
+                if not self.logicObj._testKernelDirectory(values.k):
+                    self.optobj.error("%s:'%s'"%
+                        (_("wrong kernel source directory"),values.k))
+                elif not values.initrd and \
+                     not self.logicObj._testFullKernelDirectory(values.k) \
+                        and self.checkNotEbuildParam(values,"postinst"):
+                    self.optobj.error(("%s:'%s'"%
+                        (_("in directory of kernel source not "
+                           "enough needed files"),
+                            values.k))+"\n"+
+                            _("Probably calculate-sources was "
+                              "compiled with USE 'minimal'"))
+                else:
+                    self.logicObj.clVars.Set('cl_kernel_src_path',values.k,True)
+            elif self.checkNotEbuildParam(values,"postinst"):
+                if not values.initrd and \
+                    not self.logicObj._testFullKernelDirectory(
+                        self.logicObj.clVars.Get('cl_kernel_src_path')):
+                    self.optobj.error((_("in default directory of kernel "
+                       "source not enough needed files")+"\n"+
+                       _("Probably calculate-sources was "
+                         "compiled with USE 'minimal'")))
         if values.c and values.o:
             self.optobj.error("%s: %s"%(_("incompatible options"),
                               self.getStringIncompatibleOptions(["c","o"])))
@@ -161,6 +179,9 @@ class kernel_cmd(share_cmd):
     def checkEbuildParam(self,options,phase):
         return not options.ebuild or os.environ["EBUILD_PHASE"] == phase
 
+    def checkNotEbuildParam(self,options,phase):
+        return not options.ebuild or os.environ["EBUILD_PHASE"] != phase
+
     def makeKernel(self,options):
         """Run kernel compilation, installation, optimization"""
         # if set ebuild param check cur EBUILD_PHASE, run kernel compilation
diff --git pym/cl_vars_builder.py pym/cl_vars_builder.py
index 44e4965..c1fd439 100644
--- pym/cl_vars_builder.py
+++ pym/cl_vars_builder.py
@@ -98,7 +98,7 @@ class Data:
     cl_builder_kernel_suffix = {}
 
     # include portage directory from image
-    cl_builder_tree = {'value':'on'}
+    cl_builder_tree = {'value':'off'}
 
     cl_builder_isohybrid_set = {'value':'on'}
 
