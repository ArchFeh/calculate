diff --git pym/cl_builder.py pym/cl_builder.py
index 572e6c7..b6e3582 100644
--- pym/cl_builder.py
+++ pym/cl_builder.py
@@ -231,6 +231,13 @@ class cl_builder(color_print):
                 removeKernelSources)
             self.printByResult(True)
 
+    def dispatchConf(self, distrPath):
+        """Execute dispatch conf for """
+        self.printMessageForTest(_("Execute '%s'")%"dispatch-conf")
+        # run dispatch conf interactive
+        os.system("chroot %s /bin/bash -c '/usr/sbin/dispatch-conf'"%
+                  distrPath)
+
     def prepareSourceDistributive(self,distr):
         """Unmount all bind,proc mount points from source distribute"""
         mp = self.clVars.Get('cl_builder_path')
@@ -243,6 +250,7 @@ class cl_builder(color_print):
             self.printByResult(True)
         distrPath = distr.convertToDirectory().getDirectory()
         self.cleanNeedlessKernelData(distrPath)
+        self.dispatchConf(distrPath)
 
         if self.assembleIso and \
             self.clVars.Get('os_builder_profile').endswith('binary'):
@@ -580,13 +588,6 @@ class cl_builder(color_print):
             dialogRes = dialogYesNo(dialogMessage)
             if dialogRes in (None,False):
                 return True
-        self.printMessageForTest(_("Prepare data for live image"))
-        self.prepareSourceDistributive(self.sourceDistr)
-        self.printByResult(True)
-        self.targetDistr.prepareIso = self.flashPrepacking
-        self.printMessageForTest(_("Creating squash image"))
-        self.targetDistr.installFrom(self.sourceDistr)
-        self.printByResult(True)
 
         self.printMessageForTest(_("Removing old images"))
         oldImages = map(lambda x:pathJoin(buildDirectory,x),
@@ -597,6 +598,14 @@ class cl_builder(color_print):
             raise BuilderError(_("Can not remove old files")+":\n%s"%str(e))
         self.printByResult(True)
 
+        self.printMessageForTest(_("Prepare data for live image"))
+        self.prepareSourceDistributive(self.sourceDistr)
+        self.printByResult(True)
+        self.targetDistr.prepareIso = self.flashPrepacking
+        self.printMessageForTest(_("Creating squash image"))
+        self.targetDistr.installFrom(self.sourceDistr)
+        self.printByResult(True)
+
         self.printMessageForTest(_("Performing syncronization"))
         processSync = process("/bin/sync")
         self.printByResult(processSync.success())
diff --git pym/cl_fill_builder.py pym/cl_fill_builder.py
index 2b4d512..6f20032 100644
--- pym/cl_fill_builder.py
+++ pym/cl_fill_builder.py
@@ -23,7 +23,7 @@ from os import access, R_OK,W_OK
 from os import path
 from cl_distr import Distributive
 from cl_utils import getTupleVersion,genpassword,pathJoin,_toUNICODE, \
-                     getFilesCount
+                     getFilesCount,getCmdLineParam
 from operator import itemgetter
 from types import ListType
 from cl_datavars import iniParser
@@ -110,7 +110,13 @@ class fillVars(object, varsShare):
         kernelDirs = self.Get('cl_kernel_config_path')
         if not access(kernelDirs,R_OK):
             return ""
-        shortVerSearch = re.search("^\d+\.\d+.\d+",self.Get('cl_kernel_ver'),re.I)
+        # check first number (3 or other kernel)
+        tupleKernelVer = self.Get('cl_kernel_ver').split('.')
+        if tupleKernelVer and tupleKernelVer[0] == '3':
+            shortVerSearch = re.search("^\d+\.\d+",
+                self.Get('cl_kernel_ver'),re.I)
+        else:
+            shortVerSearch = re.search("^\d+\.\d+.\d+",self.Get('cl_kernel_ver'),re.I)
         if shortVerSearch:
             shortVer = shortVerSearch.group()
         else:
@@ -309,21 +315,18 @@ class fillVars(object, varsShare):
         squashfiles = filter(lambda x:x,
                              map(Distributive.reLive.search,
                                  os.listdir(directory)))
+        curName = self.Get('cl_builder_current_squash')
         if squashfiles:
-            return map(lambda x:x.group(),
-                sorted(squashfiles, key=self.getSquashNum))[:-1]
+            return  filter(lambda x:x != curName,
+                    map(lambda x:x.group(),
+                    sorted(squashfiles, key=self.getSquashNum)))
         return ""
 
     def get_cl_builder_current_squash(self):
         """Livecd.squashfs name (may be livecd.squashfs.2 and etc)"""
-        directory = self.Get('cl_builder_iso_path')
-        if not os.access(directory,R_OK):
-            return ""
-        squashfiles = filter(lambda x:x,
-                             map(Distributive.reLive.search,
-                                 os.listdir(directory)))
-        if squashfiles:
-            return max(squashfiles, key=self.getSquashNum).group()
+        loopValue = getCmdLineParam('loop')
+        if loopValue:
+            return path.basename(loopValue)
         return ""
 
     def get_cl_builder_iso_path(self):
