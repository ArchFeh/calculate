diff --git a/pym/cl_kernel.py b/pym/cl_kernel.py
index b6e3c35..3ddf926 100644
--- a/pym/cl_kernel.py
+++ b/pym/cl_kernel.py
@@ -74,12 +74,23 @@ class cl_kernel(color_print):
         """Test directory for kernel sources"""
         makefilepath = path.join(dirpath,'Makefile')
         kbuildpath = path.join(dirpath,'Kbuild')
-        if not path.exists(makefilepath) \
-            or not path.exists(kbuildpath) \
-            or not "Kbuild for top-level directory of the kernel" in \
+        if path.exists(makefilepath) \
+            and path.exists(kbuildpath) \
+            and "Kbuild for top-level directory of the kernel" in \
                 open(kbuildpath,'r').read():
-            return False
-        return True
+            return True
+        return False
+
+    def _testFullKernelDirectory(self,dirpath):
+        """To check the directory for full kernel sources
+        
+        Kernel may be installed with minimal (later vmlinuz) flag"""
+        documentationPath = path.join(dirpath,'Documentation')
+        driversPath = path.join(dirpath,'drivers')
+        if path.exists(documentationPath) \
+            and path.exists(driversPath):
+            return True
+        return False
 
     def setNoColor(self):
         self.color = False
diff --git a/pym/cl_kernel_cmd.py b/pym/cl_kernel_cmd.py
index 3a85ada..c703820 100644
--- a/pym/cl_kernel_cmd.py
+++ b/pym/cl_kernel_cmd.py
@@ -121,12 +121,28 @@ class kernel_cmd(share_cmd):
             self.checkIncompatibleParam("initrd")
         if values.symlink:
             self.checkIncompatibleParam("symlink")
-        if values.k:
-            if not self.logicObj._testKernelDirectory(values.k):
-                self.optobj.error("%s:'%s'"%
-                    (_("wrong kernel source directory"),values.k))
-            else:
-                self.logicObj.clVars.Set('cl_kernel_src_path',values.k,True)
+        if not values.v:
+            if values.k:
+                if not self.logicObj._testKernelDirectory(values.k):
+                    self.optobj.error("%s:'%s'"%
+                        (_("wrong kernel source directory"),values.k))
+                elif not self.logicObj._testFullKernelDirectory(values.k) \
+                        and self.checkNotEbuildParam(values,"postinst"):
+                    self.optobj.error(("%s:'%s'"%
+                        (_("in directory of kernel source not "
+                           "enough needed files"),
+                            values.k))+"\n"+
+                            _("Probably calculate-sources was "
+                              "compiled with USE 'minimal'"))
+                else:
+                    self.logicObj.clVars.Set('cl_kernel_src_path',values.k,True)
+            elif self.checkNotEbuildParam(values,"postinst"):
+                if not self.logicObj._testFullKernelDirectory(
+                        self.logicObj.clVars.Get('cl_kernel_src_path')):
+                    self.optobj.error((_("in default directory of kernel "
+                       "source not enough needed files")+"\n"+
+                       _("Probably calculate-sources was "
+                         "compiled with USE 'minimal'")))
         if values.c and values.o:
             self.optobj.error("%s: %s"%(_("incompatible options"),
                               self.getStringIncompatibleOptions(["c","o"])))
@@ -161,6 +177,9 @@ class kernel_cmd(share_cmd):
     def checkEbuildParam(self,options,phase):
         return not options.ebuild or os.environ["EBUILD_PHASE"] == phase
 
+    def checkNotEbuildParam(self,options,phase):
+        return not options.ebuild or os.environ["EBUILD_PHASE"] != phase
+
     def makeKernel(self,options):
         """Run kernel compilation, installation, optimization"""
         # if set ebuild param check cur EBUILD_PHASE, run kernel compilation
