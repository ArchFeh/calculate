diff --git pym/cl_builder.py pym/cl_builder.py
index 4745b47..86b23da 100644
--- pym/cl_builder.py
+++ pym/cl_builder.py
@@ -188,7 +188,11 @@ class cl_builder(color_print):
             envdict.update(os.environ)
             commandLine = ["chroot",chroot,
                                 "/bin/bash","-c",command]
-            chrootCommand = process(*commandLine,stderr=PIPE,
+            if self.clVars.Get('os_builder_arch_machine') != \
+                self.clVars.Get('os_arch_machine') and \
+                self.clVars.Get('os_arch_machine') == 'x86_64':
+                commandLine = ["linux32"]+commandLine
+            chrootCommand = process(*commandLine,stderr=STDOUT,
                                 stdout=PIPE,envdict=envdict)
         except KeyboardInterrupt:
             chrootCommand.kill()
@@ -240,7 +244,34 @@ class cl_builder(color_print):
 
     def prepareSourceDistributive(self,distr):
         """Unmount all bind,proc mount points from source distribute"""
+        cacheUser = "guest"
         mp = self.clVars.Get('cl_builder_path')
+        self.printByResult(True)
+        self.printMessageForTest(_("Create cache for %s home directory")%
+                                 cacheUser)
+        cmdAddUser = self.runChroot(mp, "useradd %s -u 1000"%cacheUser)
+        cmdFail = None
+        if cmdAddUser.success():
+            cmdDesktopCache =  self.runChroot(mp,
+                "cl-desktop %s --cache"%cacheUser)
+            if cmdDesktopCache.success():
+                cmdUserDel = self.runChroot(mp,
+                        "userdel %s"%cacheUser)
+                if cmdUserDel.success():
+                    self.printByResult(True)
+                else:
+                    cmdFail = cmdUserDel
+            else:
+                self.runChroot(mp, "userdel %s"%cacheUser).success()
+                cmdFail = cmdDesktopCache
+        else:
+            cmdFail = cmdAddUser
+        if cmdFail:
+            self.printByResult(False)
+            for line in cmdFail.readlines():
+                if line:
+                    self.printERROR(line)
+
         mps = filter(lambda x:x!=mp,map(lambda x:x[1],childMounts(mp)))
         for target in sorted(mps, reverse=True):
             self.printMessageForTest(_("Unmounting %s")%(target[len(mp):]))
@@ -275,7 +306,6 @@ class cl_builder(color_print):
             os.unlink(curProfileFile)
             os.symlink(newProfile,curProfileFile)
 
-
     def restoreProfile(self):
         """Restore profile"""
         if not self.curProfile:
